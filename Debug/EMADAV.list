
EMADAV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c24  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08007ce4  08007ce4  00017ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f54  08007f54  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007f54  08007f54  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f54  08007f54  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f54  08007f54  00017f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f58  08007f58  00017f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007f5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001188  20000074  08007fd0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011fc  08007fd0  000211fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016564  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003212  00000000  00000000  00036600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  00039818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001140  00000000  00000000  0003aab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001afe8  00000000  00000000  0003bbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017bd9  00000000  00000000  00056bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c344  00000000  00000000  0006e7b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010aaf5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004860  00000000  00000000  0010ab48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007ccc 	.word	0x08007ccc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08007ccc 	.word	0x08007ccc

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_dadd>:
 8000234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000236:	464f      	mov	r7, r9
 8000238:	4646      	mov	r6, r8
 800023a:	46d6      	mov	lr, sl
 800023c:	000d      	movs	r5, r1
 800023e:	0004      	movs	r4, r0
 8000240:	b5c0      	push	{r6, r7, lr}
 8000242:	001f      	movs	r7, r3
 8000244:	0011      	movs	r1, r2
 8000246:	0328      	lsls	r0, r5, #12
 8000248:	0f62      	lsrs	r2, r4, #29
 800024a:	0a40      	lsrs	r0, r0, #9
 800024c:	4310      	orrs	r0, r2
 800024e:	007a      	lsls	r2, r7, #1
 8000250:	0d52      	lsrs	r2, r2, #21
 8000252:	00e3      	lsls	r3, r4, #3
 8000254:	033c      	lsls	r4, r7, #12
 8000256:	4691      	mov	r9, r2
 8000258:	0a64      	lsrs	r4, r4, #9
 800025a:	0ffa      	lsrs	r2, r7, #31
 800025c:	0f4f      	lsrs	r7, r1, #29
 800025e:	006e      	lsls	r6, r5, #1
 8000260:	4327      	orrs	r7, r4
 8000262:	4692      	mov	sl, r2
 8000264:	46b8      	mov	r8, r7
 8000266:	0d76      	lsrs	r6, r6, #21
 8000268:	0fed      	lsrs	r5, r5, #31
 800026a:	00c9      	lsls	r1, r1, #3
 800026c:	4295      	cmp	r5, r2
 800026e:	d100      	bne.n	8000272 <__aeabi_dadd+0x3e>
 8000270:	e099      	b.n	80003a6 <__aeabi_dadd+0x172>
 8000272:	464c      	mov	r4, r9
 8000274:	1b34      	subs	r4, r6, r4
 8000276:	46a4      	mov	ip, r4
 8000278:	2c00      	cmp	r4, #0
 800027a:	dc00      	bgt.n	800027e <__aeabi_dadd+0x4a>
 800027c:	e07c      	b.n	8000378 <__aeabi_dadd+0x144>
 800027e:	464a      	mov	r2, r9
 8000280:	2a00      	cmp	r2, #0
 8000282:	d100      	bne.n	8000286 <__aeabi_dadd+0x52>
 8000284:	e0b8      	b.n	80003f8 <__aeabi_dadd+0x1c4>
 8000286:	4ac5      	ldr	r2, [pc, #788]	; (800059c <__aeabi_dadd+0x368>)
 8000288:	4296      	cmp	r6, r2
 800028a:	d100      	bne.n	800028e <__aeabi_dadd+0x5a>
 800028c:	e11c      	b.n	80004c8 <__aeabi_dadd+0x294>
 800028e:	2280      	movs	r2, #128	; 0x80
 8000290:	003c      	movs	r4, r7
 8000292:	0412      	lsls	r2, r2, #16
 8000294:	4314      	orrs	r4, r2
 8000296:	46a0      	mov	r8, r4
 8000298:	4662      	mov	r2, ip
 800029a:	2a38      	cmp	r2, #56	; 0x38
 800029c:	dd00      	ble.n	80002a0 <__aeabi_dadd+0x6c>
 800029e:	e161      	b.n	8000564 <__aeabi_dadd+0x330>
 80002a0:	2a1f      	cmp	r2, #31
 80002a2:	dd00      	ble.n	80002a6 <__aeabi_dadd+0x72>
 80002a4:	e1cc      	b.n	8000640 <__aeabi_dadd+0x40c>
 80002a6:	4664      	mov	r4, ip
 80002a8:	2220      	movs	r2, #32
 80002aa:	1b12      	subs	r2, r2, r4
 80002ac:	4644      	mov	r4, r8
 80002ae:	4094      	lsls	r4, r2
 80002b0:	000f      	movs	r7, r1
 80002b2:	46a1      	mov	r9, r4
 80002b4:	4664      	mov	r4, ip
 80002b6:	4091      	lsls	r1, r2
 80002b8:	40e7      	lsrs	r7, r4
 80002ba:	464c      	mov	r4, r9
 80002bc:	1e4a      	subs	r2, r1, #1
 80002be:	4191      	sbcs	r1, r2
 80002c0:	433c      	orrs	r4, r7
 80002c2:	4642      	mov	r2, r8
 80002c4:	4321      	orrs	r1, r4
 80002c6:	4664      	mov	r4, ip
 80002c8:	40e2      	lsrs	r2, r4
 80002ca:	1a80      	subs	r0, r0, r2
 80002cc:	1a5c      	subs	r4, r3, r1
 80002ce:	42a3      	cmp	r3, r4
 80002d0:	419b      	sbcs	r3, r3
 80002d2:	425f      	negs	r7, r3
 80002d4:	1bc7      	subs	r7, r0, r7
 80002d6:	023b      	lsls	r3, r7, #8
 80002d8:	d400      	bmi.n	80002dc <__aeabi_dadd+0xa8>
 80002da:	e0d0      	b.n	800047e <__aeabi_dadd+0x24a>
 80002dc:	027f      	lsls	r7, r7, #9
 80002de:	0a7f      	lsrs	r7, r7, #9
 80002e0:	2f00      	cmp	r7, #0
 80002e2:	d100      	bne.n	80002e6 <__aeabi_dadd+0xb2>
 80002e4:	e0ff      	b.n	80004e6 <__aeabi_dadd+0x2b2>
 80002e6:	0038      	movs	r0, r7
 80002e8:	f001 fcd4 	bl	8001c94 <__clzsi2>
 80002ec:	0001      	movs	r1, r0
 80002ee:	3908      	subs	r1, #8
 80002f0:	2320      	movs	r3, #32
 80002f2:	0022      	movs	r2, r4
 80002f4:	1a5b      	subs	r3, r3, r1
 80002f6:	408f      	lsls	r7, r1
 80002f8:	40da      	lsrs	r2, r3
 80002fa:	408c      	lsls	r4, r1
 80002fc:	4317      	orrs	r7, r2
 80002fe:	42b1      	cmp	r1, r6
 8000300:	da00      	bge.n	8000304 <__aeabi_dadd+0xd0>
 8000302:	e0ff      	b.n	8000504 <__aeabi_dadd+0x2d0>
 8000304:	1b89      	subs	r1, r1, r6
 8000306:	1c4b      	adds	r3, r1, #1
 8000308:	2b1f      	cmp	r3, #31
 800030a:	dd00      	ble.n	800030e <__aeabi_dadd+0xda>
 800030c:	e0a8      	b.n	8000460 <__aeabi_dadd+0x22c>
 800030e:	2220      	movs	r2, #32
 8000310:	0039      	movs	r1, r7
 8000312:	1ad2      	subs	r2, r2, r3
 8000314:	0020      	movs	r0, r4
 8000316:	4094      	lsls	r4, r2
 8000318:	4091      	lsls	r1, r2
 800031a:	40d8      	lsrs	r0, r3
 800031c:	1e62      	subs	r2, r4, #1
 800031e:	4194      	sbcs	r4, r2
 8000320:	40df      	lsrs	r7, r3
 8000322:	2600      	movs	r6, #0
 8000324:	4301      	orrs	r1, r0
 8000326:	430c      	orrs	r4, r1
 8000328:	0763      	lsls	r3, r4, #29
 800032a:	d009      	beq.n	8000340 <__aeabi_dadd+0x10c>
 800032c:	230f      	movs	r3, #15
 800032e:	4023      	ands	r3, r4
 8000330:	2b04      	cmp	r3, #4
 8000332:	d005      	beq.n	8000340 <__aeabi_dadd+0x10c>
 8000334:	1d23      	adds	r3, r4, #4
 8000336:	42a3      	cmp	r3, r4
 8000338:	41a4      	sbcs	r4, r4
 800033a:	4264      	negs	r4, r4
 800033c:	193f      	adds	r7, r7, r4
 800033e:	001c      	movs	r4, r3
 8000340:	023b      	lsls	r3, r7, #8
 8000342:	d400      	bmi.n	8000346 <__aeabi_dadd+0x112>
 8000344:	e09e      	b.n	8000484 <__aeabi_dadd+0x250>
 8000346:	4b95      	ldr	r3, [pc, #596]	; (800059c <__aeabi_dadd+0x368>)
 8000348:	3601      	adds	r6, #1
 800034a:	429e      	cmp	r6, r3
 800034c:	d100      	bne.n	8000350 <__aeabi_dadd+0x11c>
 800034e:	e0b7      	b.n	80004c0 <__aeabi_dadd+0x28c>
 8000350:	4a93      	ldr	r2, [pc, #588]	; (80005a0 <__aeabi_dadd+0x36c>)
 8000352:	08e4      	lsrs	r4, r4, #3
 8000354:	4017      	ands	r7, r2
 8000356:	077b      	lsls	r3, r7, #29
 8000358:	0571      	lsls	r1, r6, #21
 800035a:	027f      	lsls	r7, r7, #9
 800035c:	4323      	orrs	r3, r4
 800035e:	0b3f      	lsrs	r7, r7, #12
 8000360:	0d4a      	lsrs	r2, r1, #21
 8000362:	0512      	lsls	r2, r2, #20
 8000364:	433a      	orrs	r2, r7
 8000366:	07ed      	lsls	r5, r5, #31
 8000368:	432a      	orrs	r2, r5
 800036a:	0018      	movs	r0, r3
 800036c:	0011      	movs	r1, r2
 800036e:	bce0      	pop	{r5, r6, r7}
 8000370:	46ba      	mov	sl, r7
 8000372:	46b1      	mov	r9, r6
 8000374:	46a8      	mov	r8, r5
 8000376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000378:	2c00      	cmp	r4, #0
 800037a:	d04b      	beq.n	8000414 <__aeabi_dadd+0x1e0>
 800037c:	464c      	mov	r4, r9
 800037e:	1ba4      	subs	r4, r4, r6
 8000380:	46a4      	mov	ip, r4
 8000382:	2e00      	cmp	r6, #0
 8000384:	d000      	beq.n	8000388 <__aeabi_dadd+0x154>
 8000386:	e123      	b.n	80005d0 <__aeabi_dadd+0x39c>
 8000388:	0004      	movs	r4, r0
 800038a:	431c      	orrs	r4, r3
 800038c:	d100      	bne.n	8000390 <__aeabi_dadd+0x15c>
 800038e:	e1af      	b.n	80006f0 <__aeabi_dadd+0x4bc>
 8000390:	4662      	mov	r2, ip
 8000392:	1e54      	subs	r4, r2, #1
 8000394:	2a01      	cmp	r2, #1
 8000396:	d100      	bne.n	800039a <__aeabi_dadd+0x166>
 8000398:	e215      	b.n	80007c6 <__aeabi_dadd+0x592>
 800039a:	4d80      	ldr	r5, [pc, #512]	; (800059c <__aeabi_dadd+0x368>)
 800039c:	45ac      	cmp	ip, r5
 800039e:	d100      	bne.n	80003a2 <__aeabi_dadd+0x16e>
 80003a0:	e1c8      	b.n	8000734 <__aeabi_dadd+0x500>
 80003a2:	46a4      	mov	ip, r4
 80003a4:	e11b      	b.n	80005de <__aeabi_dadd+0x3aa>
 80003a6:	464a      	mov	r2, r9
 80003a8:	1ab2      	subs	r2, r6, r2
 80003aa:	4694      	mov	ip, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	dc00      	bgt.n	80003b2 <__aeabi_dadd+0x17e>
 80003b0:	e0ac      	b.n	800050c <__aeabi_dadd+0x2d8>
 80003b2:	464a      	mov	r2, r9
 80003b4:	2a00      	cmp	r2, #0
 80003b6:	d043      	beq.n	8000440 <__aeabi_dadd+0x20c>
 80003b8:	4a78      	ldr	r2, [pc, #480]	; (800059c <__aeabi_dadd+0x368>)
 80003ba:	4296      	cmp	r6, r2
 80003bc:	d100      	bne.n	80003c0 <__aeabi_dadd+0x18c>
 80003be:	e1af      	b.n	8000720 <__aeabi_dadd+0x4ec>
 80003c0:	2280      	movs	r2, #128	; 0x80
 80003c2:	003c      	movs	r4, r7
 80003c4:	0412      	lsls	r2, r2, #16
 80003c6:	4314      	orrs	r4, r2
 80003c8:	46a0      	mov	r8, r4
 80003ca:	4662      	mov	r2, ip
 80003cc:	2a38      	cmp	r2, #56	; 0x38
 80003ce:	dc67      	bgt.n	80004a0 <__aeabi_dadd+0x26c>
 80003d0:	2a1f      	cmp	r2, #31
 80003d2:	dc00      	bgt.n	80003d6 <__aeabi_dadd+0x1a2>
 80003d4:	e15f      	b.n	8000696 <__aeabi_dadd+0x462>
 80003d6:	4647      	mov	r7, r8
 80003d8:	3a20      	subs	r2, #32
 80003da:	40d7      	lsrs	r7, r2
 80003dc:	4662      	mov	r2, ip
 80003de:	2a20      	cmp	r2, #32
 80003e0:	d005      	beq.n	80003ee <__aeabi_dadd+0x1ba>
 80003e2:	4664      	mov	r4, ip
 80003e4:	2240      	movs	r2, #64	; 0x40
 80003e6:	1b12      	subs	r2, r2, r4
 80003e8:	4644      	mov	r4, r8
 80003ea:	4094      	lsls	r4, r2
 80003ec:	4321      	orrs	r1, r4
 80003ee:	1e4a      	subs	r2, r1, #1
 80003f0:	4191      	sbcs	r1, r2
 80003f2:	000c      	movs	r4, r1
 80003f4:	433c      	orrs	r4, r7
 80003f6:	e057      	b.n	80004a8 <__aeabi_dadd+0x274>
 80003f8:	003a      	movs	r2, r7
 80003fa:	430a      	orrs	r2, r1
 80003fc:	d100      	bne.n	8000400 <__aeabi_dadd+0x1cc>
 80003fe:	e105      	b.n	800060c <__aeabi_dadd+0x3d8>
 8000400:	0022      	movs	r2, r4
 8000402:	3a01      	subs	r2, #1
 8000404:	2c01      	cmp	r4, #1
 8000406:	d100      	bne.n	800040a <__aeabi_dadd+0x1d6>
 8000408:	e182      	b.n	8000710 <__aeabi_dadd+0x4dc>
 800040a:	4c64      	ldr	r4, [pc, #400]	; (800059c <__aeabi_dadd+0x368>)
 800040c:	45a4      	cmp	ip, r4
 800040e:	d05b      	beq.n	80004c8 <__aeabi_dadd+0x294>
 8000410:	4694      	mov	ip, r2
 8000412:	e741      	b.n	8000298 <__aeabi_dadd+0x64>
 8000414:	4c63      	ldr	r4, [pc, #396]	; (80005a4 <__aeabi_dadd+0x370>)
 8000416:	1c77      	adds	r7, r6, #1
 8000418:	4227      	tst	r7, r4
 800041a:	d000      	beq.n	800041e <__aeabi_dadd+0x1ea>
 800041c:	e0c4      	b.n	80005a8 <__aeabi_dadd+0x374>
 800041e:	0004      	movs	r4, r0
 8000420:	431c      	orrs	r4, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d000      	beq.n	8000428 <__aeabi_dadd+0x1f4>
 8000426:	e169      	b.n	80006fc <__aeabi_dadd+0x4c8>
 8000428:	2c00      	cmp	r4, #0
 800042a:	d100      	bne.n	800042e <__aeabi_dadd+0x1fa>
 800042c:	e1bf      	b.n	80007ae <__aeabi_dadd+0x57a>
 800042e:	4644      	mov	r4, r8
 8000430:	430c      	orrs	r4, r1
 8000432:	d000      	beq.n	8000436 <__aeabi_dadd+0x202>
 8000434:	e1d0      	b.n	80007d8 <__aeabi_dadd+0x5a4>
 8000436:	0742      	lsls	r2, r0, #29
 8000438:	08db      	lsrs	r3, r3, #3
 800043a:	4313      	orrs	r3, r2
 800043c:	08c0      	lsrs	r0, r0, #3
 800043e:	e029      	b.n	8000494 <__aeabi_dadd+0x260>
 8000440:	003a      	movs	r2, r7
 8000442:	430a      	orrs	r2, r1
 8000444:	d100      	bne.n	8000448 <__aeabi_dadd+0x214>
 8000446:	e170      	b.n	800072a <__aeabi_dadd+0x4f6>
 8000448:	4662      	mov	r2, ip
 800044a:	4664      	mov	r4, ip
 800044c:	3a01      	subs	r2, #1
 800044e:	2c01      	cmp	r4, #1
 8000450:	d100      	bne.n	8000454 <__aeabi_dadd+0x220>
 8000452:	e0e0      	b.n	8000616 <__aeabi_dadd+0x3e2>
 8000454:	4c51      	ldr	r4, [pc, #324]	; (800059c <__aeabi_dadd+0x368>)
 8000456:	45a4      	cmp	ip, r4
 8000458:	d100      	bne.n	800045c <__aeabi_dadd+0x228>
 800045a:	e161      	b.n	8000720 <__aeabi_dadd+0x4ec>
 800045c:	4694      	mov	ip, r2
 800045e:	e7b4      	b.n	80003ca <__aeabi_dadd+0x196>
 8000460:	003a      	movs	r2, r7
 8000462:	391f      	subs	r1, #31
 8000464:	40ca      	lsrs	r2, r1
 8000466:	0011      	movs	r1, r2
 8000468:	2b20      	cmp	r3, #32
 800046a:	d003      	beq.n	8000474 <__aeabi_dadd+0x240>
 800046c:	2240      	movs	r2, #64	; 0x40
 800046e:	1ad3      	subs	r3, r2, r3
 8000470:	409f      	lsls	r7, r3
 8000472:	433c      	orrs	r4, r7
 8000474:	1e63      	subs	r3, r4, #1
 8000476:	419c      	sbcs	r4, r3
 8000478:	2700      	movs	r7, #0
 800047a:	2600      	movs	r6, #0
 800047c:	430c      	orrs	r4, r1
 800047e:	0763      	lsls	r3, r4, #29
 8000480:	d000      	beq.n	8000484 <__aeabi_dadd+0x250>
 8000482:	e753      	b.n	800032c <__aeabi_dadd+0xf8>
 8000484:	46b4      	mov	ip, r6
 8000486:	08e4      	lsrs	r4, r4, #3
 8000488:	077b      	lsls	r3, r7, #29
 800048a:	4323      	orrs	r3, r4
 800048c:	08f8      	lsrs	r0, r7, #3
 800048e:	4a43      	ldr	r2, [pc, #268]	; (800059c <__aeabi_dadd+0x368>)
 8000490:	4594      	cmp	ip, r2
 8000492:	d01d      	beq.n	80004d0 <__aeabi_dadd+0x29c>
 8000494:	4662      	mov	r2, ip
 8000496:	0307      	lsls	r7, r0, #12
 8000498:	0552      	lsls	r2, r2, #21
 800049a:	0b3f      	lsrs	r7, r7, #12
 800049c:	0d52      	lsrs	r2, r2, #21
 800049e:	e760      	b.n	8000362 <__aeabi_dadd+0x12e>
 80004a0:	4644      	mov	r4, r8
 80004a2:	430c      	orrs	r4, r1
 80004a4:	1e62      	subs	r2, r4, #1
 80004a6:	4194      	sbcs	r4, r2
 80004a8:	18e4      	adds	r4, r4, r3
 80004aa:	429c      	cmp	r4, r3
 80004ac:	419b      	sbcs	r3, r3
 80004ae:	425f      	negs	r7, r3
 80004b0:	183f      	adds	r7, r7, r0
 80004b2:	023b      	lsls	r3, r7, #8
 80004b4:	d5e3      	bpl.n	800047e <__aeabi_dadd+0x24a>
 80004b6:	4b39      	ldr	r3, [pc, #228]	; (800059c <__aeabi_dadd+0x368>)
 80004b8:	3601      	adds	r6, #1
 80004ba:	429e      	cmp	r6, r3
 80004bc:	d000      	beq.n	80004c0 <__aeabi_dadd+0x28c>
 80004be:	e0b5      	b.n	800062c <__aeabi_dadd+0x3f8>
 80004c0:	0032      	movs	r2, r6
 80004c2:	2700      	movs	r7, #0
 80004c4:	2300      	movs	r3, #0
 80004c6:	e74c      	b.n	8000362 <__aeabi_dadd+0x12e>
 80004c8:	0742      	lsls	r2, r0, #29
 80004ca:	08db      	lsrs	r3, r3, #3
 80004cc:	4313      	orrs	r3, r2
 80004ce:	08c0      	lsrs	r0, r0, #3
 80004d0:	001a      	movs	r2, r3
 80004d2:	4302      	orrs	r2, r0
 80004d4:	d100      	bne.n	80004d8 <__aeabi_dadd+0x2a4>
 80004d6:	e1e1      	b.n	800089c <__aeabi_dadd+0x668>
 80004d8:	2780      	movs	r7, #128	; 0x80
 80004da:	033f      	lsls	r7, r7, #12
 80004dc:	4307      	orrs	r7, r0
 80004de:	033f      	lsls	r7, r7, #12
 80004e0:	4a2e      	ldr	r2, [pc, #184]	; (800059c <__aeabi_dadd+0x368>)
 80004e2:	0b3f      	lsrs	r7, r7, #12
 80004e4:	e73d      	b.n	8000362 <__aeabi_dadd+0x12e>
 80004e6:	0020      	movs	r0, r4
 80004e8:	f001 fbd4 	bl	8001c94 <__clzsi2>
 80004ec:	0001      	movs	r1, r0
 80004ee:	3118      	adds	r1, #24
 80004f0:	291f      	cmp	r1, #31
 80004f2:	dc00      	bgt.n	80004f6 <__aeabi_dadd+0x2c2>
 80004f4:	e6fc      	b.n	80002f0 <__aeabi_dadd+0xbc>
 80004f6:	3808      	subs	r0, #8
 80004f8:	4084      	lsls	r4, r0
 80004fa:	0027      	movs	r7, r4
 80004fc:	2400      	movs	r4, #0
 80004fe:	42b1      	cmp	r1, r6
 8000500:	db00      	blt.n	8000504 <__aeabi_dadd+0x2d0>
 8000502:	e6ff      	b.n	8000304 <__aeabi_dadd+0xd0>
 8000504:	4a26      	ldr	r2, [pc, #152]	; (80005a0 <__aeabi_dadd+0x36c>)
 8000506:	1a76      	subs	r6, r6, r1
 8000508:	4017      	ands	r7, r2
 800050a:	e70d      	b.n	8000328 <__aeabi_dadd+0xf4>
 800050c:	2a00      	cmp	r2, #0
 800050e:	d02f      	beq.n	8000570 <__aeabi_dadd+0x33c>
 8000510:	464a      	mov	r2, r9
 8000512:	1b92      	subs	r2, r2, r6
 8000514:	4694      	mov	ip, r2
 8000516:	2e00      	cmp	r6, #0
 8000518:	d100      	bne.n	800051c <__aeabi_dadd+0x2e8>
 800051a:	e0ad      	b.n	8000678 <__aeabi_dadd+0x444>
 800051c:	4a1f      	ldr	r2, [pc, #124]	; (800059c <__aeabi_dadd+0x368>)
 800051e:	4591      	cmp	r9, r2
 8000520:	d100      	bne.n	8000524 <__aeabi_dadd+0x2f0>
 8000522:	e10f      	b.n	8000744 <__aeabi_dadd+0x510>
 8000524:	2280      	movs	r2, #128	; 0x80
 8000526:	0412      	lsls	r2, r2, #16
 8000528:	4310      	orrs	r0, r2
 800052a:	4662      	mov	r2, ip
 800052c:	2a38      	cmp	r2, #56	; 0x38
 800052e:	dd00      	ble.n	8000532 <__aeabi_dadd+0x2fe>
 8000530:	e10f      	b.n	8000752 <__aeabi_dadd+0x51e>
 8000532:	2a1f      	cmp	r2, #31
 8000534:	dd00      	ble.n	8000538 <__aeabi_dadd+0x304>
 8000536:	e180      	b.n	800083a <__aeabi_dadd+0x606>
 8000538:	4664      	mov	r4, ip
 800053a:	2220      	movs	r2, #32
 800053c:	001e      	movs	r6, r3
 800053e:	1b12      	subs	r2, r2, r4
 8000540:	4667      	mov	r7, ip
 8000542:	0004      	movs	r4, r0
 8000544:	4093      	lsls	r3, r2
 8000546:	4094      	lsls	r4, r2
 8000548:	40fe      	lsrs	r6, r7
 800054a:	1e5a      	subs	r2, r3, #1
 800054c:	4193      	sbcs	r3, r2
 800054e:	40f8      	lsrs	r0, r7
 8000550:	4334      	orrs	r4, r6
 8000552:	431c      	orrs	r4, r3
 8000554:	4480      	add	r8, r0
 8000556:	1864      	adds	r4, r4, r1
 8000558:	428c      	cmp	r4, r1
 800055a:	41bf      	sbcs	r7, r7
 800055c:	427f      	negs	r7, r7
 800055e:	464e      	mov	r6, r9
 8000560:	4447      	add	r7, r8
 8000562:	e7a6      	b.n	80004b2 <__aeabi_dadd+0x27e>
 8000564:	4642      	mov	r2, r8
 8000566:	430a      	orrs	r2, r1
 8000568:	0011      	movs	r1, r2
 800056a:	1e4a      	subs	r2, r1, #1
 800056c:	4191      	sbcs	r1, r2
 800056e:	e6ad      	b.n	80002cc <__aeabi_dadd+0x98>
 8000570:	4c0c      	ldr	r4, [pc, #48]	; (80005a4 <__aeabi_dadd+0x370>)
 8000572:	1c72      	adds	r2, r6, #1
 8000574:	4222      	tst	r2, r4
 8000576:	d000      	beq.n	800057a <__aeabi_dadd+0x346>
 8000578:	e0a1      	b.n	80006be <__aeabi_dadd+0x48a>
 800057a:	0002      	movs	r2, r0
 800057c:	431a      	orrs	r2, r3
 800057e:	2e00      	cmp	r6, #0
 8000580:	d000      	beq.n	8000584 <__aeabi_dadd+0x350>
 8000582:	e0fa      	b.n	800077a <__aeabi_dadd+0x546>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d100      	bne.n	800058a <__aeabi_dadd+0x356>
 8000588:	e145      	b.n	8000816 <__aeabi_dadd+0x5e2>
 800058a:	003a      	movs	r2, r7
 800058c:	430a      	orrs	r2, r1
 800058e:	d000      	beq.n	8000592 <__aeabi_dadd+0x35e>
 8000590:	e146      	b.n	8000820 <__aeabi_dadd+0x5ec>
 8000592:	0742      	lsls	r2, r0, #29
 8000594:	08db      	lsrs	r3, r3, #3
 8000596:	4313      	orrs	r3, r2
 8000598:	08c0      	lsrs	r0, r0, #3
 800059a:	e77b      	b.n	8000494 <__aeabi_dadd+0x260>
 800059c:	000007ff 	.word	0x000007ff
 80005a0:	ff7fffff 	.word	0xff7fffff
 80005a4:	000007fe 	.word	0x000007fe
 80005a8:	4647      	mov	r7, r8
 80005aa:	1a5c      	subs	r4, r3, r1
 80005ac:	1bc2      	subs	r2, r0, r7
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	41bf      	sbcs	r7, r7
 80005b2:	427f      	negs	r7, r7
 80005b4:	46b9      	mov	r9, r7
 80005b6:	0017      	movs	r7, r2
 80005b8:	464a      	mov	r2, r9
 80005ba:	1abf      	subs	r7, r7, r2
 80005bc:	023a      	lsls	r2, r7, #8
 80005be:	d500      	bpl.n	80005c2 <__aeabi_dadd+0x38e>
 80005c0:	e08d      	b.n	80006de <__aeabi_dadd+0x4aa>
 80005c2:	0023      	movs	r3, r4
 80005c4:	433b      	orrs	r3, r7
 80005c6:	d000      	beq.n	80005ca <__aeabi_dadd+0x396>
 80005c8:	e68a      	b.n	80002e0 <__aeabi_dadd+0xac>
 80005ca:	2000      	movs	r0, #0
 80005cc:	2500      	movs	r5, #0
 80005ce:	e761      	b.n	8000494 <__aeabi_dadd+0x260>
 80005d0:	4cb4      	ldr	r4, [pc, #720]	; (80008a4 <__aeabi_dadd+0x670>)
 80005d2:	45a1      	cmp	r9, r4
 80005d4:	d100      	bne.n	80005d8 <__aeabi_dadd+0x3a4>
 80005d6:	e0ad      	b.n	8000734 <__aeabi_dadd+0x500>
 80005d8:	2480      	movs	r4, #128	; 0x80
 80005da:	0424      	lsls	r4, r4, #16
 80005dc:	4320      	orrs	r0, r4
 80005de:	4664      	mov	r4, ip
 80005e0:	2c38      	cmp	r4, #56	; 0x38
 80005e2:	dc3d      	bgt.n	8000660 <__aeabi_dadd+0x42c>
 80005e4:	4662      	mov	r2, ip
 80005e6:	2c1f      	cmp	r4, #31
 80005e8:	dd00      	ble.n	80005ec <__aeabi_dadd+0x3b8>
 80005ea:	e0b7      	b.n	800075c <__aeabi_dadd+0x528>
 80005ec:	2520      	movs	r5, #32
 80005ee:	001e      	movs	r6, r3
 80005f0:	1b2d      	subs	r5, r5, r4
 80005f2:	0004      	movs	r4, r0
 80005f4:	40ab      	lsls	r3, r5
 80005f6:	40ac      	lsls	r4, r5
 80005f8:	40d6      	lsrs	r6, r2
 80005fa:	40d0      	lsrs	r0, r2
 80005fc:	4642      	mov	r2, r8
 80005fe:	1e5d      	subs	r5, r3, #1
 8000600:	41ab      	sbcs	r3, r5
 8000602:	4334      	orrs	r4, r6
 8000604:	1a12      	subs	r2, r2, r0
 8000606:	4690      	mov	r8, r2
 8000608:	4323      	orrs	r3, r4
 800060a:	e02c      	b.n	8000666 <__aeabi_dadd+0x432>
 800060c:	0742      	lsls	r2, r0, #29
 800060e:	08db      	lsrs	r3, r3, #3
 8000610:	4313      	orrs	r3, r2
 8000612:	08c0      	lsrs	r0, r0, #3
 8000614:	e73b      	b.n	800048e <__aeabi_dadd+0x25a>
 8000616:	185c      	adds	r4, r3, r1
 8000618:	429c      	cmp	r4, r3
 800061a:	419b      	sbcs	r3, r3
 800061c:	4440      	add	r0, r8
 800061e:	425b      	negs	r3, r3
 8000620:	18c7      	adds	r7, r0, r3
 8000622:	2601      	movs	r6, #1
 8000624:	023b      	lsls	r3, r7, #8
 8000626:	d400      	bmi.n	800062a <__aeabi_dadd+0x3f6>
 8000628:	e729      	b.n	800047e <__aeabi_dadd+0x24a>
 800062a:	2602      	movs	r6, #2
 800062c:	4a9e      	ldr	r2, [pc, #632]	; (80008a8 <__aeabi_dadd+0x674>)
 800062e:	0863      	lsrs	r3, r4, #1
 8000630:	4017      	ands	r7, r2
 8000632:	2201      	movs	r2, #1
 8000634:	4014      	ands	r4, r2
 8000636:	431c      	orrs	r4, r3
 8000638:	07fb      	lsls	r3, r7, #31
 800063a:	431c      	orrs	r4, r3
 800063c:	087f      	lsrs	r7, r7, #1
 800063e:	e673      	b.n	8000328 <__aeabi_dadd+0xf4>
 8000640:	4644      	mov	r4, r8
 8000642:	3a20      	subs	r2, #32
 8000644:	40d4      	lsrs	r4, r2
 8000646:	4662      	mov	r2, ip
 8000648:	2a20      	cmp	r2, #32
 800064a:	d005      	beq.n	8000658 <__aeabi_dadd+0x424>
 800064c:	4667      	mov	r7, ip
 800064e:	2240      	movs	r2, #64	; 0x40
 8000650:	1bd2      	subs	r2, r2, r7
 8000652:	4647      	mov	r7, r8
 8000654:	4097      	lsls	r7, r2
 8000656:	4339      	orrs	r1, r7
 8000658:	1e4a      	subs	r2, r1, #1
 800065a:	4191      	sbcs	r1, r2
 800065c:	4321      	orrs	r1, r4
 800065e:	e635      	b.n	80002cc <__aeabi_dadd+0x98>
 8000660:	4303      	orrs	r3, r0
 8000662:	1e58      	subs	r0, r3, #1
 8000664:	4183      	sbcs	r3, r0
 8000666:	1acc      	subs	r4, r1, r3
 8000668:	42a1      	cmp	r1, r4
 800066a:	41bf      	sbcs	r7, r7
 800066c:	4643      	mov	r3, r8
 800066e:	427f      	negs	r7, r7
 8000670:	4655      	mov	r5, sl
 8000672:	464e      	mov	r6, r9
 8000674:	1bdf      	subs	r7, r3, r7
 8000676:	e62e      	b.n	80002d6 <__aeabi_dadd+0xa2>
 8000678:	0002      	movs	r2, r0
 800067a:	431a      	orrs	r2, r3
 800067c:	d100      	bne.n	8000680 <__aeabi_dadd+0x44c>
 800067e:	e0bd      	b.n	80007fc <__aeabi_dadd+0x5c8>
 8000680:	4662      	mov	r2, ip
 8000682:	4664      	mov	r4, ip
 8000684:	3a01      	subs	r2, #1
 8000686:	2c01      	cmp	r4, #1
 8000688:	d100      	bne.n	800068c <__aeabi_dadd+0x458>
 800068a:	e0e5      	b.n	8000858 <__aeabi_dadd+0x624>
 800068c:	4c85      	ldr	r4, [pc, #532]	; (80008a4 <__aeabi_dadd+0x670>)
 800068e:	45a4      	cmp	ip, r4
 8000690:	d058      	beq.n	8000744 <__aeabi_dadd+0x510>
 8000692:	4694      	mov	ip, r2
 8000694:	e749      	b.n	800052a <__aeabi_dadd+0x2f6>
 8000696:	4664      	mov	r4, ip
 8000698:	2220      	movs	r2, #32
 800069a:	1b12      	subs	r2, r2, r4
 800069c:	4644      	mov	r4, r8
 800069e:	4094      	lsls	r4, r2
 80006a0:	000f      	movs	r7, r1
 80006a2:	46a1      	mov	r9, r4
 80006a4:	4664      	mov	r4, ip
 80006a6:	4091      	lsls	r1, r2
 80006a8:	40e7      	lsrs	r7, r4
 80006aa:	464c      	mov	r4, r9
 80006ac:	1e4a      	subs	r2, r1, #1
 80006ae:	4191      	sbcs	r1, r2
 80006b0:	433c      	orrs	r4, r7
 80006b2:	4642      	mov	r2, r8
 80006b4:	430c      	orrs	r4, r1
 80006b6:	4661      	mov	r1, ip
 80006b8:	40ca      	lsrs	r2, r1
 80006ba:	1880      	adds	r0, r0, r2
 80006bc:	e6f4      	b.n	80004a8 <__aeabi_dadd+0x274>
 80006be:	4c79      	ldr	r4, [pc, #484]	; (80008a4 <__aeabi_dadd+0x670>)
 80006c0:	42a2      	cmp	r2, r4
 80006c2:	d100      	bne.n	80006c6 <__aeabi_dadd+0x492>
 80006c4:	e6fd      	b.n	80004c2 <__aeabi_dadd+0x28e>
 80006c6:	1859      	adds	r1, r3, r1
 80006c8:	4299      	cmp	r1, r3
 80006ca:	419b      	sbcs	r3, r3
 80006cc:	4440      	add	r0, r8
 80006ce:	425f      	negs	r7, r3
 80006d0:	19c7      	adds	r7, r0, r7
 80006d2:	07fc      	lsls	r4, r7, #31
 80006d4:	0849      	lsrs	r1, r1, #1
 80006d6:	0016      	movs	r6, r2
 80006d8:	430c      	orrs	r4, r1
 80006da:	087f      	lsrs	r7, r7, #1
 80006dc:	e6cf      	b.n	800047e <__aeabi_dadd+0x24a>
 80006de:	1acc      	subs	r4, r1, r3
 80006e0:	42a1      	cmp	r1, r4
 80006e2:	41bf      	sbcs	r7, r7
 80006e4:	4643      	mov	r3, r8
 80006e6:	427f      	negs	r7, r7
 80006e8:	1a18      	subs	r0, r3, r0
 80006ea:	4655      	mov	r5, sl
 80006ec:	1bc7      	subs	r7, r0, r7
 80006ee:	e5f7      	b.n	80002e0 <__aeabi_dadd+0xac>
 80006f0:	08c9      	lsrs	r1, r1, #3
 80006f2:	077b      	lsls	r3, r7, #29
 80006f4:	4655      	mov	r5, sl
 80006f6:	430b      	orrs	r3, r1
 80006f8:	08f8      	lsrs	r0, r7, #3
 80006fa:	e6c8      	b.n	800048e <__aeabi_dadd+0x25a>
 80006fc:	2c00      	cmp	r4, #0
 80006fe:	d000      	beq.n	8000702 <__aeabi_dadd+0x4ce>
 8000700:	e081      	b.n	8000806 <__aeabi_dadd+0x5d2>
 8000702:	4643      	mov	r3, r8
 8000704:	430b      	orrs	r3, r1
 8000706:	d115      	bne.n	8000734 <__aeabi_dadd+0x500>
 8000708:	2080      	movs	r0, #128	; 0x80
 800070a:	2500      	movs	r5, #0
 800070c:	0300      	lsls	r0, r0, #12
 800070e:	e6e3      	b.n	80004d8 <__aeabi_dadd+0x2a4>
 8000710:	1a5c      	subs	r4, r3, r1
 8000712:	42a3      	cmp	r3, r4
 8000714:	419b      	sbcs	r3, r3
 8000716:	1bc7      	subs	r7, r0, r7
 8000718:	425b      	negs	r3, r3
 800071a:	2601      	movs	r6, #1
 800071c:	1aff      	subs	r7, r7, r3
 800071e:	e5da      	b.n	80002d6 <__aeabi_dadd+0xa2>
 8000720:	0742      	lsls	r2, r0, #29
 8000722:	08db      	lsrs	r3, r3, #3
 8000724:	4313      	orrs	r3, r2
 8000726:	08c0      	lsrs	r0, r0, #3
 8000728:	e6d2      	b.n	80004d0 <__aeabi_dadd+0x29c>
 800072a:	0742      	lsls	r2, r0, #29
 800072c:	08db      	lsrs	r3, r3, #3
 800072e:	4313      	orrs	r3, r2
 8000730:	08c0      	lsrs	r0, r0, #3
 8000732:	e6ac      	b.n	800048e <__aeabi_dadd+0x25a>
 8000734:	4643      	mov	r3, r8
 8000736:	4642      	mov	r2, r8
 8000738:	08c9      	lsrs	r1, r1, #3
 800073a:	075b      	lsls	r3, r3, #29
 800073c:	4655      	mov	r5, sl
 800073e:	430b      	orrs	r3, r1
 8000740:	08d0      	lsrs	r0, r2, #3
 8000742:	e6c5      	b.n	80004d0 <__aeabi_dadd+0x29c>
 8000744:	4643      	mov	r3, r8
 8000746:	4642      	mov	r2, r8
 8000748:	075b      	lsls	r3, r3, #29
 800074a:	08c9      	lsrs	r1, r1, #3
 800074c:	430b      	orrs	r3, r1
 800074e:	08d0      	lsrs	r0, r2, #3
 8000750:	e6be      	b.n	80004d0 <__aeabi_dadd+0x29c>
 8000752:	4303      	orrs	r3, r0
 8000754:	001c      	movs	r4, r3
 8000756:	1e63      	subs	r3, r4, #1
 8000758:	419c      	sbcs	r4, r3
 800075a:	e6fc      	b.n	8000556 <__aeabi_dadd+0x322>
 800075c:	0002      	movs	r2, r0
 800075e:	3c20      	subs	r4, #32
 8000760:	40e2      	lsrs	r2, r4
 8000762:	0014      	movs	r4, r2
 8000764:	4662      	mov	r2, ip
 8000766:	2a20      	cmp	r2, #32
 8000768:	d003      	beq.n	8000772 <__aeabi_dadd+0x53e>
 800076a:	2540      	movs	r5, #64	; 0x40
 800076c:	1aad      	subs	r5, r5, r2
 800076e:	40a8      	lsls	r0, r5
 8000770:	4303      	orrs	r3, r0
 8000772:	1e58      	subs	r0, r3, #1
 8000774:	4183      	sbcs	r3, r0
 8000776:	4323      	orrs	r3, r4
 8000778:	e775      	b.n	8000666 <__aeabi_dadd+0x432>
 800077a:	2a00      	cmp	r2, #0
 800077c:	d0e2      	beq.n	8000744 <__aeabi_dadd+0x510>
 800077e:	003a      	movs	r2, r7
 8000780:	430a      	orrs	r2, r1
 8000782:	d0cd      	beq.n	8000720 <__aeabi_dadd+0x4ec>
 8000784:	0742      	lsls	r2, r0, #29
 8000786:	08db      	lsrs	r3, r3, #3
 8000788:	4313      	orrs	r3, r2
 800078a:	2280      	movs	r2, #128	; 0x80
 800078c:	08c0      	lsrs	r0, r0, #3
 800078e:	0312      	lsls	r2, r2, #12
 8000790:	4210      	tst	r0, r2
 8000792:	d006      	beq.n	80007a2 <__aeabi_dadd+0x56e>
 8000794:	08fc      	lsrs	r4, r7, #3
 8000796:	4214      	tst	r4, r2
 8000798:	d103      	bne.n	80007a2 <__aeabi_dadd+0x56e>
 800079a:	0020      	movs	r0, r4
 800079c:	08cb      	lsrs	r3, r1, #3
 800079e:	077a      	lsls	r2, r7, #29
 80007a0:	4313      	orrs	r3, r2
 80007a2:	0f5a      	lsrs	r2, r3, #29
 80007a4:	00db      	lsls	r3, r3, #3
 80007a6:	0752      	lsls	r2, r2, #29
 80007a8:	08db      	lsrs	r3, r3, #3
 80007aa:	4313      	orrs	r3, r2
 80007ac:	e690      	b.n	80004d0 <__aeabi_dadd+0x29c>
 80007ae:	4643      	mov	r3, r8
 80007b0:	430b      	orrs	r3, r1
 80007b2:	d100      	bne.n	80007b6 <__aeabi_dadd+0x582>
 80007b4:	e709      	b.n	80005ca <__aeabi_dadd+0x396>
 80007b6:	4643      	mov	r3, r8
 80007b8:	4642      	mov	r2, r8
 80007ba:	08c9      	lsrs	r1, r1, #3
 80007bc:	075b      	lsls	r3, r3, #29
 80007be:	4655      	mov	r5, sl
 80007c0:	430b      	orrs	r3, r1
 80007c2:	08d0      	lsrs	r0, r2, #3
 80007c4:	e666      	b.n	8000494 <__aeabi_dadd+0x260>
 80007c6:	1acc      	subs	r4, r1, r3
 80007c8:	42a1      	cmp	r1, r4
 80007ca:	4189      	sbcs	r1, r1
 80007cc:	1a3f      	subs	r7, r7, r0
 80007ce:	4249      	negs	r1, r1
 80007d0:	4655      	mov	r5, sl
 80007d2:	2601      	movs	r6, #1
 80007d4:	1a7f      	subs	r7, r7, r1
 80007d6:	e57e      	b.n	80002d6 <__aeabi_dadd+0xa2>
 80007d8:	4642      	mov	r2, r8
 80007da:	1a5c      	subs	r4, r3, r1
 80007dc:	1a87      	subs	r7, r0, r2
 80007de:	42a3      	cmp	r3, r4
 80007e0:	4192      	sbcs	r2, r2
 80007e2:	4252      	negs	r2, r2
 80007e4:	1abf      	subs	r7, r7, r2
 80007e6:	023a      	lsls	r2, r7, #8
 80007e8:	d53d      	bpl.n	8000866 <__aeabi_dadd+0x632>
 80007ea:	1acc      	subs	r4, r1, r3
 80007ec:	42a1      	cmp	r1, r4
 80007ee:	4189      	sbcs	r1, r1
 80007f0:	4643      	mov	r3, r8
 80007f2:	4249      	negs	r1, r1
 80007f4:	1a1f      	subs	r7, r3, r0
 80007f6:	4655      	mov	r5, sl
 80007f8:	1a7f      	subs	r7, r7, r1
 80007fa:	e595      	b.n	8000328 <__aeabi_dadd+0xf4>
 80007fc:	077b      	lsls	r3, r7, #29
 80007fe:	08c9      	lsrs	r1, r1, #3
 8000800:	430b      	orrs	r3, r1
 8000802:	08f8      	lsrs	r0, r7, #3
 8000804:	e643      	b.n	800048e <__aeabi_dadd+0x25a>
 8000806:	4644      	mov	r4, r8
 8000808:	08db      	lsrs	r3, r3, #3
 800080a:	430c      	orrs	r4, r1
 800080c:	d130      	bne.n	8000870 <__aeabi_dadd+0x63c>
 800080e:	0742      	lsls	r2, r0, #29
 8000810:	4313      	orrs	r3, r2
 8000812:	08c0      	lsrs	r0, r0, #3
 8000814:	e65c      	b.n	80004d0 <__aeabi_dadd+0x29c>
 8000816:	077b      	lsls	r3, r7, #29
 8000818:	08c9      	lsrs	r1, r1, #3
 800081a:	430b      	orrs	r3, r1
 800081c:	08f8      	lsrs	r0, r7, #3
 800081e:	e639      	b.n	8000494 <__aeabi_dadd+0x260>
 8000820:	185c      	adds	r4, r3, r1
 8000822:	429c      	cmp	r4, r3
 8000824:	419b      	sbcs	r3, r3
 8000826:	4440      	add	r0, r8
 8000828:	425b      	negs	r3, r3
 800082a:	18c7      	adds	r7, r0, r3
 800082c:	023b      	lsls	r3, r7, #8
 800082e:	d400      	bmi.n	8000832 <__aeabi_dadd+0x5fe>
 8000830:	e625      	b.n	800047e <__aeabi_dadd+0x24a>
 8000832:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <__aeabi_dadd+0x674>)
 8000834:	2601      	movs	r6, #1
 8000836:	401f      	ands	r7, r3
 8000838:	e621      	b.n	800047e <__aeabi_dadd+0x24a>
 800083a:	0004      	movs	r4, r0
 800083c:	3a20      	subs	r2, #32
 800083e:	40d4      	lsrs	r4, r2
 8000840:	4662      	mov	r2, ip
 8000842:	2a20      	cmp	r2, #32
 8000844:	d004      	beq.n	8000850 <__aeabi_dadd+0x61c>
 8000846:	2240      	movs	r2, #64	; 0x40
 8000848:	4666      	mov	r6, ip
 800084a:	1b92      	subs	r2, r2, r6
 800084c:	4090      	lsls	r0, r2
 800084e:	4303      	orrs	r3, r0
 8000850:	1e5a      	subs	r2, r3, #1
 8000852:	4193      	sbcs	r3, r2
 8000854:	431c      	orrs	r4, r3
 8000856:	e67e      	b.n	8000556 <__aeabi_dadd+0x322>
 8000858:	185c      	adds	r4, r3, r1
 800085a:	428c      	cmp	r4, r1
 800085c:	4189      	sbcs	r1, r1
 800085e:	4440      	add	r0, r8
 8000860:	4249      	negs	r1, r1
 8000862:	1847      	adds	r7, r0, r1
 8000864:	e6dd      	b.n	8000622 <__aeabi_dadd+0x3ee>
 8000866:	0023      	movs	r3, r4
 8000868:	433b      	orrs	r3, r7
 800086a:	d100      	bne.n	800086e <__aeabi_dadd+0x63a>
 800086c:	e6ad      	b.n	80005ca <__aeabi_dadd+0x396>
 800086e:	e606      	b.n	800047e <__aeabi_dadd+0x24a>
 8000870:	0744      	lsls	r4, r0, #29
 8000872:	4323      	orrs	r3, r4
 8000874:	2480      	movs	r4, #128	; 0x80
 8000876:	08c0      	lsrs	r0, r0, #3
 8000878:	0324      	lsls	r4, r4, #12
 800087a:	4220      	tst	r0, r4
 800087c:	d008      	beq.n	8000890 <__aeabi_dadd+0x65c>
 800087e:	4642      	mov	r2, r8
 8000880:	08d6      	lsrs	r6, r2, #3
 8000882:	4226      	tst	r6, r4
 8000884:	d104      	bne.n	8000890 <__aeabi_dadd+0x65c>
 8000886:	4655      	mov	r5, sl
 8000888:	0030      	movs	r0, r6
 800088a:	08cb      	lsrs	r3, r1, #3
 800088c:	0751      	lsls	r1, r2, #29
 800088e:	430b      	orrs	r3, r1
 8000890:	0f5a      	lsrs	r2, r3, #29
 8000892:	00db      	lsls	r3, r3, #3
 8000894:	08db      	lsrs	r3, r3, #3
 8000896:	0752      	lsls	r2, r2, #29
 8000898:	4313      	orrs	r3, r2
 800089a:	e619      	b.n	80004d0 <__aeabi_dadd+0x29c>
 800089c:	2300      	movs	r3, #0
 800089e:	4a01      	ldr	r2, [pc, #4]	; (80008a4 <__aeabi_dadd+0x670>)
 80008a0:	001f      	movs	r7, r3
 80008a2:	e55e      	b.n	8000362 <__aeabi_dadd+0x12e>
 80008a4:	000007ff 	.word	0x000007ff
 80008a8:	ff7fffff 	.word	0xff7fffff

080008ac <__aeabi_ddiv>:
 80008ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ae:	4657      	mov	r7, sl
 80008b0:	464e      	mov	r6, r9
 80008b2:	4645      	mov	r5, r8
 80008b4:	46de      	mov	lr, fp
 80008b6:	b5e0      	push	{r5, r6, r7, lr}
 80008b8:	4681      	mov	r9, r0
 80008ba:	0005      	movs	r5, r0
 80008bc:	030c      	lsls	r4, r1, #12
 80008be:	0048      	lsls	r0, r1, #1
 80008c0:	4692      	mov	sl, r2
 80008c2:	001f      	movs	r7, r3
 80008c4:	b085      	sub	sp, #20
 80008c6:	0b24      	lsrs	r4, r4, #12
 80008c8:	0d40      	lsrs	r0, r0, #21
 80008ca:	0fce      	lsrs	r6, r1, #31
 80008cc:	2800      	cmp	r0, #0
 80008ce:	d100      	bne.n	80008d2 <__aeabi_ddiv+0x26>
 80008d0:	e156      	b.n	8000b80 <__aeabi_ddiv+0x2d4>
 80008d2:	4bd4      	ldr	r3, [pc, #848]	; (8000c24 <__aeabi_ddiv+0x378>)
 80008d4:	4298      	cmp	r0, r3
 80008d6:	d100      	bne.n	80008da <__aeabi_ddiv+0x2e>
 80008d8:	e172      	b.n	8000bc0 <__aeabi_ddiv+0x314>
 80008da:	0f6b      	lsrs	r3, r5, #29
 80008dc:	00e4      	lsls	r4, r4, #3
 80008de:	431c      	orrs	r4, r3
 80008e0:	2380      	movs	r3, #128	; 0x80
 80008e2:	041b      	lsls	r3, r3, #16
 80008e4:	4323      	orrs	r3, r4
 80008e6:	4698      	mov	r8, r3
 80008e8:	4bcf      	ldr	r3, [pc, #828]	; (8000c28 <__aeabi_ddiv+0x37c>)
 80008ea:	00ed      	lsls	r5, r5, #3
 80008ec:	469b      	mov	fp, r3
 80008ee:	2300      	movs	r3, #0
 80008f0:	4699      	mov	r9, r3
 80008f2:	4483      	add	fp, r0
 80008f4:	9300      	str	r3, [sp, #0]
 80008f6:	033c      	lsls	r4, r7, #12
 80008f8:	007b      	lsls	r3, r7, #1
 80008fa:	4650      	mov	r0, sl
 80008fc:	0b24      	lsrs	r4, r4, #12
 80008fe:	0d5b      	lsrs	r3, r3, #21
 8000900:	0fff      	lsrs	r7, r7, #31
 8000902:	2b00      	cmp	r3, #0
 8000904:	d100      	bne.n	8000908 <__aeabi_ddiv+0x5c>
 8000906:	e11f      	b.n	8000b48 <__aeabi_ddiv+0x29c>
 8000908:	4ac6      	ldr	r2, [pc, #792]	; (8000c24 <__aeabi_ddiv+0x378>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d100      	bne.n	8000910 <__aeabi_ddiv+0x64>
 800090e:	e162      	b.n	8000bd6 <__aeabi_ddiv+0x32a>
 8000910:	49c5      	ldr	r1, [pc, #788]	; (8000c28 <__aeabi_ddiv+0x37c>)
 8000912:	0f42      	lsrs	r2, r0, #29
 8000914:	468c      	mov	ip, r1
 8000916:	00e4      	lsls	r4, r4, #3
 8000918:	4659      	mov	r1, fp
 800091a:	4314      	orrs	r4, r2
 800091c:	2280      	movs	r2, #128	; 0x80
 800091e:	4463      	add	r3, ip
 8000920:	0412      	lsls	r2, r2, #16
 8000922:	1acb      	subs	r3, r1, r3
 8000924:	4314      	orrs	r4, r2
 8000926:	469b      	mov	fp, r3
 8000928:	00c2      	lsls	r2, r0, #3
 800092a:	2000      	movs	r0, #0
 800092c:	0033      	movs	r3, r6
 800092e:	407b      	eors	r3, r7
 8000930:	469a      	mov	sl, r3
 8000932:	464b      	mov	r3, r9
 8000934:	2b0f      	cmp	r3, #15
 8000936:	d827      	bhi.n	8000988 <__aeabi_ddiv+0xdc>
 8000938:	49bc      	ldr	r1, [pc, #752]	; (8000c2c <__aeabi_ddiv+0x380>)
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	58cb      	ldr	r3, [r1, r3]
 800093e:	469f      	mov	pc, r3
 8000940:	46b2      	mov	sl, r6
 8000942:	9b00      	ldr	r3, [sp, #0]
 8000944:	2b02      	cmp	r3, #2
 8000946:	d016      	beq.n	8000976 <__aeabi_ddiv+0xca>
 8000948:	2b03      	cmp	r3, #3
 800094a:	d100      	bne.n	800094e <__aeabi_ddiv+0xa2>
 800094c:	e28e      	b.n	8000e6c <__aeabi_ddiv+0x5c0>
 800094e:	2b01      	cmp	r3, #1
 8000950:	d000      	beq.n	8000954 <__aeabi_ddiv+0xa8>
 8000952:	e0d9      	b.n	8000b08 <__aeabi_ddiv+0x25c>
 8000954:	2300      	movs	r3, #0
 8000956:	2400      	movs	r4, #0
 8000958:	2500      	movs	r5, #0
 800095a:	4652      	mov	r2, sl
 800095c:	051b      	lsls	r3, r3, #20
 800095e:	4323      	orrs	r3, r4
 8000960:	07d2      	lsls	r2, r2, #31
 8000962:	4313      	orrs	r3, r2
 8000964:	0028      	movs	r0, r5
 8000966:	0019      	movs	r1, r3
 8000968:	b005      	add	sp, #20
 800096a:	bcf0      	pop	{r4, r5, r6, r7}
 800096c:	46bb      	mov	fp, r7
 800096e:	46b2      	mov	sl, r6
 8000970:	46a9      	mov	r9, r5
 8000972:	46a0      	mov	r8, r4
 8000974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000976:	2400      	movs	r4, #0
 8000978:	2500      	movs	r5, #0
 800097a:	4baa      	ldr	r3, [pc, #680]	; (8000c24 <__aeabi_ddiv+0x378>)
 800097c:	e7ed      	b.n	800095a <__aeabi_ddiv+0xae>
 800097e:	46ba      	mov	sl, r7
 8000980:	46a0      	mov	r8, r4
 8000982:	0015      	movs	r5, r2
 8000984:	9000      	str	r0, [sp, #0]
 8000986:	e7dc      	b.n	8000942 <__aeabi_ddiv+0x96>
 8000988:	4544      	cmp	r4, r8
 800098a:	d200      	bcs.n	800098e <__aeabi_ddiv+0xe2>
 800098c:	e1c7      	b.n	8000d1e <__aeabi_ddiv+0x472>
 800098e:	d100      	bne.n	8000992 <__aeabi_ddiv+0xe6>
 8000990:	e1c2      	b.n	8000d18 <__aeabi_ddiv+0x46c>
 8000992:	2301      	movs	r3, #1
 8000994:	425b      	negs	r3, r3
 8000996:	469c      	mov	ip, r3
 8000998:	002e      	movs	r6, r5
 800099a:	4640      	mov	r0, r8
 800099c:	2500      	movs	r5, #0
 800099e:	44e3      	add	fp, ip
 80009a0:	0223      	lsls	r3, r4, #8
 80009a2:	0e14      	lsrs	r4, r2, #24
 80009a4:	431c      	orrs	r4, r3
 80009a6:	0c1b      	lsrs	r3, r3, #16
 80009a8:	4699      	mov	r9, r3
 80009aa:	0423      	lsls	r3, r4, #16
 80009ac:	0c1f      	lsrs	r7, r3, #16
 80009ae:	0212      	lsls	r2, r2, #8
 80009b0:	4649      	mov	r1, r9
 80009b2:	9200      	str	r2, [sp, #0]
 80009b4:	9701      	str	r7, [sp, #4]
 80009b6:	f7ff fc37 	bl	8000228 <__aeabi_uidivmod>
 80009ba:	0002      	movs	r2, r0
 80009bc:	437a      	muls	r2, r7
 80009be:	040b      	lsls	r3, r1, #16
 80009c0:	0c31      	lsrs	r1, r6, #16
 80009c2:	4680      	mov	r8, r0
 80009c4:	4319      	orrs	r1, r3
 80009c6:	428a      	cmp	r2, r1
 80009c8:	d907      	bls.n	80009da <__aeabi_ddiv+0x12e>
 80009ca:	2301      	movs	r3, #1
 80009cc:	425b      	negs	r3, r3
 80009ce:	469c      	mov	ip, r3
 80009d0:	1909      	adds	r1, r1, r4
 80009d2:	44e0      	add	r8, ip
 80009d4:	428c      	cmp	r4, r1
 80009d6:	d800      	bhi.n	80009da <__aeabi_ddiv+0x12e>
 80009d8:	e207      	b.n	8000dea <__aeabi_ddiv+0x53e>
 80009da:	1a88      	subs	r0, r1, r2
 80009dc:	4649      	mov	r1, r9
 80009de:	f7ff fc23 	bl	8000228 <__aeabi_uidivmod>
 80009e2:	0409      	lsls	r1, r1, #16
 80009e4:	468c      	mov	ip, r1
 80009e6:	0431      	lsls	r1, r6, #16
 80009e8:	4666      	mov	r6, ip
 80009ea:	9a01      	ldr	r2, [sp, #4]
 80009ec:	0c09      	lsrs	r1, r1, #16
 80009ee:	4342      	muls	r2, r0
 80009f0:	0003      	movs	r3, r0
 80009f2:	4331      	orrs	r1, r6
 80009f4:	428a      	cmp	r2, r1
 80009f6:	d904      	bls.n	8000a02 <__aeabi_ddiv+0x156>
 80009f8:	1909      	adds	r1, r1, r4
 80009fa:	3b01      	subs	r3, #1
 80009fc:	428c      	cmp	r4, r1
 80009fe:	d800      	bhi.n	8000a02 <__aeabi_ddiv+0x156>
 8000a00:	e1ed      	b.n	8000dde <__aeabi_ddiv+0x532>
 8000a02:	1a88      	subs	r0, r1, r2
 8000a04:	4642      	mov	r2, r8
 8000a06:	0412      	lsls	r2, r2, #16
 8000a08:	431a      	orrs	r2, r3
 8000a0a:	4690      	mov	r8, r2
 8000a0c:	4641      	mov	r1, r8
 8000a0e:	9b00      	ldr	r3, [sp, #0]
 8000a10:	040e      	lsls	r6, r1, #16
 8000a12:	0c1b      	lsrs	r3, r3, #16
 8000a14:	001f      	movs	r7, r3
 8000a16:	9302      	str	r3, [sp, #8]
 8000a18:	9b00      	ldr	r3, [sp, #0]
 8000a1a:	0c36      	lsrs	r6, r6, #16
 8000a1c:	041b      	lsls	r3, r3, #16
 8000a1e:	0c19      	lsrs	r1, r3, #16
 8000a20:	000b      	movs	r3, r1
 8000a22:	4373      	muls	r3, r6
 8000a24:	0c12      	lsrs	r2, r2, #16
 8000a26:	437e      	muls	r6, r7
 8000a28:	9103      	str	r1, [sp, #12]
 8000a2a:	4351      	muls	r1, r2
 8000a2c:	437a      	muls	r2, r7
 8000a2e:	0c1f      	lsrs	r7, r3, #16
 8000a30:	46bc      	mov	ip, r7
 8000a32:	1876      	adds	r6, r6, r1
 8000a34:	4466      	add	r6, ip
 8000a36:	42b1      	cmp	r1, r6
 8000a38:	d903      	bls.n	8000a42 <__aeabi_ddiv+0x196>
 8000a3a:	2180      	movs	r1, #128	; 0x80
 8000a3c:	0249      	lsls	r1, r1, #9
 8000a3e:	468c      	mov	ip, r1
 8000a40:	4462      	add	r2, ip
 8000a42:	0c31      	lsrs	r1, r6, #16
 8000a44:	188a      	adds	r2, r1, r2
 8000a46:	0431      	lsls	r1, r6, #16
 8000a48:	041e      	lsls	r6, r3, #16
 8000a4a:	0c36      	lsrs	r6, r6, #16
 8000a4c:	198e      	adds	r6, r1, r6
 8000a4e:	4290      	cmp	r0, r2
 8000a50:	d302      	bcc.n	8000a58 <__aeabi_ddiv+0x1ac>
 8000a52:	d112      	bne.n	8000a7a <__aeabi_ddiv+0x1ce>
 8000a54:	42b5      	cmp	r5, r6
 8000a56:	d210      	bcs.n	8000a7a <__aeabi_ddiv+0x1ce>
 8000a58:	4643      	mov	r3, r8
 8000a5a:	1e59      	subs	r1, r3, #1
 8000a5c:	9b00      	ldr	r3, [sp, #0]
 8000a5e:	469c      	mov	ip, r3
 8000a60:	4465      	add	r5, ip
 8000a62:	001f      	movs	r7, r3
 8000a64:	429d      	cmp	r5, r3
 8000a66:	419b      	sbcs	r3, r3
 8000a68:	425b      	negs	r3, r3
 8000a6a:	191b      	adds	r3, r3, r4
 8000a6c:	18c0      	adds	r0, r0, r3
 8000a6e:	4284      	cmp	r4, r0
 8000a70:	d200      	bcs.n	8000a74 <__aeabi_ddiv+0x1c8>
 8000a72:	e1a0      	b.n	8000db6 <__aeabi_ddiv+0x50a>
 8000a74:	d100      	bne.n	8000a78 <__aeabi_ddiv+0x1cc>
 8000a76:	e19b      	b.n	8000db0 <__aeabi_ddiv+0x504>
 8000a78:	4688      	mov	r8, r1
 8000a7a:	1bae      	subs	r6, r5, r6
 8000a7c:	42b5      	cmp	r5, r6
 8000a7e:	41ad      	sbcs	r5, r5
 8000a80:	1a80      	subs	r0, r0, r2
 8000a82:	426d      	negs	r5, r5
 8000a84:	1b40      	subs	r0, r0, r5
 8000a86:	4284      	cmp	r4, r0
 8000a88:	d100      	bne.n	8000a8c <__aeabi_ddiv+0x1e0>
 8000a8a:	e1d5      	b.n	8000e38 <__aeabi_ddiv+0x58c>
 8000a8c:	4649      	mov	r1, r9
 8000a8e:	f7ff fbcb 	bl	8000228 <__aeabi_uidivmod>
 8000a92:	9a01      	ldr	r2, [sp, #4]
 8000a94:	040b      	lsls	r3, r1, #16
 8000a96:	4342      	muls	r2, r0
 8000a98:	0c31      	lsrs	r1, r6, #16
 8000a9a:	0005      	movs	r5, r0
 8000a9c:	4319      	orrs	r1, r3
 8000a9e:	428a      	cmp	r2, r1
 8000aa0:	d900      	bls.n	8000aa4 <__aeabi_ddiv+0x1f8>
 8000aa2:	e16c      	b.n	8000d7e <__aeabi_ddiv+0x4d2>
 8000aa4:	1a88      	subs	r0, r1, r2
 8000aa6:	4649      	mov	r1, r9
 8000aa8:	f7ff fbbe 	bl	8000228 <__aeabi_uidivmod>
 8000aac:	9a01      	ldr	r2, [sp, #4]
 8000aae:	0436      	lsls	r6, r6, #16
 8000ab0:	4342      	muls	r2, r0
 8000ab2:	0409      	lsls	r1, r1, #16
 8000ab4:	0c36      	lsrs	r6, r6, #16
 8000ab6:	0003      	movs	r3, r0
 8000ab8:	430e      	orrs	r6, r1
 8000aba:	42b2      	cmp	r2, r6
 8000abc:	d900      	bls.n	8000ac0 <__aeabi_ddiv+0x214>
 8000abe:	e153      	b.n	8000d68 <__aeabi_ddiv+0x4bc>
 8000ac0:	9803      	ldr	r0, [sp, #12]
 8000ac2:	1ab6      	subs	r6, r6, r2
 8000ac4:	0002      	movs	r2, r0
 8000ac6:	042d      	lsls	r5, r5, #16
 8000ac8:	431d      	orrs	r5, r3
 8000aca:	9f02      	ldr	r7, [sp, #8]
 8000acc:	042b      	lsls	r3, r5, #16
 8000ace:	0c1b      	lsrs	r3, r3, #16
 8000ad0:	435a      	muls	r2, r3
 8000ad2:	437b      	muls	r3, r7
 8000ad4:	469c      	mov	ip, r3
 8000ad6:	0c29      	lsrs	r1, r5, #16
 8000ad8:	4348      	muls	r0, r1
 8000ada:	0c13      	lsrs	r3, r2, #16
 8000adc:	4484      	add	ip, r0
 8000ade:	4463      	add	r3, ip
 8000ae0:	4379      	muls	r1, r7
 8000ae2:	4298      	cmp	r0, r3
 8000ae4:	d903      	bls.n	8000aee <__aeabi_ddiv+0x242>
 8000ae6:	2080      	movs	r0, #128	; 0x80
 8000ae8:	0240      	lsls	r0, r0, #9
 8000aea:	4684      	mov	ip, r0
 8000aec:	4461      	add	r1, ip
 8000aee:	0c18      	lsrs	r0, r3, #16
 8000af0:	0412      	lsls	r2, r2, #16
 8000af2:	041b      	lsls	r3, r3, #16
 8000af4:	0c12      	lsrs	r2, r2, #16
 8000af6:	1841      	adds	r1, r0, r1
 8000af8:	189b      	adds	r3, r3, r2
 8000afa:	428e      	cmp	r6, r1
 8000afc:	d200      	bcs.n	8000b00 <__aeabi_ddiv+0x254>
 8000afe:	e0ff      	b.n	8000d00 <__aeabi_ddiv+0x454>
 8000b00:	d100      	bne.n	8000b04 <__aeabi_ddiv+0x258>
 8000b02:	e0fa      	b.n	8000cfa <__aeabi_ddiv+0x44e>
 8000b04:	2301      	movs	r3, #1
 8000b06:	431d      	orrs	r5, r3
 8000b08:	4a49      	ldr	r2, [pc, #292]	; (8000c30 <__aeabi_ddiv+0x384>)
 8000b0a:	445a      	add	r2, fp
 8000b0c:	2a00      	cmp	r2, #0
 8000b0e:	dc00      	bgt.n	8000b12 <__aeabi_ddiv+0x266>
 8000b10:	e0aa      	b.n	8000c68 <__aeabi_ddiv+0x3bc>
 8000b12:	076b      	lsls	r3, r5, #29
 8000b14:	d000      	beq.n	8000b18 <__aeabi_ddiv+0x26c>
 8000b16:	e13d      	b.n	8000d94 <__aeabi_ddiv+0x4e8>
 8000b18:	08ed      	lsrs	r5, r5, #3
 8000b1a:	4643      	mov	r3, r8
 8000b1c:	01db      	lsls	r3, r3, #7
 8000b1e:	d506      	bpl.n	8000b2e <__aeabi_ddiv+0x282>
 8000b20:	4642      	mov	r2, r8
 8000b22:	4b44      	ldr	r3, [pc, #272]	; (8000c34 <__aeabi_ddiv+0x388>)
 8000b24:	401a      	ands	r2, r3
 8000b26:	4690      	mov	r8, r2
 8000b28:	2280      	movs	r2, #128	; 0x80
 8000b2a:	00d2      	lsls	r2, r2, #3
 8000b2c:	445a      	add	r2, fp
 8000b2e:	4b42      	ldr	r3, [pc, #264]	; (8000c38 <__aeabi_ddiv+0x38c>)
 8000b30:	429a      	cmp	r2, r3
 8000b32:	dd00      	ble.n	8000b36 <__aeabi_ddiv+0x28a>
 8000b34:	e71f      	b.n	8000976 <__aeabi_ddiv+0xca>
 8000b36:	4643      	mov	r3, r8
 8000b38:	075b      	lsls	r3, r3, #29
 8000b3a:	431d      	orrs	r5, r3
 8000b3c:	4643      	mov	r3, r8
 8000b3e:	0552      	lsls	r2, r2, #21
 8000b40:	025c      	lsls	r4, r3, #9
 8000b42:	0b24      	lsrs	r4, r4, #12
 8000b44:	0d53      	lsrs	r3, r2, #21
 8000b46:	e708      	b.n	800095a <__aeabi_ddiv+0xae>
 8000b48:	4652      	mov	r2, sl
 8000b4a:	4322      	orrs	r2, r4
 8000b4c:	d100      	bne.n	8000b50 <__aeabi_ddiv+0x2a4>
 8000b4e:	e07b      	b.n	8000c48 <__aeabi_ddiv+0x39c>
 8000b50:	2c00      	cmp	r4, #0
 8000b52:	d100      	bne.n	8000b56 <__aeabi_ddiv+0x2aa>
 8000b54:	e0fa      	b.n	8000d4c <__aeabi_ddiv+0x4a0>
 8000b56:	0020      	movs	r0, r4
 8000b58:	f001 f89c 	bl	8001c94 <__clzsi2>
 8000b5c:	0002      	movs	r2, r0
 8000b5e:	3a0b      	subs	r2, #11
 8000b60:	231d      	movs	r3, #29
 8000b62:	0001      	movs	r1, r0
 8000b64:	1a9b      	subs	r3, r3, r2
 8000b66:	4652      	mov	r2, sl
 8000b68:	3908      	subs	r1, #8
 8000b6a:	40da      	lsrs	r2, r3
 8000b6c:	408c      	lsls	r4, r1
 8000b6e:	4314      	orrs	r4, r2
 8000b70:	4652      	mov	r2, sl
 8000b72:	408a      	lsls	r2, r1
 8000b74:	4b31      	ldr	r3, [pc, #196]	; (8000c3c <__aeabi_ddiv+0x390>)
 8000b76:	4458      	add	r0, fp
 8000b78:	469b      	mov	fp, r3
 8000b7a:	4483      	add	fp, r0
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	e6d5      	b.n	800092c <__aeabi_ddiv+0x80>
 8000b80:	464b      	mov	r3, r9
 8000b82:	4323      	orrs	r3, r4
 8000b84:	4698      	mov	r8, r3
 8000b86:	d044      	beq.n	8000c12 <__aeabi_ddiv+0x366>
 8000b88:	2c00      	cmp	r4, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_ddiv+0x2e2>
 8000b8c:	e0ce      	b.n	8000d2c <__aeabi_ddiv+0x480>
 8000b8e:	0020      	movs	r0, r4
 8000b90:	f001 f880 	bl	8001c94 <__clzsi2>
 8000b94:	0001      	movs	r1, r0
 8000b96:	0002      	movs	r2, r0
 8000b98:	390b      	subs	r1, #11
 8000b9a:	231d      	movs	r3, #29
 8000b9c:	1a5b      	subs	r3, r3, r1
 8000b9e:	4649      	mov	r1, r9
 8000ba0:	0010      	movs	r0, r2
 8000ba2:	40d9      	lsrs	r1, r3
 8000ba4:	3808      	subs	r0, #8
 8000ba6:	4084      	lsls	r4, r0
 8000ba8:	000b      	movs	r3, r1
 8000baa:	464d      	mov	r5, r9
 8000bac:	4323      	orrs	r3, r4
 8000bae:	4698      	mov	r8, r3
 8000bb0:	4085      	lsls	r5, r0
 8000bb2:	4823      	ldr	r0, [pc, #140]	; (8000c40 <__aeabi_ddiv+0x394>)
 8000bb4:	1a83      	subs	r3, r0, r2
 8000bb6:	469b      	mov	fp, r3
 8000bb8:	2300      	movs	r3, #0
 8000bba:	4699      	mov	r9, r3
 8000bbc:	9300      	str	r3, [sp, #0]
 8000bbe:	e69a      	b.n	80008f6 <__aeabi_ddiv+0x4a>
 8000bc0:	464b      	mov	r3, r9
 8000bc2:	4323      	orrs	r3, r4
 8000bc4:	4698      	mov	r8, r3
 8000bc6:	d11d      	bne.n	8000c04 <__aeabi_ddiv+0x358>
 8000bc8:	2308      	movs	r3, #8
 8000bca:	4699      	mov	r9, r3
 8000bcc:	3b06      	subs	r3, #6
 8000bce:	2500      	movs	r5, #0
 8000bd0:	4683      	mov	fp, r0
 8000bd2:	9300      	str	r3, [sp, #0]
 8000bd4:	e68f      	b.n	80008f6 <__aeabi_ddiv+0x4a>
 8000bd6:	4652      	mov	r2, sl
 8000bd8:	4322      	orrs	r2, r4
 8000bda:	d109      	bne.n	8000bf0 <__aeabi_ddiv+0x344>
 8000bdc:	2302      	movs	r3, #2
 8000bde:	4649      	mov	r1, r9
 8000be0:	4319      	orrs	r1, r3
 8000be2:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <__aeabi_ddiv+0x398>)
 8000be4:	4689      	mov	r9, r1
 8000be6:	469c      	mov	ip, r3
 8000be8:	2400      	movs	r4, #0
 8000bea:	2002      	movs	r0, #2
 8000bec:	44e3      	add	fp, ip
 8000bee:	e69d      	b.n	800092c <__aeabi_ddiv+0x80>
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	464a      	mov	r2, r9
 8000bf4:	431a      	orrs	r2, r3
 8000bf6:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <__aeabi_ddiv+0x398>)
 8000bf8:	4691      	mov	r9, r2
 8000bfa:	469c      	mov	ip, r3
 8000bfc:	4652      	mov	r2, sl
 8000bfe:	2003      	movs	r0, #3
 8000c00:	44e3      	add	fp, ip
 8000c02:	e693      	b.n	800092c <__aeabi_ddiv+0x80>
 8000c04:	230c      	movs	r3, #12
 8000c06:	4699      	mov	r9, r3
 8000c08:	3b09      	subs	r3, #9
 8000c0a:	46a0      	mov	r8, r4
 8000c0c:	4683      	mov	fp, r0
 8000c0e:	9300      	str	r3, [sp, #0]
 8000c10:	e671      	b.n	80008f6 <__aeabi_ddiv+0x4a>
 8000c12:	2304      	movs	r3, #4
 8000c14:	4699      	mov	r9, r3
 8000c16:	2300      	movs	r3, #0
 8000c18:	469b      	mov	fp, r3
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	2500      	movs	r5, #0
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	e669      	b.n	80008f6 <__aeabi_ddiv+0x4a>
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	000007ff 	.word	0x000007ff
 8000c28:	fffffc01 	.word	0xfffffc01
 8000c2c:	08007e08 	.word	0x08007e08
 8000c30:	000003ff 	.word	0x000003ff
 8000c34:	feffffff 	.word	0xfeffffff
 8000c38:	000007fe 	.word	0x000007fe
 8000c3c:	000003f3 	.word	0x000003f3
 8000c40:	fffffc0d 	.word	0xfffffc0d
 8000c44:	fffff801 	.word	0xfffff801
 8000c48:	4649      	mov	r1, r9
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	4319      	orrs	r1, r3
 8000c4e:	4689      	mov	r9, r1
 8000c50:	2400      	movs	r4, #0
 8000c52:	2001      	movs	r0, #1
 8000c54:	e66a      	b.n	800092c <__aeabi_ddiv+0x80>
 8000c56:	2300      	movs	r3, #0
 8000c58:	2480      	movs	r4, #128	; 0x80
 8000c5a:	469a      	mov	sl, r3
 8000c5c:	2500      	movs	r5, #0
 8000c5e:	4b8a      	ldr	r3, [pc, #552]	; (8000e88 <__aeabi_ddiv+0x5dc>)
 8000c60:	0324      	lsls	r4, r4, #12
 8000c62:	e67a      	b.n	800095a <__aeabi_ddiv+0xae>
 8000c64:	2501      	movs	r5, #1
 8000c66:	426d      	negs	r5, r5
 8000c68:	2301      	movs	r3, #1
 8000c6a:	1a9b      	subs	r3, r3, r2
 8000c6c:	2b38      	cmp	r3, #56	; 0x38
 8000c6e:	dd00      	ble.n	8000c72 <__aeabi_ddiv+0x3c6>
 8000c70:	e670      	b.n	8000954 <__aeabi_ddiv+0xa8>
 8000c72:	2b1f      	cmp	r3, #31
 8000c74:	dc00      	bgt.n	8000c78 <__aeabi_ddiv+0x3cc>
 8000c76:	e0bf      	b.n	8000df8 <__aeabi_ddiv+0x54c>
 8000c78:	211f      	movs	r1, #31
 8000c7a:	4249      	negs	r1, r1
 8000c7c:	1a8a      	subs	r2, r1, r2
 8000c7e:	4641      	mov	r1, r8
 8000c80:	40d1      	lsrs	r1, r2
 8000c82:	000a      	movs	r2, r1
 8000c84:	2b20      	cmp	r3, #32
 8000c86:	d004      	beq.n	8000c92 <__aeabi_ddiv+0x3e6>
 8000c88:	4641      	mov	r1, r8
 8000c8a:	4b80      	ldr	r3, [pc, #512]	; (8000e8c <__aeabi_ddiv+0x5e0>)
 8000c8c:	445b      	add	r3, fp
 8000c8e:	4099      	lsls	r1, r3
 8000c90:	430d      	orrs	r5, r1
 8000c92:	1e6b      	subs	r3, r5, #1
 8000c94:	419d      	sbcs	r5, r3
 8000c96:	2307      	movs	r3, #7
 8000c98:	432a      	orrs	r2, r5
 8000c9a:	001d      	movs	r5, r3
 8000c9c:	2400      	movs	r4, #0
 8000c9e:	4015      	ands	r5, r2
 8000ca0:	4213      	tst	r3, r2
 8000ca2:	d100      	bne.n	8000ca6 <__aeabi_ddiv+0x3fa>
 8000ca4:	e0d4      	b.n	8000e50 <__aeabi_ddiv+0x5a4>
 8000ca6:	210f      	movs	r1, #15
 8000ca8:	2300      	movs	r3, #0
 8000caa:	4011      	ands	r1, r2
 8000cac:	2904      	cmp	r1, #4
 8000cae:	d100      	bne.n	8000cb2 <__aeabi_ddiv+0x406>
 8000cb0:	e0cb      	b.n	8000e4a <__aeabi_ddiv+0x59e>
 8000cb2:	1d11      	adds	r1, r2, #4
 8000cb4:	4291      	cmp	r1, r2
 8000cb6:	4192      	sbcs	r2, r2
 8000cb8:	4252      	negs	r2, r2
 8000cba:	189b      	adds	r3, r3, r2
 8000cbc:	000a      	movs	r2, r1
 8000cbe:	0219      	lsls	r1, r3, #8
 8000cc0:	d400      	bmi.n	8000cc4 <__aeabi_ddiv+0x418>
 8000cc2:	e0c2      	b.n	8000e4a <__aeabi_ddiv+0x59e>
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	2400      	movs	r4, #0
 8000cc8:	2500      	movs	r5, #0
 8000cca:	e646      	b.n	800095a <__aeabi_ddiv+0xae>
 8000ccc:	2380      	movs	r3, #128	; 0x80
 8000cce:	4641      	mov	r1, r8
 8000cd0:	031b      	lsls	r3, r3, #12
 8000cd2:	4219      	tst	r1, r3
 8000cd4:	d008      	beq.n	8000ce8 <__aeabi_ddiv+0x43c>
 8000cd6:	421c      	tst	r4, r3
 8000cd8:	d106      	bne.n	8000ce8 <__aeabi_ddiv+0x43c>
 8000cda:	431c      	orrs	r4, r3
 8000cdc:	0324      	lsls	r4, r4, #12
 8000cde:	46ba      	mov	sl, r7
 8000ce0:	0015      	movs	r5, r2
 8000ce2:	4b69      	ldr	r3, [pc, #420]	; (8000e88 <__aeabi_ddiv+0x5dc>)
 8000ce4:	0b24      	lsrs	r4, r4, #12
 8000ce6:	e638      	b.n	800095a <__aeabi_ddiv+0xae>
 8000ce8:	2480      	movs	r4, #128	; 0x80
 8000cea:	4643      	mov	r3, r8
 8000cec:	0324      	lsls	r4, r4, #12
 8000cee:	431c      	orrs	r4, r3
 8000cf0:	0324      	lsls	r4, r4, #12
 8000cf2:	46b2      	mov	sl, r6
 8000cf4:	4b64      	ldr	r3, [pc, #400]	; (8000e88 <__aeabi_ddiv+0x5dc>)
 8000cf6:	0b24      	lsrs	r4, r4, #12
 8000cf8:	e62f      	b.n	800095a <__aeabi_ddiv+0xae>
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d100      	bne.n	8000d00 <__aeabi_ddiv+0x454>
 8000cfe:	e703      	b.n	8000b08 <__aeabi_ddiv+0x25c>
 8000d00:	19a6      	adds	r6, r4, r6
 8000d02:	1e68      	subs	r0, r5, #1
 8000d04:	42a6      	cmp	r6, r4
 8000d06:	d200      	bcs.n	8000d0a <__aeabi_ddiv+0x45e>
 8000d08:	e08d      	b.n	8000e26 <__aeabi_ddiv+0x57a>
 8000d0a:	428e      	cmp	r6, r1
 8000d0c:	d200      	bcs.n	8000d10 <__aeabi_ddiv+0x464>
 8000d0e:	e0a3      	b.n	8000e58 <__aeabi_ddiv+0x5ac>
 8000d10:	d100      	bne.n	8000d14 <__aeabi_ddiv+0x468>
 8000d12:	e0b3      	b.n	8000e7c <__aeabi_ddiv+0x5d0>
 8000d14:	0005      	movs	r5, r0
 8000d16:	e6f5      	b.n	8000b04 <__aeabi_ddiv+0x258>
 8000d18:	42aa      	cmp	r2, r5
 8000d1a:	d900      	bls.n	8000d1e <__aeabi_ddiv+0x472>
 8000d1c:	e639      	b.n	8000992 <__aeabi_ddiv+0xe6>
 8000d1e:	4643      	mov	r3, r8
 8000d20:	07de      	lsls	r6, r3, #31
 8000d22:	0858      	lsrs	r0, r3, #1
 8000d24:	086b      	lsrs	r3, r5, #1
 8000d26:	431e      	orrs	r6, r3
 8000d28:	07ed      	lsls	r5, r5, #31
 8000d2a:	e639      	b.n	80009a0 <__aeabi_ddiv+0xf4>
 8000d2c:	4648      	mov	r0, r9
 8000d2e:	f000 ffb1 	bl	8001c94 <__clzsi2>
 8000d32:	0001      	movs	r1, r0
 8000d34:	0002      	movs	r2, r0
 8000d36:	3115      	adds	r1, #21
 8000d38:	3220      	adds	r2, #32
 8000d3a:	291c      	cmp	r1, #28
 8000d3c:	dc00      	bgt.n	8000d40 <__aeabi_ddiv+0x494>
 8000d3e:	e72c      	b.n	8000b9a <__aeabi_ddiv+0x2ee>
 8000d40:	464b      	mov	r3, r9
 8000d42:	3808      	subs	r0, #8
 8000d44:	4083      	lsls	r3, r0
 8000d46:	2500      	movs	r5, #0
 8000d48:	4698      	mov	r8, r3
 8000d4a:	e732      	b.n	8000bb2 <__aeabi_ddiv+0x306>
 8000d4c:	f000 ffa2 	bl	8001c94 <__clzsi2>
 8000d50:	0003      	movs	r3, r0
 8000d52:	001a      	movs	r2, r3
 8000d54:	3215      	adds	r2, #21
 8000d56:	3020      	adds	r0, #32
 8000d58:	2a1c      	cmp	r2, #28
 8000d5a:	dc00      	bgt.n	8000d5e <__aeabi_ddiv+0x4b2>
 8000d5c:	e700      	b.n	8000b60 <__aeabi_ddiv+0x2b4>
 8000d5e:	4654      	mov	r4, sl
 8000d60:	3b08      	subs	r3, #8
 8000d62:	2200      	movs	r2, #0
 8000d64:	409c      	lsls	r4, r3
 8000d66:	e705      	b.n	8000b74 <__aeabi_ddiv+0x2c8>
 8000d68:	1936      	adds	r6, r6, r4
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	42b4      	cmp	r4, r6
 8000d6e:	d900      	bls.n	8000d72 <__aeabi_ddiv+0x4c6>
 8000d70:	e6a6      	b.n	8000ac0 <__aeabi_ddiv+0x214>
 8000d72:	42b2      	cmp	r2, r6
 8000d74:	d800      	bhi.n	8000d78 <__aeabi_ddiv+0x4cc>
 8000d76:	e6a3      	b.n	8000ac0 <__aeabi_ddiv+0x214>
 8000d78:	1e83      	subs	r3, r0, #2
 8000d7a:	1936      	adds	r6, r6, r4
 8000d7c:	e6a0      	b.n	8000ac0 <__aeabi_ddiv+0x214>
 8000d7e:	1909      	adds	r1, r1, r4
 8000d80:	3d01      	subs	r5, #1
 8000d82:	428c      	cmp	r4, r1
 8000d84:	d900      	bls.n	8000d88 <__aeabi_ddiv+0x4dc>
 8000d86:	e68d      	b.n	8000aa4 <__aeabi_ddiv+0x1f8>
 8000d88:	428a      	cmp	r2, r1
 8000d8a:	d800      	bhi.n	8000d8e <__aeabi_ddiv+0x4e2>
 8000d8c:	e68a      	b.n	8000aa4 <__aeabi_ddiv+0x1f8>
 8000d8e:	1e85      	subs	r5, r0, #2
 8000d90:	1909      	adds	r1, r1, r4
 8000d92:	e687      	b.n	8000aa4 <__aeabi_ddiv+0x1f8>
 8000d94:	230f      	movs	r3, #15
 8000d96:	402b      	ands	r3, r5
 8000d98:	2b04      	cmp	r3, #4
 8000d9a:	d100      	bne.n	8000d9e <__aeabi_ddiv+0x4f2>
 8000d9c:	e6bc      	b.n	8000b18 <__aeabi_ddiv+0x26c>
 8000d9e:	2305      	movs	r3, #5
 8000da0:	425b      	negs	r3, r3
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	419b      	sbcs	r3, r3
 8000da6:	3504      	adds	r5, #4
 8000da8:	425b      	negs	r3, r3
 8000daa:	08ed      	lsrs	r5, r5, #3
 8000dac:	4498      	add	r8, r3
 8000dae:	e6b4      	b.n	8000b1a <__aeabi_ddiv+0x26e>
 8000db0:	42af      	cmp	r7, r5
 8000db2:	d900      	bls.n	8000db6 <__aeabi_ddiv+0x50a>
 8000db4:	e660      	b.n	8000a78 <__aeabi_ddiv+0x1cc>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	d804      	bhi.n	8000dc4 <__aeabi_ddiv+0x518>
 8000dba:	d000      	beq.n	8000dbe <__aeabi_ddiv+0x512>
 8000dbc:	e65c      	b.n	8000a78 <__aeabi_ddiv+0x1cc>
 8000dbe:	42ae      	cmp	r6, r5
 8000dc0:	d800      	bhi.n	8000dc4 <__aeabi_ddiv+0x518>
 8000dc2:	e659      	b.n	8000a78 <__aeabi_ddiv+0x1cc>
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	425b      	negs	r3, r3
 8000dc8:	469c      	mov	ip, r3
 8000dca:	9b00      	ldr	r3, [sp, #0]
 8000dcc:	44e0      	add	r8, ip
 8000dce:	469c      	mov	ip, r3
 8000dd0:	4465      	add	r5, ip
 8000dd2:	429d      	cmp	r5, r3
 8000dd4:	419b      	sbcs	r3, r3
 8000dd6:	425b      	negs	r3, r3
 8000dd8:	191b      	adds	r3, r3, r4
 8000dda:	18c0      	adds	r0, r0, r3
 8000ddc:	e64d      	b.n	8000a7a <__aeabi_ddiv+0x1ce>
 8000dde:	428a      	cmp	r2, r1
 8000de0:	d800      	bhi.n	8000de4 <__aeabi_ddiv+0x538>
 8000de2:	e60e      	b.n	8000a02 <__aeabi_ddiv+0x156>
 8000de4:	1e83      	subs	r3, r0, #2
 8000de6:	1909      	adds	r1, r1, r4
 8000de8:	e60b      	b.n	8000a02 <__aeabi_ddiv+0x156>
 8000dea:	428a      	cmp	r2, r1
 8000dec:	d800      	bhi.n	8000df0 <__aeabi_ddiv+0x544>
 8000dee:	e5f4      	b.n	80009da <__aeabi_ddiv+0x12e>
 8000df0:	1e83      	subs	r3, r0, #2
 8000df2:	4698      	mov	r8, r3
 8000df4:	1909      	adds	r1, r1, r4
 8000df6:	e5f0      	b.n	80009da <__aeabi_ddiv+0x12e>
 8000df8:	4925      	ldr	r1, [pc, #148]	; (8000e90 <__aeabi_ddiv+0x5e4>)
 8000dfa:	0028      	movs	r0, r5
 8000dfc:	4459      	add	r1, fp
 8000dfe:	408d      	lsls	r5, r1
 8000e00:	4642      	mov	r2, r8
 8000e02:	408a      	lsls	r2, r1
 8000e04:	1e69      	subs	r1, r5, #1
 8000e06:	418d      	sbcs	r5, r1
 8000e08:	4641      	mov	r1, r8
 8000e0a:	40d8      	lsrs	r0, r3
 8000e0c:	40d9      	lsrs	r1, r3
 8000e0e:	4302      	orrs	r2, r0
 8000e10:	432a      	orrs	r2, r5
 8000e12:	000b      	movs	r3, r1
 8000e14:	0751      	lsls	r1, r2, #29
 8000e16:	d100      	bne.n	8000e1a <__aeabi_ddiv+0x56e>
 8000e18:	e751      	b.n	8000cbe <__aeabi_ddiv+0x412>
 8000e1a:	210f      	movs	r1, #15
 8000e1c:	4011      	ands	r1, r2
 8000e1e:	2904      	cmp	r1, #4
 8000e20:	d000      	beq.n	8000e24 <__aeabi_ddiv+0x578>
 8000e22:	e746      	b.n	8000cb2 <__aeabi_ddiv+0x406>
 8000e24:	e74b      	b.n	8000cbe <__aeabi_ddiv+0x412>
 8000e26:	0005      	movs	r5, r0
 8000e28:	428e      	cmp	r6, r1
 8000e2a:	d000      	beq.n	8000e2e <__aeabi_ddiv+0x582>
 8000e2c:	e66a      	b.n	8000b04 <__aeabi_ddiv+0x258>
 8000e2e:	9a00      	ldr	r2, [sp, #0]
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d000      	beq.n	8000e36 <__aeabi_ddiv+0x58a>
 8000e34:	e666      	b.n	8000b04 <__aeabi_ddiv+0x258>
 8000e36:	e667      	b.n	8000b08 <__aeabi_ddiv+0x25c>
 8000e38:	4a16      	ldr	r2, [pc, #88]	; (8000e94 <__aeabi_ddiv+0x5e8>)
 8000e3a:	445a      	add	r2, fp
 8000e3c:	2a00      	cmp	r2, #0
 8000e3e:	dc00      	bgt.n	8000e42 <__aeabi_ddiv+0x596>
 8000e40:	e710      	b.n	8000c64 <__aeabi_ddiv+0x3b8>
 8000e42:	2301      	movs	r3, #1
 8000e44:	2500      	movs	r5, #0
 8000e46:	4498      	add	r8, r3
 8000e48:	e667      	b.n	8000b1a <__aeabi_ddiv+0x26e>
 8000e4a:	075d      	lsls	r5, r3, #29
 8000e4c:	025b      	lsls	r3, r3, #9
 8000e4e:	0b1c      	lsrs	r4, r3, #12
 8000e50:	08d2      	lsrs	r2, r2, #3
 8000e52:	2300      	movs	r3, #0
 8000e54:	4315      	orrs	r5, r2
 8000e56:	e580      	b.n	800095a <__aeabi_ddiv+0xae>
 8000e58:	9800      	ldr	r0, [sp, #0]
 8000e5a:	3d02      	subs	r5, #2
 8000e5c:	0042      	lsls	r2, r0, #1
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	41bf      	sbcs	r7, r7
 8000e62:	427f      	negs	r7, r7
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	1936      	adds	r6, r6, r4
 8000e68:	9200      	str	r2, [sp, #0]
 8000e6a:	e7dd      	b.n	8000e28 <__aeabi_ddiv+0x57c>
 8000e6c:	2480      	movs	r4, #128	; 0x80
 8000e6e:	4643      	mov	r3, r8
 8000e70:	0324      	lsls	r4, r4, #12
 8000e72:	431c      	orrs	r4, r3
 8000e74:	0324      	lsls	r4, r4, #12
 8000e76:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <__aeabi_ddiv+0x5dc>)
 8000e78:	0b24      	lsrs	r4, r4, #12
 8000e7a:	e56e      	b.n	800095a <__aeabi_ddiv+0xae>
 8000e7c:	9a00      	ldr	r2, [sp, #0]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d3ea      	bcc.n	8000e58 <__aeabi_ddiv+0x5ac>
 8000e82:	0005      	movs	r5, r0
 8000e84:	e7d3      	b.n	8000e2e <__aeabi_ddiv+0x582>
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	000007ff 	.word	0x000007ff
 8000e8c:	0000043e 	.word	0x0000043e
 8000e90:	0000041e 	.word	0x0000041e
 8000e94:	000003ff 	.word	0x000003ff

08000e98 <__aeabi_dmul>:
 8000e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9a:	4657      	mov	r7, sl
 8000e9c:	464e      	mov	r6, r9
 8000e9e:	4645      	mov	r5, r8
 8000ea0:	46de      	mov	lr, fp
 8000ea2:	b5e0      	push	{r5, r6, r7, lr}
 8000ea4:	4698      	mov	r8, r3
 8000ea6:	030c      	lsls	r4, r1, #12
 8000ea8:	004b      	lsls	r3, r1, #1
 8000eaa:	0006      	movs	r6, r0
 8000eac:	4692      	mov	sl, r2
 8000eae:	b087      	sub	sp, #28
 8000eb0:	0b24      	lsrs	r4, r4, #12
 8000eb2:	0d5b      	lsrs	r3, r3, #21
 8000eb4:	0fcf      	lsrs	r7, r1, #31
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d100      	bne.n	8000ebc <__aeabi_dmul+0x24>
 8000eba:	e15c      	b.n	8001176 <__aeabi_dmul+0x2de>
 8000ebc:	4ad9      	ldr	r2, [pc, #868]	; (8001224 <__aeabi_dmul+0x38c>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d100      	bne.n	8000ec4 <__aeabi_dmul+0x2c>
 8000ec2:	e175      	b.n	80011b0 <__aeabi_dmul+0x318>
 8000ec4:	0f42      	lsrs	r2, r0, #29
 8000ec6:	00e4      	lsls	r4, r4, #3
 8000ec8:	4314      	orrs	r4, r2
 8000eca:	2280      	movs	r2, #128	; 0x80
 8000ecc:	0412      	lsls	r2, r2, #16
 8000ece:	4314      	orrs	r4, r2
 8000ed0:	4ad5      	ldr	r2, [pc, #852]	; (8001228 <__aeabi_dmul+0x390>)
 8000ed2:	00c5      	lsls	r5, r0, #3
 8000ed4:	4694      	mov	ip, r2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	2300      	movs	r3, #0
 8000edc:	4699      	mov	r9, r3
 8000ede:	469b      	mov	fp, r3
 8000ee0:	4643      	mov	r3, r8
 8000ee2:	4642      	mov	r2, r8
 8000ee4:	031e      	lsls	r6, r3, #12
 8000ee6:	0fd2      	lsrs	r2, r2, #31
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	4650      	mov	r0, sl
 8000eec:	4690      	mov	r8, r2
 8000eee:	0b36      	lsrs	r6, r6, #12
 8000ef0:	0d5b      	lsrs	r3, r3, #21
 8000ef2:	d100      	bne.n	8000ef6 <__aeabi_dmul+0x5e>
 8000ef4:	e120      	b.n	8001138 <__aeabi_dmul+0x2a0>
 8000ef6:	4acb      	ldr	r2, [pc, #812]	; (8001224 <__aeabi_dmul+0x38c>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d100      	bne.n	8000efe <__aeabi_dmul+0x66>
 8000efc:	e162      	b.n	80011c4 <__aeabi_dmul+0x32c>
 8000efe:	49ca      	ldr	r1, [pc, #808]	; (8001228 <__aeabi_dmul+0x390>)
 8000f00:	0f42      	lsrs	r2, r0, #29
 8000f02:	468c      	mov	ip, r1
 8000f04:	9900      	ldr	r1, [sp, #0]
 8000f06:	4463      	add	r3, ip
 8000f08:	00f6      	lsls	r6, r6, #3
 8000f0a:	468c      	mov	ip, r1
 8000f0c:	4316      	orrs	r6, r2
 8000f0e:	2280      	movs	r2, #128	; 0x80
 8000f10:	449c      	add	ip, r3
 8000f12:	0412      	lsls	r2, r2, #16
 8000f14:	4663      	mov	r3, ip
 8000f16:	4316      	orrs	r6, r2
 8000f18:	00c2      	lsls	r2, r0, #3
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	9900      	ldr	r1, [sp, #0]
 8000f20:	4643      	mov	r3, r8
 8000f22:	3101      	adds	r1, #1
 8000f24:	468c      	mov	ip, r1
 8000f26:	4649      	mov	r1, r9
 8000f28:	407b      	eors	r3, r7
 8000f2a:	9301      	str	r3, [sp, #4]
 8000f2c:	290f      	cmp	r1, #15
 8000f2e:	d826      	bhi.n	8000f7e <__aeabi_dmul+0xe6>
 8000f30:	4bbe      	ldr	r3, [pc, #760]	; (800122c <__aeabi_dmul+0x394>)
 8000f32:	0089      	lsls	r1, r1, #2
 8000f34:	5859      	ldr	r1, [r3, r1]
 8000f36:	468f      	mov	pc, r1
 8000f38:	4643      	mov	r3, r8
 8000f3a:	9301      	str	r3, [sp, #4]
 8000f3c:	0034      	movs	r4, r6
 8000f3e:	0015      	movs	r5, r2
 8000f40:	4683      	mov	fp, r0
 8000f42:	465b      	mov	r3, fp
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d016      	beq.n	8000f76 <__aeabi_dmul+0xde>
 8000f48:	2b03      	cmp	r3, #3
 8000f4a:	d100      	bne.n	8000f4e <__aeabi_dmul+0xb6>
 8000f4c:	e203      	b.n	8001356 <__aeabi_dmul+0x4be>
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d000      	beq.n	8000f54 <__aeabi_dmul+0xbc>
 8000f52:	e0cd      	b.n	80010f0 <__aeabi_dmul+0x258>
 8000f54:	2200      	movs	r2, #0
 8000f56:	2400      	movs	r4, #0
 8000f58:	2500      	movs	r5, #0
 8000f5a:	9b01      	ldr	r3, [sp, #4]
 8000f5c:	0512      	lsls	r2, r2, #20
 8000f5e:	4322      	orrs	r2, r4
 8000f60:	07db      	lsls	r3, r3, #31
 8000f62:	431a      	orrs	r2, r3
 8000f64:	0028      	movs	r0, r5
 8000f66:	0011      	movs	r1, r2
 8000f68:	b007      	add	sp, #28
 8000f6a:	bcf0      	pop	{r4, r5, r6, r7}
 8000f6c:	46bb      	mov	fp, r7
 8000f6e:	46b2      	mov	sl, r6
 8000f70:	46a9      	mov	r9, r5
 8000f72:	46a0      	mov	r8, r4
 8000f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f76:	2400      	movs	r4, #0
 8000f78:	2500      	movs	r5, #0
 8000f7a:	4aaa      	ldr	r2, [pc, #680]	; (8001224 <__aeabi_dmul+0x38c>)
 8000f7c:	e7ed      	b.n	8000f5a <__aeabi_dmul+0xc2>
 8000f7e:	0c28      	lsrs	r0, r5, #16
 8000f80:	042d      	lsls	r5, r5, #16
 8000f82:	0c2d      	lsrs	r5, r5, #16
 8000f84:	002b      	movs	r3, r5
 8000f86:	0c11      	lsrs	r1, r2, #16
 8000f88:	0412      	lsls	r2, r2, #16
 8000f8a:	0c12      	lsrs	r2, r2, #16
 8000f8c:	4353      	muls	r3, r2
 8000f8e:	4698      	mov	r8, r3
 8000f90:	0013      	movs	r3, r2
 8000f92:	002f      	movs	r7, r5
 8000f94:	4343      	muls	r3, r0
 8000f96:	4699      	mov	r9, r3
 8000f98:	434f      	muls	r7, r1
 8000f9a:	444f      	add	r7, r9
 8000f9c:	46bb      	mov	fp, r7
 8000f9e:	4647      	mov	r7, r8
 8000fa0:	000b      	movs	r3, r1
 8000fa2:	0c3f      	lsrs	r7, r7, #16
 8000fa4:	46ba      	mov	sl, r7
 8000fa6:	4343      	muls	r3, r0
 8000fa8:	44da      	add	sl, fp
 8000faa:	9302      	str	r3, [sp, #8]
 8000fac:	45d1      	cmp	r9, sl
 8000fae:	d904      	bls.n	8000fba <__aeabi_dmul+0x122>
 8000fb0:	2780      	movs	r7, #128	; 0x80
 8000fb2:	027f      	lsls	r7, r7, #9
 8000fb4:	46b9      	mov	r9, r7
 8000fb6:	444b      	add	r3, r9
 8000fb8:	9302      	str	r3, [sp, #8]
 8000fba:	4653      	mov	r3, sl
 8000fbc:	0c1b      	lsrs	r3, r3, #16
 8000fbe:	469b      	mov	fp, r3
 8000fc0:	4653      	mov	r3, sl
 8000fc2:	041f      	lsls	r7, r3, #16
 8000fc4:	4643      	mov	r3, r8
 8000fc6:	041b      	lsls	r3, r3, #16
 8000fc8:	0c1b      	lsrs	r3, r3, #16
 8000fca:	4698      	mov	r8, r3
 8000fcc:	003b      	movs	r3, r7
 8000fce:	4443      	add	r3, r8
 8000fd0:	9304      	str	r3, [sp, #16]
 8000fd2:	0c33      	lsrs	r3, r6, #16
 8000fd4:	0436      	lsls	r6, r6, #16
 8000fd6:	0c36      	lsrs	r6, r6, #16
 8000fd8:	4698      	mov	r8, r3
 8000fda:	0033      	movs	r3, r6
 8000fdc:	4343      	muls	r3, r0
 8000fde:	4699      	mov	r9, r3
 8000fe0:	4643      	mov	r3, r8
 8000fe2:	4343      	muls	r3, r0
 8000fe4:	002f      	movs	r7, r5
 8000fe6:	469a      	mov	sl, r3
 8000fe8:	4643      	mov	r3, r8
 8000fea:	4377      	muls	r7, r6
 8000fec:	435d      	muls	r5, r3
 8000fee:	0c38      	lsrs	r0, r7, #16
 8000ff0:	444d      	add	r5, r9
 8000ff2:	1945      	adds	r5, r0, r5
 8000ff4:	45a9      	cmp	r9, r5
 8000ff6:	d903      	bls.n	8001000 <__aeabi_dmul+0x168>
 8000ff8:	2380      	movs	r3, #128	; 0x80
 8000ffa:	025b      	lsls	r3, r3, #9
 8000ffc:	4699      	mov	r9, r3
 8000ffe:	44ca      	add	sl, r9
 8001000:	043f      	lsls	r7, r7, #16
 8001002:	0c28      	lsrs	r0, r5, #16
 8001004:	0c3f      	lsrs	r7, r7, #16
 8001006:	042d      	lsls	r5, r5, #16
 8001008:	19ed      	adds	r5, r5, r7
 800100a:	0c27      	lsrs	r7, r4, #16
 800100c:	0424      	lsls	r4, r4, #16
 800100e:	0c24      	lsrs	r4, r4, #16
 8001010:	0003      	movs	r3, r0
 8001012:	0020      	movs	r0, r4
 8001014:	4350      	muls	r0, r2
 8001016:	437a      	muls	r2, r7
 8001018:	4691      	mov	r9, r2
 800101a:	003a      	movs	r2, r7
 800101c:	4453      	add	r3, sl
 800101e:	9305      	str	r3, [sp, #20]
 8001020:	0c03      	lsrs	r3, r0, #16
 8001022:	469a      	mov	sl, r3
 8001024:	434a      	muls	r2, r1
 8001026:	4361      	muls	r1, r4
 8001028:	4449      	add	r1, r9
 800102a:	4451      	add	r1, sl
 800102c:	44ab      	add	fp, r5
 800102e:	4589      	cmp	r9, r1
 8001030:	d903      	bls.n	800103a <__aeabi_dmul+0x1a2>
 8001032:	2380      	movs	r3, #128	; 0x80
 8001034:	025b      	lsls	r3, r3, #9
 8001036:	4699      	mov	r9, r3
 8001038:	444a      	add	r2, r9
 800103a:	0400      	lsls	r0, r0, #16
 800103c:	0c0b      	lsrs	r3, r1, #16
 800103e:	0c00      	lsrs	r0, r0, #16
 8001040:	0409      	lsls	r1, r1, #16
 8001042:	1809      	adds	r1, r1, r0
 8001044:	0020      	movs	r0, r4
 8001046:	4699      	mov	r9, r3
 8001048:	4643      	mov	r3, r8
 800104a:	4370      	muls	r0, r6
 800104c:	435c      	muls	r4, r3
 800104e:	437e      	muls	r6, r7
 8001050:	435f      	muls	r7, r3
 8001052:	0c03      	lsrs	r3, r0, #16
 8001054:	4698      	mov	r8, r3
 8001056:	19a4      	adds	r4, r4, r6
 8001058:	4444      	add	r4, r8
 800105a:	444a      	add	r2, r9
 800105c:	9703      	str	r7, [sp, #12]
 800105e:	42a6      	cmp	r6, r4
 8001060:	d904      	bls.n	800106c <__aeabi_dmul+0x1d4>
 8001062:	2380      	movs	r3, #128	; 0x80
 8001064:	025b      	lsls	r3, r3, #9
 8001066:	4698      	mov	r8, r3
 8001068:	4447      	add	r7, r8
 800106a:	9703      	str	r7, [sp, #12]
 800106c:	0423      	lsls	r3, r4, #16
 800106e:	9e02      	ldr	r6, [sp, #8]
 8001070:	469a      	mov	sl, r3
 8001072:	9b05      	ldr	r3, [sp, #20]
 8001074:	445e      	add	r6, fp
 8001076:	4698      	mov	r8, r3
 8001078:	42ae      	cmp	r6, r5
 800107a:	41ad      	sbcs	r5, r5
 800107c:	1876      	adds	r6, r6, r1
 800107e:	428e      	cmp	r6, r1
 8001080:	4189      	sbcs	r1, r1
 8001082:	0400      	lsls	r0, r0, #16
 8001084:	0c00      	lsrs	r0, r0, #16
 8001086:	4450      	add	r0, sl
 8001088:	4440      	add	r0, r8
 800108a:	426d      	negs	r5, r5
 800108c:	1947      	adds	r7, r0, r5
 800108e:	46b8      	mov	r8, r7
 8001090:	4693      	mov	fp, r2
 8001092:	4249      	negs	r1, r1
 8001094:	4689      	mov	r9, r1
 8001096:	44c3      	add	fp, r8
 8001098:	44d9      	add	r9, fp
 800109a:	4298      	cmp	r0, r3
 800109c:	4180      	sbcs	r0, r0
 800109e:	45a8      	cmp	r8, r5
 80010a0:	41ad      	sbcs	r5, r5
 80010a2:	4593      	cmp	fp, r2
 80010a4:	4192      	sbcs	r2, r2
 80010a6:	4589      	cmp	r9, r1
 80010a8:	4189      	sbcs	r1, r1
 80010aa:	426d      	negs	r5, r5
 80010ac:	4240      	negs	r0, r0
 80010ae:	4328      	orrs	r0, r5
 80010b0:	0c24      	lsrs	r4, r4, #16
 80010b2:	4252      	negs	r2, r2
 80010b4:	4249      	negs	r1, r1
 80010b6:	430a      	orrs	r2, r1
 80010b8:	9b03      	ldr	r3, [sp, #12]
 80010ba:	1900      	adds	r0, r0, r4
 80010bc:	1880      	adds	r0, r0, r2
 80010be:	18c7      	adds	r7, r0, r3
 80010c0:	464b      	mov	r3, r9
 80010c2:	0ddc      	lsrs	r4, r3, #23
 80010c4:	9b04      	ldr	r3, [sp, #16]
 80010c6:	0275      	lsls	r5, r6, #9
 80010c8:	431d      	orrs	r5, r3
 80010ca:	1e6a      	subs	r2, r5, #1
 80010cc:	4195      	sbcs	r5, r2
 80010ce:	464b      	mov	r3, r9
 80010d0:	0df6      	lsrs	r6, r6, #23
 80010d2:	027f      	lsls	r7, r7, #9
 80010d4:	4335      	orrs	r5, r6
 80010d6:	025a      	lsls	r2, r3, #9
 80010d8:	433c      	orrs	r4, r7
 80010da:	4315      	orrs	r5, r2
 80010dc:	01fb      	lsls	r3, r7, #7
 80010de:	d400      	bmi.n	80010e2 <__aeabi_dmul+0x24a>
 80010e0:	e11c      	b.n	800131c <__aeabi_dmul+0x484>
 80010e2:	2101      	movs	r1, #1
 80010e4:	086a      	lsrs	r2, r5, #1
 80010e6:	400d      	ands	r5, r1
 80010e8:	4315      	orrs	r5, r2
 80010ea:	07e2      	lsls	r2, r4, #31
 80010ec:	4315      	orrs	r5, r2
 80010ee:	0864      	lsrs	r4, r4, #1
 80010f0:	494f      	ldr	r1, [pc, #316]	; (8001230 <__aeabi_dmul+0x398>)
 80010f2:	4461      	add	r1, ip
 80010f4:	2900      	cmp	r1, #0
 80010f6:	dc00      	bgt.n	80010fa <__aeabi_dmul+0x262>
 80010f8:	e0b0      	b.n	800125c <__aeabi_dmul+0x3c4>
 80010fa:	076b      	lsls	r3, r5, #29
 80010fc:	d009      	beq.n	8001112 <__aeabi_dmul+0x27a>
 80010fe:	220f      	movs	r2, #15
 8001100:	402a      	ands	r2, r5
 8001102:	2a04      	cmp	r2, #4
 8001104:	d005      	beq.n	8001112 <__aeabi_dmul+0x27a>
 8001106:	1d2a      	adds	r2, r5, #4
 8001108:	42aa      	cmp	r2, r5
 800110a:	41ad      	sbcs	r5, r5
 800110c:	426d      	negs	r5, r5
 800110e:	1964      	adds	r4, r4, r5
 8001110:	0015      	movs	r5, r2
 8001112:	01e3      	lsls	r3, r4, #7
 8001114:	d504      	bpl.n	8001120 <__aeabi_dmul+0x288>
 8001116:	2180      	movs	r1, #128	; 0x80
 8001118:	4a46      	ldr	r2, [pc, #280]	; (8001234 <__aeabi_dmul+0x39c>)
 800111a:	00c9      	lsls	r1, r1, #3
 800111c:	4014      	ands	r4, r2
 800111e:	4461      	add	r1, ip
 8001120:	4a45      	ldr	r2, [pc, #276]	; (8001238 <__aeabi_dmul+0x3a0>)
 8001122:	4291      	cmp	r1, r2
 8001124:	dd00      	ble.n	8001128 <__aeabi_dmul+0x290>
 8001126:	e726      	b.n	8000f76 <__aeabi_dmul+0xde>
 8001128:	0762      	lsls	r2, r4, #29
 800112a:	08ed      	lsrs	r5, r5, #3
 800112c:	0264      	lsls	r4, r4, #9
 800112e:	0549      	lsls	r1, r1, #21
 8001130:	4315      	orrs	r5, r2
 8001132:	0b24      	lsrs	r4, r4, #12
 8001134:	0d4a      	lsrs	r2, r1, #21
 8001136:	e710      	b.n	8000f5a <__aeabi_dmul+0xc2>
 8001138:	4652      	mov	r2, sl
 800113a:	4332      	orrs	r2, r6
 800113c:	d100      	bne.n	8001140 <__aeabi_dmul+0x2a8>
 800113e:	e07f      	b.n	8001240 <__aeabi_dmul+0x3a8>
 8001140:	2e00      	cmp	r6, #0
 8001142:	d100      	bne.n	8001146 <__aeabi_dmul+0x2ae>
 8001144:	e0dc      	b.n	8001300 <__aeabi_dmul+0x468>
 8001146:	0030      	movs	r0, r6
 8001148:	f000 fda4 	bl	8001c94 <__clzsi2>
 800114c:	0002      	movs	r2, r0
 800114e:	3a0b      	subs	r2, #11
 8001150:	231d      	movs	r3, #29
 8001152:	0001      	movs	r1, r0
 8001154:	1a9b      	subs	r3, r3, r2
 8001156:	4652      	mov	r2, sl
 8001158:	3908      	subs	r1, #8
 800115a:	40da      	lsrs	r2, r3
 800115c:	408e      	lsls	r6, r1
 800115e:	4316      	orrs	r6, r2
 8001160:	4652      	mov	r2, sl
 8001162:	408a      	lsls	r2, r1
 8001164:	9b00      	ldr	r3, [sp, #0]
 8001166:	4935      	ldr	r1, [pc, #212]	; (800123c <__aeabi_dmul+0x3a4>)
 8001168:	1a18      	subs	r0, r3, r0
 800116a:	0003      	movs	r3, r0
 800116c:	468c      	mov	ip, r1
 800116e:	4463      	add	r3, ip
 8001170:	2000      	movs	r0, #0
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	e6d3      	b.n	8000f1e <__aeabi_dmul+0x86>
 8001176:	0025      	movs	r5, r4
 8001178:	4305      	orrs	r5, r0
 800117a:	d04a      	beq.n	8001212 <__aeabi_dmul+0x37a>
 800117c:	2c00      	cmp	r4, #0
 800117e:	d100      	bne.n	8001182 <__aeabi_dmul+0x2ea>
 8001180:	e0b0      	b.n	80012e4 <__aeabi_dmul+0x44c>
 8001182:	0020      	movs	r0, r4
 8001184:	f000 fd86 	bl	8001c94 <__clzsi2>
 8001188:	0001      	movs	r1, r0
 800118a:	0002      	movs	r2, r0
 800118c:	390b      	subs	r1, #11
 800118e:	231d      	movs	r3, #29
 8001190:	0010      	movs	r0, r2
 8001192:	1a5b      	subs	r3, r3, r1
 8001194:	0031      	movs	r1, r6
 8001196:	0035      	movs	r5, r6
 8001198:	3808      	subs	r0, #8
 800119a:	4084      	lsls	r4, r0
 800119c:	40d9      	lsrs	r1, r3
 800119e:	4085      	lsls	r5, r0
 80011a0:	430c      	orrs	r4, r1
 80011a2:	4826      	ldr	r0, [pc, #152]	; (800123c <__aeabi_dmul+0x3a4>)
 80011a4:	1a83      	subs	r3, r0, r2
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2300      	movs	r3, #0
 80011aa:	4699      	mov	r9, r3
 80011ac:	469b      	mov	fp, r3
 80011ae:	e697      	b.n	8000ee0 <__aeabi_dmul+0x48>
 80011b0:	0005      	movs	r5, r0
 80011b2:	4325      	orrs	r5, r4
 80011b4:	d126      	bne.n	8001204 <__aeabi_dmul+0x36c>
 80011b6:	2208      	movs	r2, #8
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	2302      	movs	r3, #2
 80011bc:	2400      	movs	r4, #0
 80011be:	4691      	mov	r9, r2
 80011c0:	469b      	mov	fp, r3
 80011c2:	e68d      	b.n	8000ee0 <__aeabi_dmul+0x48>
 80011c4:	4652      	mov	r2, sl
 80011c6:	9b00      	ldr	r3, [sp, #0]
 80011c8:	4332      	orrs	r2, r6
 80011ca:	d110      	bne.n	80011ee <__aeabi_dmul+0x356>
 80011cc:	4915      	ldr	r1, [pc, #84]	; (8001224 <__aeabi_dmul+0x38c>)
 80011ce:	2600      	movs	r6, #0
 80011d0:	468c      	mov	ip, r1
 80011d2:	4463      	add	r3, ip
 80011d4:	4649      	mov	r1, r9
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2302      	movs	r3, #2
 80011da:	4319      	orrs	r1, r3
 80011dc:	4689      	mov	r9, r1
 80011de:	2002      	movs	r0, #2
 80011e0:	e69d      	b.n	8000f1e <__aeabi_dmul+0x86>
 80011e2:	465b      	mov	r3, fp
 80011e4:	9701      	str	r7, [sp, #4]
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d000      	beq.n	80011ec <__aeabi_dmul+0x354>
 80011ea:	e6ad      	b.n	8000f48 <__aeabi_dmul+0xb0>
 80011ec:	e6c3      	b.n	8000f76 <__aeabi_dmul+0xde>
 80011ee:	4a0d      	ldr	r2, [pc, #52]	; (8001224 <__aeabi_dmul+0x38c>)
 80011f0:	2003      	movs	r0, #3
 80011f2:	4694      	mov	ip, r2
 80011f4:	4463      	add	r3, ip
 80011f6:	464a      	mov	r2, r9
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	2303      	movs	r3, #3
 80011fc:	431a      	orrs	r2, r3
 80011fe:	4691      	mov	r9, r2
 8001200:	4652      	mov	r2, sl
 8001202:	e68c      	b.n	8000f1e <__aeabi_dmul+0x86>
 8001204:	220c      	movs	r2, #12
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2303      	movs	r3, #3
 800120a:	0005      	movs	r5, r0
 800120c:	4691      	mov	r9, r2
 800120e:	469b      	mov	fp, r3
 8001210:	e666      	b.n	8000ee0 <__aeabi_dmul+0x48>
 8001212:	2304      	movs	r3, #4
 8001214:	4699      	mov	r9, r3
 8001216:	2300      	movs	r3, #0
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	3301      	adds	r3, #1
 800121c:	2400      	movs	r4, #0
 800121e:	469b      	mov	fp, r3
 8001220:	e65e      	b.n	8000ee0 <__aeabi_dmul+0x48>
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	000007ff 	.word	0x000007ff
 8001228:	fffffc01 	.word	0xfffffc01
 800122c:	08007e48 	.word	0x08007e48
 8001230:	000003ff 	.word	0x000003ff
 8001234:	feffffff 	.word	0xfeffffff
 8001238:	000007fe 	.word	0x000007fe
 800123c:	fffffc0d 	.word	0xfffffc0d
 8001240:	4649      	mov	r1, r9
 8001242:	2301      	movs	r3, #1
 8001244:	4319      	orrs	r1, r3
 8001246:	4689      	mov	r9, r1
 8001248:	2600      	movs	r6, #0
 800124a:	2001      	movs	r0, #1
 800124c:	e667      	b.n	8000f1e <__aeabi_dmul+0x86>
 800124e:	2300      	movs	r3, #0
 8001250:	2480      	movs	r4, #128	; 0x80
 8001252:	2500      	movs	r5, #0
 8001254:	4a43      	ldr	r2, [pc, #268]	; (8001364 <__aeabi_dmul+0x4cc>)
 8001256:	9301      	str	r3, [sp, #4]
 8001258:	0324      	lsls	r4, r4, #12
 800125a:	e67e      	b.n	8000f5a <__aeabi_dmul+0xc2>
 800125c:	2001      	movs	r0, #1
 800125e:	1a40      	subs	r0, r0, r1
 8001260:	2838      	cmp	r0, #56	; 0x38
 8001262:	dd00      	ble.n	8001266 <__aeabi_dmul+0x3ce>
 8001264:	e676      	b.n	8000f54 <__aeabi_dmul+0xbc>
 8001266:	281f      	cmp	r0, #31
 8001268:	dd5b      	ble.n	8001322 <__aeabi_dmul+0x48a>
 800126a:	221f      	movs	r2, #31
 800126c:	0023      	movs	r3, r4
 800126e:	4252      	negs	r2, r2
 8001270:	1a51      	subs	r1, r2, r1
 8001272:	40cb      	lsrs	r3, r1
 8001274:	0019      	movs	r1, r3
 8001276:	2820      	cmp	r0, #32
 8001278:	d003      	beq.n	8001282 <__aeabi_dmul+0x3ea>
 800127a:	4a3b      	ldr	r2, [pc, #236]	; (8001368 <__aeabi_dmul+0x4d0>)
 800127c:	4462      	add	r2, ip
 800127e:	4094      	lsls	r4, r2
 8001280:	4325      	orrs	r5, r4
 8001282:	1e6a      	subs	r2, r5, #1
 8001284:	4195      	sbcs	r5, r2
 8001286:	002a      	movs	r2, r5
 8001288:	430a      	orrs	r2, r1
 800128a:	2107      	movs	r1, #7
 800128c:	000d      	movs	r5, r1
 800128e:	2400      	movs	r4, #0
 8001290:	4015      	ands	r5, r2
 8001292:	4211      	tst	r1, r2
 8001294:	d05b      	beq.n	800134e <__aeabi_dmul+0x4b6>
 8001296:	210f      	movs	r1, #15
 8001298:	2400      	movs	r4, #0
 800129a:	4011      	ands	r1, r2
 800129c:	2904      	cmp	r1, #4
 800129e:	d053      	beq.n	8001348 <__aeabi_dmul+0x4b0>
 80012a0:	1d11      	adds	r1, r2, #4
 80012a2:	4291      	cmp	r1, r2
 80012a4:	4192      	sbcs	r2, r2
 80012a6:	4252      	negs	r2, r2
 80012a8:	18a4      	adds	r4, r4, r2
 80012aa:	000a      	movs	r2, r1
 80012ac:	0223      	lsls	r3, r4, #8
 80012ae:	d54b      	bpl.n	8001348 <__aeabi_dmul+0x4b0>
 80012b0:	2201      	movs	r2, #1
 80012b2:	2400      	movs	r4, #0
 80012b4:	2500      	movs	r5, #0
 80012b6:	e650      	b.n	8000f5a <__aeabi_dmul+0xc2>
 80012b8:	2380      	movs	r3, #128	; 0x80
 80012ba:	031b      	lsls	r3, r3, #12
 80012bc:	421c      	tst	r4, r3
 80012be:	d009      	beq.n	80012d4 <__aeabi_dmul+0x43c>
 80012c0:	421e      	tst	r6, r3
 80012c2:	d107      	bne.n	80012d4 <__aeabi_dmul+0x43c>
 80012c4:	4333      	orrs	r3, r6
 80012c6:	031c      	lsls	r4, r3, #12
 80012c8:	4643      	mov	r3, r8
 80012ca:	0015      	movs	r5, r2
 80012cc:	0b24      	lsrs	r4, r4, #12
 80012ce:	4a25      	ldr	r2, [pc, #148]	; (8001364 <__aeabi_dmul+0x4cc>)
 80012d0:	9301      	str	r3, [sp, #4]
 80012d2:	e642      	b.n	8000f5a <__aeabi_dmul+0xc2>
 80012d4:	2280      	movs	r2, #128	; 0x80
 80012d6:	0312      	lsls	r2, r2, #12
 80012d8:	4314      	orrs	r4, r2
 80012da:	0324      	lsls	r4, r4, #12
 80012dc:	4a21      	ldr	r2, [pc, #132]	; (8001364 <__aeabi_dmul+0x4cc>)
 80012de:	0b24      	lsrs	r4, r4, #12
 80012e0:	9701      	str	r7, [sp, #4]
 80012e2:	e63a      	b.n	8000f5a <__aeabi_dmul+0xc2>
 80012e4:	f000 fcd6 	bl	8001c94 <__clzsi2>
 80012e8:	0001      	movs	r1, r0
 80012ea:	0002      	movs	r2, r0
 80012ec:	3115      	adds	r1, #21
 80012ee:	3220      	adds	r2, #32
 80012f0:	291c      	cmp	r1, #28
 80012f2:	dc00      	bgt.n	80012f6 <__aeabi_dmul+0x45e>
 80012f4:	e74b      	b.n	800118e <__aeabi_dmul+0x2f6>
 80012f6:	0034      	movs	r4, r6
 80012f8:	3808      	subs	r0, #8
 80012fa:	2500      	movs	r5, #0
 80012fc:	4084      	lsls	r4, r0
 80012fe:	e750      	b.n	80011a2 <__aeabi_dmul+0x30a>
 8001300:	f000 fcc8 	bl	8001c94 <__clzsi2>
 8001304:	0003      	movs	r3, r0
 8001306:	001a      	movs	r2, r3
 8001308:	3215      	adds	r2, #21
 800130a:	3020      	adds	r0, #32
 800130c:	2a1c      	cmp	r2, #28
 800130e:	dc00      	bgt.n	8001312 <__aeabi_dmul+0x47a>
 8001310:	e71e      	b.n	8001150 <__aeabi_dmul+0x2b8>
 8001312:	4656      	mov	r6, sl
 8001314:	3b08      	subs	r3, #8
 8001316:	2200      	movs	r2, #0
 8001318:	409e      	lsls	r6, r3
 800131a:	e723      	b.n	8001164 <__aeabi_dmul+0x2cc>
 800131c:	9b00      	ldr	r3, [sp, #0]
 800131e:	469c      	mov	ip, r3
 8001320:	e6e6      	b.n	80010f0 <__aeabi_dmul+0x258>
 8001322:	4912      	ldr	r1, [pc, #72]	; (800136c <__aeabi_dmul+0x4d4>)
 8001324:	0022      	movs	r2, r4
 8001326:	4461      	add	r1, ip
 8001328:	002e      	movs	r6, r5
 800132a:	408d      	lsls	r5, r1
 800132c:	408a      	lsls	r2, r1
 800132e:	40c6      	lsrs	r6, r0
 8001330:	1e69      	subs	r1, r5, #1
 8001332:	418d      	sbcs	r5, r1
 8001334:	4332      	orrs	r2, r6
 8001336:	432a      	orrs	r2, r5
 8001338:	40c4      	lsrs	r4, r0
 800133a:	0753      	lsls	r3, r2, #29
 800133c:	d0b6      	beq.n	80012ac <__aeabi_dmul+0x414>
 800133e:	210f      	movs	r1, #15
 8001340:	4011      	ands	r1, r2
 8001342:	2904      	cmp	r1, #4
 8001344:	d1ac      	bne.n	80012a0 <__aeabi_dmul+0x408>
 8001346:	e7b1      	b.n	80012ac <__aeabi_dmul+0x414>
 8001348:	0765      	lsls	r5, r4, #29
 800134a:	0264      	lsls	r4, r4, #9
 800134c:	0b24      	lsrs	r4, r4, #12
 800134e:	08d2      	lsrs	r2, r2, #3
 8001350:	4315      	orrs	r5, r2
 8001352:	2200      	movs	r2, #0
 8001354:	e601      	b.n	8000f5a <__aeabi_dmul+0xc2>
 8001356:	2280      	movs	r2, #128	; 0x80
 8001358:	0312      	lsls	r2, r2, #12
 800135a:	4314      	orrs	r4, r2
 800135c:	0324      	lsls	r4, r4, #12
 800135e:	4a01      	ldr	r2, [pc, #4]	; (8001364 <__aeabi_dmul+0x4cc>)
 8001360:	0b24      	lsrs	r4, r4, #12
 8001362:	e5fa      	b.n	8000f5a <__aeabi_dmul+0xc2>
 8001364:	000007ff 	.word	0x000007ff
 8001368:	0000043e 	.word	0x0000043e
 800136c:	0000041e 	.word	0x0000041e

08001370 <__aeabi_dsub>:
 8001370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001372:	4657      	mov	r7, sl
 8001374:	464e      	mov	r6, r9
 8001376:	4645      	mov	r5, r8
 8001378:	46de      	mov	lr, fp
 800137a:	b5e0      	push	{r5, r6, r7, lr}
 800137c:	001e      	movs	r6, r3
 800137e:	0017      	movs	r7, r2
 8001380:	004a      	lsls	r2, r1, #1
 8001382:	030b      	lsls	r3, r1, #12
 8001384:	0d52      	lsrs	r2, r2, #21
 8001386:	0a5b      	lsrs	r3, r3, #9
 8001388:	4690      	mov	r8, r2
 800138a:	0f42      	lsrs	r2, r0, #29
 800138c:	431a      	orrs	r2, r3
 800138e:	0fcd      	lsrs	r5, r1, #31
 8001390:	4ccd      	ldr	r4, [pc, #820]	; (80016c8 <__aeabi_dsub+0x358>)
 8001392:	0331      	lsls	r1, r6, #12
 8001394:	00c3      	lsls	r3, r0, #3
 8001396:	4694      	mov	ip, r2
 8001398:	0070      	lsls	r0, r6, #1
 800139a:	0f7a      	lsrs	r2, r7, #29
 800139c:	0a49      	lsrs	r1, r1, #9
 800139e:	00ff      	lsls	r7, r7, #3
 80013a0:	469a      	mov	sl, r3
 80013a2:	46b9      	mov	r9, r7
 80013a4:	0d40      	lsrs	r0, r0, #21
 80013a6:	0ff6      	lsrs	r6, r6, #31
 80013a8:	4311      	orrs	r1, r2
 80013aa:	42a0      	cmp	r0, r4
 80013ac:	d100      	bne.n	80013b0 <__aeabi_dsub+0x40>
 80013ae:	e0b1      	b.n	8001514 <__aeabi_dsub+0x1a4>
 80013b0:	2201      	movs	r2, #1
 80013b2:	4056      	eors	r6, r2
 80013b4:	46b3      	mov	fp, r6
 80013b6:	42b5      	cmp	r5, r6
 80013b8:	d100      	bne.n	80013bc <__aeabi_dsub+0x4c>
 80013ba:	e088      	b.n	80014ce <__aeabi_dsub+0x15e>
 80013bc:	4642      	mov	r2, r8
 80013be:	1a12      	subs	r2, r2, r0
 80013c0:	2a00      	cmp	r2, #0
 80013c2:	dc00      	bgt.n	80013c6 <__aeabi_dsub+0x56>
 80013c4:	e0ae      	b.n	8001524 <__aeabi_dsub+0x1b4>
 80013c6:	2800      	cmp	r0, #0
 80013c8:	d100      	bne.n	80013cc <__aeabi_dsub+0x5c>
 80013ca:	e0c1      	b.n	8001550 <__aeabi_dsub+0x1e0>
 80013cc:	48be      	ldr	r0, [pc, #760]	; (80016c8 <__aeabi_dsub+0x358>)
 80013ce:	4580      	cmp	r8, r0
 80013d0:	d100      	bne.n	80013d4 <__aeabi_dsub+0x64>
 80013d2:	e151      	b.n	8001678 <__aeabi_dsub+0x308>
 80013d4:	2080      	movs	r0, #128	; 0x80
 80013d6:	0400      	lsls	r0, r0, #16
 80013d8:	4301      	orrs	r1, r0
 80013da:	2a38      	cmp	r2, #56	; 0x38
 80013dc:	dd00      	ble.n	80013e0 <__aeabi_dsub+0x70>
 80013de:	e17b      	b.n	80016d8 <__aeabi_dsub+0x368>
 80013e0:	2a1f      	cmp	r2, #31
 80013e2:	dd00      	ble.n	80013e6 <__aeabi_dsub+0x76>
 80013e4:	e1ee      	b.n	80017c4 <__aeabi_dsub+0x454>
 80013e6:	2020      	movs	r0, #32
 80013e8:	003e      	movs	r6, r7
 80013ea:	1a80      	subs	r0, r0, r2
 80013ec:	000c      	movs	r4, r1
 80013ee:	40d6      	lsrs	r6, r2
 80013f0:	40d1      	lsrs	r1, r2
 80013f2:	4087      	lsls	r7, r0
 80013f4:	4662      	mov	r2, ip
 80013f6:	4084      	lsls	r4, r0
 80013f8:	1a52      	subs	r2, r2, r1
 80013fa:	1e78      	subs	r0, r7, #1
 80013fc:	4187      	sbcs	r7, r0
 80013fe:	4694      	mov	ip, r2
 8001400:	4334      	orrs	r4, r6
 8001402:	4327      	orrs	r7, r4
 8001404:	1bdc      	subs	r4, r3, r7
 8001406:	42a3      	cmp	r3, r4
 8001408:	419b      	sbcs	r3, r3
 800140a:	4662      	mov	r2, ip
 800140c:	425b      	negs	r3, r3
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	4699      	mov	r9, r3
 8001412:	464b      	mov	r3, r9
 8001414:	021b      	lsls	r3, r3, #8
 8001416:	d400      	bmi.n	800141a <__aeabi_dsub+0xaa>
 8001418:	e118      	b.n	800164c <__aeabi_dsub+0x2dc>
 800141a:	464b      	mov	r3, r9
 800141c:	0258      	lsls	r0, r3, #9
 800141e:	0a43      	lsrs	r3, r0, #9
 8001420:	4699      	mov	r9, r3
 8001422:	464b      	mov	r3, r9
 8001424:	2b00      	cmp	r3, #0
 8001426:	d100      	bne.n	800142a <__aeabi_dsub+0xba>
 8001428:	e137      	b.n	800169a <__aeabi_dsub+0x32a>
 800142a:	4648      	mov	r0, r9
 800142c:	f000 fc32 	bl	8001c94 <__clzsi2>
 8001430:	0001      	movs	r1, r0
 8001432:	3908      	subs	r1, #8
 8001434:	2320      	movs	r3, #32
 8001436:	0022      	movs	r2, r4
 8001438:	4648      	mov	r0, r9
 800143a:	1a5b      	subs	r3, r3, r1
 800143c:	40da      	lsrs	r2, r3
 800143e:	4088      	lsls	r0, r1
 8001440:	408c      	lsls	r4, r1
 8001442:	4643      	mov	r3, r8
 8001444:	4310      	orrs	r0, r2
 8001446:	4588      	cmp	r8, r1
 8001448:	dd00      	ble.n	800144c <__aeabi_dsub+0xdc>
 800144a:	e136      	b.n	80016ba <__aeabi_dsub+0x34a>
 800144c:	1ac9      	subs	r1, r1, r3
 800144e:	1c4b      	adds	r3, r1, #1
 8001450:	2b1f      	cmp	r3, #31
 8001452:	dd00      	ble.n	8001456 <__aeabi_dsub+0xe6>
 8001454:	e0ea      	b.n	800162c <__aeabi_dsub+0x2bc>
 8001456:	2220      	movs	r2, #32
 8001458:	0026      	movs	r6, r4
 800145a:	1ad2      	subs	r2, r2, r3
 800145c:	0001      	movs	r1, r0
 800145e:	4094      	lsls	r4, r2
 8001460:	40de      	lsrs	r6, r3
 8001462:	40d8      	lsrs	r0, r3
 8001464:	2300      	movs	r3, #0
 8001466:	4091      	lsls	r1, r2
 8001468:	1e62      	subs	r2, r4, #1
 800146a:	4194      	sbcs	r4, r2
 800146c:	4681      	mov	r9, r0
 800146e:	4698      	mov	r8, r3
 8001470:	4331      	orrs	r1, r6
 8001472:	430c      	orrs	r4, r1
 8001474:	0763      	lsls	r3, r4, #29
 8001476:	d009      	beq.n	800148c <__aeabi_dsub+0x11c>
 8001478:	230f      	movs	r3, #15
 800147a:	4023      	ands	r3, r4
 800147c:	2b04      	cmp	r3, #4
 800147e:	d005      	beq.n	800148c <__aeabi_dsub+0x11c>
 8001480:	1d23      	adds	r3, r4, #4
 8001482:	42a3      	cmp	r3, r4
 8001484:	41a4      	sbcs	r4, r4
 8001486:	4264      	negs	r4, r4
 8001488:	44a1      	add	r9, r4
 800148a:	001c      	movs	r4, r3
 800148c:	464b      	mov	r3, r9
 800148e:	021b      	lsls	r3, r3, #8
 8001490:	d400      	bmi.n	8001494 <__aeabi_dsub+0x124>
 8001492:	e0de      	b.n	8001652 <__aeabi_dsub+0x2e2>
 8001494:	4641      	mov	r1, r8
 8001496:	4b8c      	ldr	r3, [pc, #560]	; (80016c8 <__aeabi_dsub+0x358>)
 8001498:	3101      	adds	r1, #1
 800149a:	4299      	cmp	r1, r3
 800149c:	d100      	bne.n	80014a0 <__aeabi_dsub+0x130>
 800149e:	e0e7      	b.n	8001670 <__aeabi_dsub+0x300>
 80014a0:	464b      	mov	r3, r9
 80014a2:	488a      	ldr	r0, [pc, #552]	; (80016cc <__aeabi_dsub+0x35c>)
 80014a4:	08e4      	lsrs	r4, r4, #3
 80014a6:	4003      	ands	r3, r0
 80014a8:	0018      	movs	r0, r3
 80014aa:	0549      	lsls	r1, r1, #21
 80014ac:	075b      	lsls	r3, r3, #29
 80014ae:	0240      	lsls	r0, r0, #9
 80014b0:	4323      	orrs	r3, r4
 80014b2:	0d4a      	lsrs	r2, r1, #21
 80014b4:	0b04      	lsrs	r4, r0, #12
 80014b6:	0512      	lsls	r2, r2, #20
 80014b8:	07ed      	lsls	r5, r5, #31
 80014ba:	4322      	orrs	r2, r4
 80014bc:	432a      	orrs	r2, r5
 80014be:	0018      	movs	r0, r3
 80014c0:	0011      	movs	r1, r2
 80014c2:	bcf0      	pop	{r4, r5, r6, r7}
 80014c4:	46bb      	mov	fp, r7
 80014c6:	46b2      	mov	sl, r6
 80014c8:	46a9      	mov	r9, r5
 80014ca:	46a0      	mov	r8, r4
 80014cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014ce:	4642      	mov	r2, r8
 80014d0:	1a12      	subs	r2, r2, r0
 80014d2:	2a00      	cmp	r2, #0
 80014d4:	dd52      	ble.n	800157c <__aeabi_dsub+0x20c>
 80014d6:	2800      	cmp	r0, #0
 80014d8:	d100      	bne.n	80014dc <__aeabi_dsub+0x16c>
 80014da:	e09c      	b.n	8001616 <__aeabi_dsub+0x2a6>
 80014dc:	45a0      	cmp	r8, r4
 80014de:	d100      	bne.n	80014e2 <__aeabi_dsub+0x172>
 80014e0:	e0ca      	b.n	8001678 <__aeabi_dsub+0x308>
 80014e2:	2080      	movs	r0, #128	; 0x80
 80014e4:	0400      	lsls	r0, r0, #16
 80014e6:	4301      	orrs	r1, r0
 80014e8:	2a38      	cmp	r2, #56	; 0x38
 80014ea:	dd00      	ble.n	80014ee <__aeabi_dsub+0x17e>
 80014ec:	e149      	b.n	8001782 <__aeabi_dsub+0x412>
 80014ee:	2a1f      	cmp	r2, #31
 80014f0:	dc00      	bgt.n	80014f4 <__aeabi_dsub+0x184>
 80014f2:	e197      	b.n	8001824 <__aeabi_dsub+0x4b4>
 80014f4:	0010      	movs	r0, r2
 80014f6:	000e      	movs	r6, r1
 80014f8:	3820      	subs	r0, #32
 80014fa:	40c6      	lsrs	r6, r0
 80014fc:	2a20      	cmp	r2, #32
 80014fe:	d004      	beq.n	800150a <__aeabi_dsub+0x19a>
 8001500:	2040      	movs	r0, #64	; 0x40
 8001502:	1a82      	subs	r2, r0, r2
 8001504:	4091      	lsls	r1, r2
 8001506:	430f      	orrs	r7, r1
 8001508:	46b9      	mov	r9, r7
 800150a:	464c      	mov	r4, r9
 800150c:	1e62      	subs	r2, r4, #1
 800150e:	4194      	sbcs	r4, r2
 8001510:	4334      	orrs	r4, r6
 8001512:	e13a      	b.n	800178a <__aeabi_dsub+0x41a>
 8001514:	000a      	movs	r2, r1
 8001516:	433a      	orrs	r2, r7
 8001518:	d028      	beq.n	800156c <__aeabi_dsub+0x1fc>
 800151a:	46b3      	mov	fp, r6
 800151c:	42b5      	cmp	r5, r6
 800151e:	d02b      	beq.n	8001578 <__aeabi_dsub+0x208>
 8001520:	4a6b      	ldr	r2, [pc, #428]	; (80016d0 <__aeabi_dsub+0x360>)
 8001522:	4442      	add	r2, r8
 8001524:	2a00      	cmp	r2, #0
 8001526:	d05d      	beq.n	80015e4 <__aeabi_dsub+0x274>
 8001528:	4642      	mov	r2, r8
 800152a:	4644      	mov	r4, r8
 800152c:	1a82      	subs	r2, r0, r2
 800152e:	2c00      	cmp	r4, #0
 8001530:	d000      	beq.n	8001534 <__aeabi_dsub+0x1c4>
 8001532:	e0f5      	b.n	8001720 <__aeabi_dsub+0x3b0>
 8001534:	4665      	mov	r5, ip
 8001536:	431d      	orrs	r5, r3
 8001538:	d100      	bne.n	800153c <__aeabi_dsub+0x1cc>
 800153a:	e19c      	b.n	8001876 <__aeabi_dsub+0x506>
 800153c:	1e55      	subs	r5, r2, #1
 800153e:	2a01      	cmp	r2, #1
 8001540:	d100      	bne.n	8001544 <__aeabi_dsub+0x1d4>
 8001542:	e1fb      	b.n	800193c <__aeabi_dsub+0x5cc>
 8001544:	4c60      	ldr	r4, [pc, #384]	; (80016c8 <__aeabi_dsub+0x358>)
 8001546:	42a2      	cmp	r2, r4
 8001548:	d100      	bne.n	800154c <__aeabi_dsub+0x1dc>
 800154a:	e1bd      	b.n	80018c8 <__aeabi_dsub+0x558>
 800154c:	002a      	movs	r2, r5
 800154e:	e0f0      	b.n	8001732 <__aeabi_dsub+0x3c2>
 8001550:	0008      	movs	r0, r1
 8001552:	4338      	orrs	r0, r7
 8001554:	d100      	bne.n	8001558 <__aeabi_dsub+0x1e8>
 8001556:	e0c3      	b.n	80016e0 <__aeabi_dsub+0x370>
 8001558:	1e50      	subs	r0, r2, #1
 800155a:	2a01      	cmp	r2, #1
 800155c:	d100      	bne.n	8001560 <__aeabi_dsub+0x1f0>
 800155e:	e1a8      	b.n	80018b2 <__aeabi_dsub+0x542>
 8001560:	4c59      	ldr	r4, [pc, #356]	; (80016c8 <__aeabi_dsub+0x358>)
 8001562:	42a2      	cmp	r2, r4
 8001564:	d100      	bne.n	8001568 <__aeabi_dsub+0x1f8>
 8001566:	e087      	b.n	8001678 <__aeabi_dsub+0x308>
 8001568:	0002      	movs	r2, r0
 800156a:	e736      	b.n	80013da <__aeabi_dsub+0x6a>
 800156c:	2201      	movs	r2, #1
 800156e:	4056      	eors	r6, r2
 8001570:	46b3      	mov	fp, r6
 8001572:	42b5      	cmp	r5, r6
 8001574:	d000      	beq.n	8001578 <__aeabi_dsub+0x208>
 8001576:	e721      	b.n	80013bc <__aeabi_dsub+0x4c>
 8001578:	4a55      	ldr	r2, [pc, #340]	; (80016d0 <__aeabi_dsub+0x360>)
 800157a:	4442      	add	r2, r8
 800157c:	2a00      	cmp	r2, #0
 800157e:	d100      	bne.n	8001582 <__aeabi_dsub+0x212>
 8001580:	e0b5      	b.n	80016ee <__aeabi_dsub+0x37e>
 8001582:	4642      	mov	r2, r8
 8001584:	4644      	mov	r4, r8
 8001586:	1a82      	subs	r2, r0, r2
 8001588:	2c00      	cmp	r4, #0
 800158a:	d100      	bne.n	800158e <__aeabi_dsub+0x21e>
 800158c:	e138      	b.n	8001800 <__aeabi_dsub+0x490>
 800158e:	4e4e      	ldr	r6, [pc, #312]	; (80016c8 <__aeabi_dsub+0x358>)
 8001590:	42b0      	cmp	r0, r6
 8001592:	d100      	bne.n	8001596 <__aeabi_dsub+0x226>
 8001594:	e1de      	b.n	8001954 <__aeabi_dsub+0x5e4>
 8001596:	2680      	movs	r6, #128	; 0x80
 8001598:	4664      	mov	r4, ip
 800159a:	0436      	lsls	r6, r6, #16
 800159c:	4334      	orrs	r4, r6
 800159e:	46a4      	mov	ip, r4
 80015a0:	2a38      	cmp	r2, #56	; 0x38
 80015a2:	dd00      	ble.n	80015a6 <__aeabi_dsub+0x236>
 80015a4:	e196      	b.n	80018d4 <__aeabi_dsub+0x564>
 80015a6:	2a1f      	cmp	r2, #31
 80015a8:	dd00      	ble.n	80015ac <__aeabi_dsub+0x23c>
 80015aa:	e224      	b.n	80019f6 <__aeabi_dsub+0x686>
 80015ac:	2620      	movs	r6, #32
 80015ae:	1ab4      	subs	r4, r6, r2
 80015b0:	46a2      	mov	sl, r4
 80015b2:	4664      	mov	r4, ip
 80015b4:	4656      	mov	r6, sl
 80015b6:	40b4      	lsls	r4, r6
 80015b8:	46a1      	mov	r9, r4
 80015ba:	001c      	movs	r4, r3
 80015bc:	464e      	mov	r6, r9
 80015be:	40d4      	lsrs	r4, r2
 80015c0:	4326      	orrs	r6, r4
 80015c2:	0034      	movs	r4, r6
 80015c4:	4656      	mov	r6, sl
 80015c6:	40b3      	lsls	r3, r6
 80015c8:	1e5e      	subs	r6, r3, #1
 80015ca:	41b3      	sbcs	r3, r6
 80015cc:	431c      	orrs	r4, r3
 80015ce:	4663      	mov	r3, ip
 80015d0:	40d3      	lsrs	r3, r2
 80015d2:	18c9      	adds	r1, r1, r3
 80015d4:	19e4      	adds	r4, r4, r7
 80015d6:	42bc      	cmp	r4, r7
 80015d8:	41bf      	sbcs	r7, r7
 80015da:	427f      	negs	r7, r7
 80015dc:	46b9      	mov	r9, r7
 80015de:	4680      	mov	r8, r0
 80015e0:	4489      	add	r9, r1
 80015e2:	e0d8      	b.n	8001796 <__aeabi_dsub+0x426>
 80015e4:	4640      	mov	r0, r8
 80015e6:	4c3b      	ldr	r4, [pc, #236]	; (80016d4 <__aeabi_dsub+0x364>)
 80015e8:	3001      	adds	r0, #1
 80015ea:	4220      	tst	r0, r4
 80015ec:	d000      	beq.n	80015f0 <__aeabi_dsub+0x280>
 80015ee:	e0b4      	b.n	800175a <__aeabi_dsub+0x3ea>
 80015f0:	4640      	mov	r0, r8
 80015f2:	2800      	cmp	r0, #0
 80015f4:	d000      	beq.n	80015f8 <__aeabi_dsub+0x288>
 80015f6:	e144      	b.n	8001882 <__aeabi_dsub+0x512>
 80015f8:	4660      	mov	r0, ip
 80015fa:	4318      	orrs	r0, r3
 80015fc:	d100      	bne.n	8001600 <__aeabi_dsub+0x290>
 80015fe:	e190      	b.n	8001922 <__aeabi_dsub+0x5b2>
 8001600:	0008      	movs	r0, r1
 8001602:	4338      	orrs	r0, r7
 8001604:	d000      	beq.n	8001608 <__aeabi_dsub+0x298>
 8001606:	e1aa      	b.n	800195e <__aeabi_dsub+0x5ee>
 8001608:	4661      	mov	r1, ip
 800160a:	08db      	lsrs	r3, r3, #3
 800160c:	0749      	lsls	r1, r1, #29
 800160e:	430b      	orrs	r3, r1
 8001610:	4661      	mov	r1, ip
 8001612:	08cc      	lsrs	r4, r1, #3
 8001614:	e027      	b.n	8001666 <__aeabi_dsub+0x2f6>
 8001616:	0008      	movs	r0, r1
 8001618:	4338      	orrs	r0, r7
 800161a:	d061      	beq.n	80016e0 <__aeabi_dsub+0x370>
 800161c:	1e50      	subs	r0, r2, #1
 800161e:	2a01      	cmp	r2, #1
 8001620:	d100      	bne.n	8001624 <__aeabi_dsub+0x2b4>
 8001622:	e139      	b.n	8001898 <__aeabi_dsub+0x528>
 8001624:	42a2      	cmp	r2, r4
 8001626:	d027      	beq.n	8001678 <__aeabi_dsub+0x308>
 8001628:	0002      	movs	r2, r0
 800162a:	e75d      	b.n	80014e8 <__aeabi_dsub+0x178>
 800162c:	0002      	movs	r2, r0
 800162e:	391f      	subs	r1, #31
 8001630:	40ca      	lsrs	r2, r1
 8001632:	0011      	movs	r1, r2
 8001634:	2b20      	cmp	r3, #32
 8001636:	d003      	beq.n	8001640 <__aeabi_dsub+0x2d0>
 8001638:	2240      	movs	r2, #64	; 0x40
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	4098      	lsls	r0, r3
 800163e:	4304      	orrs	r4, r0
 8001640:	1e63      	subs	r3, r4, #1
 8001642:	419c      	sbcs	r4, r3
 8001644:	2300      	movs	r3, #0
 8001646:	4699      	mov	r9, r3
 8001648:	4698      	mov	r8, r3
 800164a:	430c      	orrs	r4, r1
 800164c:	0763      	lsls	r3, r4, #29
 800164e:	d000      	beq.n	8001652 <__aeabi_dsub+0x2e2>
 8001650:	e712      	b.n	8001478 <__aeabi_dsub+0x108>
 8001652:	464b      	mov	r3, r9
 8001654:	464a      	mov	r2, r9
 8001656:	08e4      	lsrs	r4, r4, #3
 8001658:	075b      	lsls	r3, r3, #29
 800165a:	4323      	orrs	r3, r4
 800165c:	08d4      	lsrs	r4, r2, #3
 800165e:	4642      	mov	r2, r8
 8001660:	4919      	ldr	r1, [pc, #100]	; (80016c8 <__aeabi_dsub+0x358>)
 8001662:	428a      	cmp	r2, r1
 8001664:	d00e      	beq.n	8001684 <__aeabi_dsub+0x314>
 8001666:	0324      	lsls	r4, r4, #12
 8001668:	0552      	lsls	r2, r2, #21
 800166a:	0b24      	lsrs	r4, r4, #12
 800166c:	0d52      	lsrs	r2, r2, #21
 800166e:	e722      	b.n	80014b6 <__aeabi_dsub+0x146>
 8001670:	000a      	movs	r2, r1
 8001672:	2400      	movs	r4, #0
 8001674:	2300      	movs	r3, #0
 8001676:	e71e      	b.n	80014b6 <__aeabi_dsub+0x146>
 8001678:	08db      	lsrs	r3, r3, #3
 800167a:	4662      	mov	r2, ip
 800167c:	0752      	lsls	r2, r2, #29
 800167e:	4313      	orrs	r3, r2
 8001680:	4662      	mov	r2, ip
 8001682:	08d4      	lsrs	r4, r2, #3
 8001684:	001a      	movs	r2, r3
 8001686:	4322      	orrs	r2, r4
 8001688:	d100      	bne.n	800168c <__aeabi_dsub+0x31c>
 800168a:	e1fc      	b.n	8001a86 <__aeabi_dsub+0x716>
 800168c:	2280      	movs	r2, #128	; 0x80
 800168e:	0312      	lsls	r2, r2, #12
 8001690:	4314      	orrs	r4, r2
 8001692:	0324      	lsls	r4, r4, #12
 8001694:	4a0c      	ldr	r2, [pc, #48]	; (80016c8 <__aeabi_dsub+0x358>)
 8001696:	0b24      	lsrs	r4, r4, #12
 8001698:	e70d      	b.n	80014b6 <__aeabi_dsub+0x146>
 800169a:	0020      	movs	r0, r4
 800169c:	f000 fafa 	bl	8001c94 <__clzsi2>
 80016a0:	0001      	movs	r1, r0
 80016a2:	3118      	adds	r1, #24
 80016a4:	291f      	cmp	r1, #31
 80016a6:	dc00      	bgt.n	80016aa <__aeabi_dsub+0x33a>
 80016a8:	e6c4      	b.n	8001434 <__aeabi_dsub+0xc4>
 80016aa:	3808      	subs	r0, #8
 80016ac:	4084      	lsls	r4, r0
 80016ae:	4643      	mov	r3, r8
 80016b0:	0020      	movs	r0, r4
 80016b2:	2400      	movs	r4, #0
 80016b4:	4588      	cmp	r8, r1
 80016b6:	dc00      	bgt.n	80016ba <__aeabi_dsub+0x34a>
 80016b8:	e6c8      	b.n	800144c <__aeabi_dsub+0xdc>
 80016ba:	4a04      	ldr	r2, [pc, #16]	; (80016cc <__aeabi_dsub+0x35c>)
 80016bc:	1a5b      	subs	r3, r3, r1
 80016be:	4010      	ands	r0, r2
 80016c0:	4698      	mov	r8, r3
 80016c2:	4681      	mov	r9, r0
 80016c4:	e6d6      	b.n	8001474 <__aeabi_dsub+0x104>
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	000007ff 	.word	0x000007ff
 80016cc:	ff7fffff 	.word	0xff7fffff
 80016d0:	fffff801 	.word	0xfffff801
 80016d4:	000007fe 	.word	0x000007fe
 80016d8:	430f      	orrs	r7, r1
 80016da:	1e7a      	subs	r2, r7, #1
 80016dc:	4197      	sbcs	r7, r2
 80016de:	e691      	b.n	8001404 <__aeabi_dsub+0x94>
 80016e0:	4661      	mov	r1, ip
 80016e2:	08db      	lsrs	r3, r3, #3
 80016e4:	0749      	lsls	r1, r1, #29
 80016e6:	430b      	orrs	r3, r1
 80016e8:	4661      	mov	r1, ip
 80016ea:	08cc      	lsrs	r4, r1, #3
 80016ec:	e7b8      	b.n	8001660 <__aeabi_dsub+0x2f0>
 80016ee:	4640      	mov	r0, r8
 80016f0:	4cd3      	ldr	r4, [pc, #844]	; (8001a40 <__aeabi_dsub+0x6d0>)
 80016f2:	3001      	adds	r0, #1
 80016f4:	4220      	tst	r0, r4
 80016f6:	d000      	beq.n	80016fa <__aeabi_dsub+0x38a>
 80016f8:	e0a2      	b.n	8001840 <__aeabi_dsub+0x4d0>
 80016fa:	4640      	mov	r0, r8
 80016fc:	2800      	cmp	r0, #0
 80016fe:	d000      	beq.n	8001702 <__aeabi_dsub+0x392>
 8001700:	e101      	b.n	8001906 <__aeabi_dsub+0x596>
 8001702:	4660      	mov	r0, ip
 8001704:	4318      	orrs	r0, r3
 8001706:	d100      	bne.n	800170a <__aeabi_dsub+0x39a>
 8001708:	e15e      	b.n	80019c8 <__aeabi_dsub+0x658>
 800170a:	0008      	movs	r0, r1
 800170c:	4338      	orrs	r0, r7
 800170e:	d000      	beq.n	8001712 <__aeabi_dsub+0x3a2>
 8001710:	e15f      	b.n	80019d2 <__aeabi_dsub+0x662>
 8001712:	4661      	mov	r1, ip
 8001714:	08db      	lsrs	r3, r3, #3
 8001716:	0749      	lsls	r1, r1, #29
 8001718:	430b      	orrs	r3, r1
 800171a:	4661      	mov	r1, ip
 800171c:	08cc      	lsrs	r4, r1, #3
 800171e:	e7a2      	b.n	8001666 <__aeabi_dsub+0x2f6>
 8001720:	4dc8      	ldr	r5, [pc, #800]	; (8001a44 <__aeabi_dsub+0x6d4>)
 8001722:	42a8      	cmp	r0, r5
 8001724:	d100      	bne.n	8001728 <__aeabi_dsub+0x3b8>
 8001726:	e0cf      	b.n	80018c8 <__aeabi_dsub+0x558>
 8001728:	2580      	movs	r5, #128	; 0x80
 800172a:	4664      	mov	r4, ip
 800172c:	042d      	lsls	r5, r5, #16
 800172e:	432c      	orrs	r4, r5
 8001730:	46a4      	mov	ip, r4
 8001732:	2a38      	cmp	r2, #56	; 0x38
 8001734:	dc56      	bgt.n	80017e4 <__aeabi_dsub+0x474>
 8001736:	2a1f      	cmp	r2, #31
 8001738:	dd00      	ble.n	800173c <__aeabi_dsub+0x3cc>
 800173a:	e0d1      	b.n	80018e0 <__aeabi_dsub+0x570>
 800173c:	2520      	movs	r5, #32
 800173e:	001e      	movs	r6, r3
 8001740:	1aad      	subs	r5, r5, r2
 8001742:	4664      	mov	r4, ip
 8001744:	40ab      	lsls	r3, r5
 8001746:	40ac      	lsls	r4, r5
 8001748:	40d6      	lsrs	r6, r2
 800174a:	1e5d      	subs	r5, r3, #1
 800174c:	41ab      	sbcs	r3, r5
 800174e:	4334      	orrs	r4, r6
 8001750:	4323      	orrs	r3, r4
 8001752:	4664      	mov	r4, ip
 8001754:	40d4      	lsrs	r4, r2
 8001756:	1b09      	subs	r1, r1, r4
 8001758:	e049      	b.n	80017ee <__aeabi_dsub+0x47e>
 800175a:	4660      	mov	r0, ip
 800175c:	1bdc      	subs	r4, r3, r7
 800175e:	1a46      	subs	r6, r0, r1
 8001760:	42a3      	cmp	r3, r4
 8001762:	4180      	sbcs	r0, r0
 8001764:	4240      	negs	r0, r0
 8001766:	4681      	mov	r9, r0
 8001768:	0030      	movs	r0, r6
 800176a:	464e      	mov	r6, r9
 800176c:	1b80      	subs	r0, r0, r6
 800176e:	4681      	mov	r9, r0
 8001770:	0200      	lsls	r0, r0, #8
 8001772:	d476      	bmi.n	8001862 <__aeabi_dsub+0x4f2>
 8001774:	464b      	mov	r3, r9
 8001776:	4323      	orrs	r3, r4
 8001778:	d000      	beq.n	800177c <__aeabi_dsub+0x40c>
 800177a:	e652      	b.n	8001422 <__aeabi_dsub+0xb2>
 800177c:	2400      	movs	r4, #0
 800177e:	2500      	movs	r5, #0
 8001780:	e771      	b.n	8001666 <__aeabi_dsub+0x2f6>
 8001782:	4339      	orrs	r1, r7
 8001784:	000c      	movs	r4, r1
 8001786:	1e62      	subs	r2, r4, #1
 8001788:	4194      	sbcs	r4, r2
 800178a:	18e4      	adds	r4, r4, r3
 800178c:	429c      	cmp	r4, r3
 800178e:	419b      	sbcs	r3, r3
 8001790:	425b      	negs	r3, r3
 8001792:	4463      	add	r3, ip
 8001794:	4699      	mov	r9, r3
 8001796:	464b      	mov	r3, r9
 8001798:	021b      	lsls	r3, r3, #8
 800179a:	d400      	bmi.n	800179e <__aeabi_dsub+0x42e>
 800179c:	e756      	b.n	800164c <__aeabi_dsub+0x2dc>
 800179e:	2301      	movs	r3, #1
 80017a0:	469c      	mov	ip, r3
 80017a2:	4ba8      	ldr	r3, [pc, #672]	; (8001a44 <__aeabi_dsub+0x6d4>)
 80017a4:	44e0      	add	r8, ip
 80017a6:	4598      	cmp	r8, r3
 80017a8:	d038      	beq.n	800181c <__aeabi_dsub+0x4ac>
 80017aa:	464b      	mov	r3, r9
 80017ac:	48a6      	ldr	r0, [pc, #664]	; (8001a48 <__aeabi_dsub+0x6d8>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	4003      	ands	r3, r0
 80017b2:	0018      	movs	r0, r3
 80017b4:	0863      	lsrs	r3, r4, #1
 80017b6:	4014      	ands	r4, r2
 80017b8:	431c      	orrs	r4, r3
 80017ba:	07c3      	lsls	r3, r0, #31
 80017bc:	431c      	orrs	r4, r3
 80017be:	0843      	lsrs	r3, r0, #1
 80017c0:	4699      	mov	r9, r3
 80017c2:	e657      	b.n	8001474 <__aeabi_dsub+0x104>
 80017c4:	0010      	movs	r0, r2
 80017c6:	000e      	movs	r6, r1
 80017c8:	3820      	subs	r0, #32
 80017ca:	40c6      	lsrs	r6, r0
 80017cc:	2a20      	cmp	r2, #32
 80017ce:	d004      	beq.n	80017da <__aeabi_dsub+0x46a>
 80017d0:	2040      	movs	r0, #64	; 0x40
 80017d2:	1a82      	subs	r2, r0, r2
 80017d4:	4091      	lsls	r1, r2
 80017d6:	430f      	orrs	r7, r1
 80017d8:	46b9      	mov	r9, r7
 80017da:	464f      	mov	r7, r9
 80017dc:	1e7a      	subs	r2, r7, #1
 80017de:	4197      	sbcs	r7, r2
 80017e0:	4337      	orrs	r7, r6
 80017e2:	e60f      	b.n	8001404 <__aeabi_dsub+0x94>
 80017e4:	4662      	mov	r2, ip
 80017e6:	431a      	orrs	r2, r3
 80017e8:	0013      	movs	r3, r2
 80017ea:	1e5a      	subs	r2, r3, #1
 80017ec:	4193      	sbcs	r3, r2
 80017ee:	1afc      	subs	r4, r7, r3
 80017f0:	42a7      	cmp	r7, r4
 80017f2:	41bf      	sbcs	r7, r7
 80017f4:	427f      	negs	r7, r7
 80017f6:	1bcb      	subs	r3, r1, r7
 80017f8:	4699      	mov	r9, r3
 80017fa:	465d      	mov	r5, fp
 80017fc:	4680      	mov	r8, r0
 80017fe:	e608      	b.n	8001412 <__aeabi_dsub+0xa2>
 8001800:	4666      	mov	r6, ip
 8001802:	431e      	orrs	r6, r3
 8001804:	d100      	bne.n	8001808 <__aeabi_dsub+0x498>
 8001806:	e0be      	b.n	8001986 <__aeabi_dsub+0x616>
 8001808:	1e56      	subs	r6, r2, #1
 800180a:	2a01      	cmp	r2, #1
 800180c:	d100      	bne.n	8001810 <__aeabi_dsub+0x4a0>
 800180e:	e109      	b.n	8001a24 <__aeabi_dsub+0x6b4>
 8001810:	4c8c      	ldr	r4, [pc, #560]	; (8001a44 <__aeabi_dsub+0x6d4>)
 8001812:	42a2      	cmp	r2, r4
 8001814:	d100      	bne.n	8001818 <__aeabi_dsub+0x4a8>
 8001816:	e119      	b.n	8001a4c <__aeabi_dsub+0x6dc>
 8001818:	0032      	movs	r2, r6
 800181a:	e6c1      	b.n	80015a0 <__aeabi_dsub+0x230>
 800181c:	4642      	mov	r2, r8
 800181e:	2400      	movs	r4, #0
 8001820:	2300      	movs	r3, #0
 8001822:	e648      	b.n	80014b6 <__aeabi_dsub+0x146>
 8001824:	2020      	movs	r0, #32
 8001826:	000c      	movs	r4, r1
 8001828:	1a80      	subs	r0, r0, r2
 800182a:	003e      	movs	r6, r7
 800182c:	4087      	lsls	r7, r0
 800182e:	4084      	lsls	r4, r0
 8001830:	40d6      	lsrs	r6, r2
 8001832:	1e78      	subs	r0, r7, #1
 8001834:	4187      	sbcs	r7, r0
 8001836:	40d1      	lsrs	r1, r2
 8001838:	4334      	orrs	r4, r6
 800183a:	433c      	orrs	r4, r7
 800183c:	448c      	add	ip, r1
 800183e:	e7a4      	b.n	800178a <__aeabi_dsub+0x41a>
 8001840:	4a80      	ldr	r2, [pc, #512]	; (8001a44 <__aeabi_dsub+0x6d4>)
 8001842:	4290      	cmp	r0, r2
 8001844:	d100      	bne.n	8001848 <__aeabi_dsub+0x4d8>
 8001846:	e0e9      	b.n	8001a1c <__aeabi_dsub+0x6ac>
 8001848:	19df      	adds	r7, r3, r7
 800184a:	429f      	cmp	r7, r3
 800184c:	419b      	sbcs	r3, r3
 800184e:	4461      	add	r1, ip
 8001850:	425b      	negs	r3, r3
 8001852:	18c9      	adds	r1, r1, r3
 8001854:	07cc      	lsls	r4, r1, #31
 8001856:	087f      	lsrs	r7, r7, #1
 8001858:	084b      	lsrs	r3, r1, #1
 800185a:	4699      	mov	r9, r3
 800185c:	4680      	mov	r8, r0
 800185e:	433c      	orrs	r4, r7
 8001860:	e6f4      	b.n	800164c <__aeabi_dsub+0x2dc>
 8001862:	1afc      	subs	r4, r7, r3
 8001864:	42a7      	cmp	r7, r4
 8001866:	41bf      	sbcs	r7, r7
 8001868:	4663      	mov	r3, ip
 800186a:	427f      	negs	r7, r7
 800186c:	1ac9      	subs	r1, r1, r3
 800186e:	1bcb      	subs	r3, r1, r7
 8001870:	4699      	mov	r9, r3
 8001872:	465d      	mov	r5, fp
 8001874:	e5d5      	b.n	8001422 <__aeabi_dsub+0xb2>
 8001876:	08ff      	lsrs	r7, r7, #3
 8001878:	074b      	lsls	r3, r1, #29
 800187a:	465d      	mov	r5, fp
 800187c:	433b      	orrs	r3, r7
 800187e:	08cc      	lsrs	r4, r1, #3
 8001880:	e6ee      	b.n	8001660 <__aeabi_dsub+0x2f0>
 8001882:	4662      	mov	r2, ip
 8001884:	431a      	orrs	r2, r3
 8001886:	d000      	beq.n	800188a <__aeabi_dsub+0x51a>
 8001888:	e082      	b.n	8001990 <__aeabi_dsub+0x620>
 800188a:	000b      	movs	r3, r1
 800188c:	433b      	orrs	r3, r7
 800188e:	d11b      	bne.n	80018c8 <__aeabi_dsub+0x558>
 8001890:	2480      	movs	r4, #128	; 0x80
 8001892:	2500      	movs	r5, #0
 8001894:	0324      	lsls	r4, r4, #12
 8001896:	e6f9      	b.n	800168c <__aeabi_dsub+0x31c>
 8001898:	19dc      	adds	r4, r3, r7
 800189a:	429c      	cmp	r4, r3
 800189c:	419b      	sbcs	r3, r3
 800189e:	4461      	add	r1, ip
 80018a0:	4689      	mov	r9, r1
 80018a2:	425b      	negs	r3, r3
 80018a4:	4499      	add	r9, r3
 80018a6:	464b      	mov	r3, r9
 80018a8:	021b      	lsls	r3, r3, #8
 80018aa:	d444      	bmi.n	8001936 <__aeabi_dsub+0x5c6>
 80018ac:	2301      	movs	r3, #1
 80018ae:	4698      	mov	r8, r3
 80018b0:	e6cc      	b.n	800164c <__aeabi_dsub+0x2dc>
 80018b2:	1bdc      	subs	r4, r3, r7
 80018b4:	4662      	mov	r2, ip
 80018b6:	42a3      	cmp	r3, r4
 80018b8:	419b      	sbcs	r3, r3
 80018ba:	1a51      	subs	r1, r2, r1
 80018bc:	425b      	negs	r3, r3
 80018be:	1acb      	subs	r3, r1, r3
 80018c0:	4699      	mov	r9, r3
 80018c2:	2301      	movs	r3, #1
 80018c4:	4698      	mov	r8, r3
 80018c6:	e5a4      	b.n	8001412 <__aeabi_dsub+0xa2>
 80018c8:	08ff      	lsrs	r7, r7, #3
 80018ca:	074b      	lsls	r3, r1, #29
 80018cc:	465d      	mov	r5, fp
 80018ce:	433b      	orrs	r3, r7
 80018d0:	08cc      	lsrs	r4, r1, #3
 80018d2:	e6d7      	b.n	8001684 <__aeabi_dsub+0x314>
 80018d4:	4662      	mov	r2, ip
 80018d6:	431a      	orrs	r2, r3
 80018d8:	0014      	movs	r4, r2
 80018da:	1e63      	subs	r3, r4, #1
 80018dc:	419c      	sbcs	r4, r3
 80018de:	e679      	b.n	80015d4 <__aeabi_dsub+0x264>
 80018e0:	0015      	movs	r5, r2
 80018e2:	4664      	mov	r4, ip
 80018e4:	3d20      	subs	r5, #32
 80018e6:	40ec      	lsrs	r4, r5
 80018e8:	46a0      	mov	r8, r4
 80018ea:	2a20      	cmp	r2, #32
 80018ec:	d005      	beq.n	80018fa <__aeabi_dsub+0x58a>
 80018ee:	2540      	movs	r5, #64	; 0x40
 80018f0:	4664      	mov	r4, ip
 80018f2:	1aaa      	subs	r2, r5, r2
 80018f4:	4094      	lsls	r4, r2
 80018f6:	4323      	orrs	r3, r4
 80018f8:	469a      	mov	sl, r3
 80018fa:	4654      	mov	r4, sl
 80018fc:	1e63      	subs	r3, r4, #1
 80018fe:	419c      	sbcs	r4, r3
 8001900:	4643      	mov	r3, r8
 8001902:	4323      	orrs	r3, r4
 8001904:	e773      	b.n	80017ee <__aeabi_dsub+0x47e>
 8001906:	4662      	mov	r2, ip
 8001908:	431a      	orrs	r2, r3
 800190a:	d023      	beq.n	8001954 <__aeabi_dsub+0x5e4>
 800190c:	000a      	movs	r2, r1
 800190e:	433a      	orrs	r2, r7
 8001910:	d000      	beq.n	8001914 <__aeabi_dsub+0x5a4>
 8001912:	e0a0      	b.n	8001a56 <__aeabi_dsub+0x6e6>
 8001914:	4662      	mov	r2, ip
 8001916:	08db      	lsrs	r3, r3, #3
 8001918:	0752      	lsls	r2, r2, #29
 800191a:	4313      	orrs	r3, r2
 800191c:	4662      	mov	r2, ip
 800191e:	08d4      	lsrs	r4, r2, #3
 8001920:	e6b0      	b.n	8001684 <__aeabi_dsub+0x314>
 8001922:	000b      	movs	r3, r1
 8001924:	433b      	orrs	r3, r7
 8001926:	d100      	bne.n	800192a <__aeabi_dsub+0x5ba>
 8001928:	e728      	b.n	800177c <__aeabi_dsub+0x40c>
 800192a:	08ff      	lsrs	r7, r7, #3
 800192c:	074b      	lsls	r3, r1, #29
 800192e:	465d      	mov	r5, fp
 8001930:	433b      	orrs	r3, r7
 8001932:	08cc      	lsrs	r4, r1, #3
 8001934:	e697      	b.n	8001666 <__aeabi_dsub+0x2f6>
 8001936:	2302      	movs	r3, #2
 8001938:	4698      	mov	r8, r3
 800193a:	e736      	b.n	80017aa <__aeabi_dsub+0x43a>
 800193c:	1afc      	subs	r4, r7, r3
 800193e:	42a7      	cmp	r7, r4
 8001940:	41bf      	sbcs	r7, r7
 8001942:	4663      	mov	r3, ip
 8001944:	427f      	negs	r7, r7
 8001946:	1ac9      	subs	r1, r1, r3
 8001948:	1bcb      	subs	r3, r1, r7
 800194a:	4699      	mov	r9, r3
 800194c:	2301      	movs	r3, #1
 800194e:	465d      	mov	r5, fp
 8001950:	4698      	mov	r8, r3
 8001952:	e55e      	b.n	8001412 <__aeabi_dsub+0xa2>
 8001954:	074b      	lsls	r3, r1, #29
 8001956:	08ff      	lsrs	r7, r7, #3
 8001958:	433b      	orrs	r3, r7
 800195a:	08cc      	lsrs	r4, r1, #3
 800195c:	e692      	b.n	8001684 <__aeabi_dsub+0x314>
 800195e:	1bdc      	subs	r4, r3, r7
 8001960:	4660      	mov	r0, ip
 8001962:	42a3      	cmp	r3, r4
 8001964:	41b6      	sbcs	r6, r6
 8001966:	1a40      	subs	r0, r0, r1
 8001968:	4276      	negs	r6, r6
 800196a:	1b80      	subs	r0, r0, r6
 800196c:	4681      	mov	r9, r0
 800196e:	0200      	lsls	r0, r0, #8
 8001970:	d560      	bpl.n	8001a34 <__aeabi_dsub+0x6c4>
 8001972:	1afc      	subs	r4, r7, r3
 8001974:	42a7      	cmp	r7, r4
 8001976:	41bf      	sbcs	r7, r7
 8001978:	4663      	mov	r3, ip
 800197a:	427f      	negs	r7, r7
 800197c:	1ac9      	subs	r1, r1, r3
 800197e:	1bcb      	subs	r3, r1, r7
 8001980:	4699      	mov	r9, r3
 8001982:	465d      	mov	r5, fp
 8001984:	e576      	b.n	8001474 <__aeabi_dsub+0x104>
 8001986:	08ff      	lsrs	r7, r7, #3
 8001988:	074b      	lsls	r3, r1, #29
 800198a:	433b      	orrs	r3, r7
 800198c:	08cc      	lsrs	r4, r1, #3
 800198e:	e667      	b.n	8001660 <__aeabi_dsub+0x2f0>
 8001990:	000a      	movs	r2, r1
 8001992:	08db      	lsrs	r3, r3, #3
 8001994:	433a      	orrs	r2, r7
 8001996:	d100      	bne.n	800199a <__aeabi_dsub+0x62a>
 8001998:	e66f      	b.n	800167a <__aeabi_dsub+0x30a>
 800199a:	4662      	mov	r2, ip
 800199c:	0752      	lsls	r2, r2, #29
 800199e:	4313      	orrs	r3, r2
 80019a0:	4662      	mov	r2, ip
 80019a2:	08d4      	lsrs	r4, r2, #3
 80019a4:	2280      	movs	r2, #128	; 0x80
 80019a6:	0312      	lsls	r2, r2, #12
 80019a8:	4214      	tst	r4, r2
 80019aa:	d007      	beq.n	80019bc <__aeabi_dsub+0x64c>
 80019ac:	08c8      	lsrs	r0, r1, #3
 80019ae:	4210      	tst	r0, r2
 80019b0:	d104      	bne.n	80019bc <__aeabi_dsub+0x64c>
 80019b2:	465d      	mov	r5, fp
 80019b4:	0004      	movs	r4, r0
 80019b6:	08fb      	lsrs	r3, r7, #3
 80019b8:	0749      	lsls	r1, r1, #29
 80019ba:	430b      	orrs	r3, r1
 80019bc:	0f5a      	lsrs	r2, r3, #29
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	08db      	lsrs	r3, r3, #3
 80019c2:	0752      	lsls	r2, r2, #29
 80019c4:	4313      	orrs	r3, r2
 80019c6:	e65d      	b.n	8001684 <__aeabi_dsub+0x314>
 80019c8:	074b      	lsls	r3, r1, #29
 80019ca:	08ff      	lsrs	r7, r7, #3
 80019cc:	433b      	orrs	r3, r7
 80019ce:	08cc      	lsrs	r4, r1, #3
 80019d0:	e649      	b.n	8001666 <__aeabi_dsub+0x2f6>
 80019d2:	19dc      	adds	r4, r3, r7
 80019d4:	429c      	cmp	r4, r3
 80019d6:	419b      	sbcs	r3, r3
 80019d8:	4461      	add	r1, ip
 80019da:	4689      	mov	r9, r1
 80019dc:	425b      	negs	r3, r3
 80019de:	4499      	add	r9, r3
 80019e0:	464b      	mov	r3, r9
 80019e2:	021b      	lsls	r3, r3, #8
 80019e4:	d400      	bmi.n	80019e8 <__aeabi_dsub+0x678>
 80019e6:	e631      	b.n	800164c <__aeabi_dsub+0x2dc>
 80019e8:	464a      	mov	r2, r9
 80019ea:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <__aeabi_dsub+0x6d8>)
 80019ec:	401a      	ands	r2, r3
 80019ee:	2301      	movs	r3, #1
 80019f0:	4691      	mov	r9, r2
 80019f2:	4698      	mov	r8, r3
 80019f4:	e62a      	b.n	800164c <__aeabi_dsub+0x2dc>
 80019f6:	0016      	movs	r6, r2
 80019f8:	4664      	mov	r4, ip
 80019fa:	3e20      	subs	r6, #32
 80019fc:	40f4      	lsrs	r4, r6
 80019fe:	46a0      	mov	r8, r4
 8001a00:	2a20      	cmp	r2, #32
 8001a02:	d005      	beq.n	8001a10 <__aeabi_dsub+0x6a0>
 8001a04:	2640      	movs	r6, #64	; 0x40
 8001a06:	4664      	mov	r4, ip
 8001a08:	1ab2      	subs	r2, r6, r2
 8001a0a:	4094      	lsls	r4, r2
 8001a0c:	4323      	orrs	r3, r4
 8001a0e:	469a      	mov	sl, r3
 8001a10:	4654      	mov	r4, sl
 8001a12:	1e63      	subs	r3, r4, #1
 8001a14:	419c      	sbcs	r4, r3
 8001a16:	4643      	mov	r3, r8
 8001a18:	431c      	orrs	r4, r3
 8001a1a:	e5db      	b.n	80015d4 <__aeabi_dsub+0x264>
 8001a1c:	0002      	movs	r2, r0
 8001a1e:	2400      	movs	r4, #0
 8001a20:	2300      	movs	r3, #0
 8001a22:	e548      	b.n	80014b6 <__aeabi_dsub+0x146>
 8001a24:	19dc      	adds	r4, r3, r7
 8001a26:	42bc      	cmp	r4, r7
 8001a28:	41bf      	sbcs	r7, r7
 8001a2a:	4461      	add	r1, ip
 8001a2c:	4689      	mov	r9, r1
 8001a2e:	427f      	negs	r7, r7
 8001a30:	44b9      	add	r9, r7
 8001a32:	e738      	b.n	80018a6 <__aeabi_dsub+0x536>
 8001a34:	464b      	mov	r3, r9
 8001a36:	4323      	orrs	r3, r4
 8001a38:	d100      	bne.n	8001a3c <__aeabi_dsub+0x6cc>
 8001a3a:	e69f      	b.n	800177c <__aeabi_dsub+0x40c>
 8001a3c:	e606      	b.n	800164c <__aeabi_dsub+0x2dc>
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	000007fe 	.word	0x000007fe
 8001a44:	000007ff 	.word	0x000007ff
 8001a48:	ff7fffff 	.word	0xff7fffff
 8001a4c:	08ff      	lsrs	r7, r7, #3
 8001a4e:	074b      	lsls	r3, r1, #29
 8001a50:	433b      	orrs	r3, r7
 8001a52:	08cc      	lsrs	r4, r1, #3
 8001a54:	e616      	b.n	8001684 <__aeabi_dsub+0x314>
 8001a56:	4662      	mov	r2, ip
 8001a58:	08db      	lsrs	r3, r3, #3
 8001a5a:	0752      	lsls	r2, r2, #29
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	4662      	mov	r2, ip
 8001a60:	08d4      	lsrs	r4, r2, #3
 8001a62:	2280      	movs	r2, #128	; 0x80
 8001a64:	0312      	lsls	r2, r2, #12
 8001a66:	4214      	tst	r4, r2
 8001a68:	d007      	beq.n	8001a7a <__aeabi_dsub+0x70a>
 8001a6a:	08c8      	lsrs	r0, r1, #3
 8001a6c:	4210      	tst	r0, r2
 8001a6e:	d104      	bne.n	8001a7a <__aeabi_dsub+0x70a>
 8001a70:	465d      	mov	r5, fp
 8001a72:	0004      	movs	r4, r0
 8001a74:	08fb      	lsrs	r3, r7, #3
 8001a76:	0749      	lsls	r1, r1, #29
 8001a78:	430b      	orrs	r3, r1
 8001a7a:	0f5a      	lsrs	r2, r3, #29
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	0752      	lsls	r2, r2, #29
 8001a80:	08db      	lsrs	r3, r3, #3
 8001a82:	4313      	orrs	r3, r2
 8001a84:	e5fe      	b.n	8001684 <__aeabi_dsub+0x314>
 8001a86:	2300      	movs	r3, #0
 8001a88:	4a01      	ldr	r2, [pc, #4]	; (8001a90 <__aeabi_dsub+0x720>)
 8001a8a:	001c      	movs	r4, r3
 8001a8c:	e513      	b.n	80014b6 <__aeabi_dsub+0x146>
 8001a8e:	46c0      	nop			; (mov r8, r8)
 8001a90:	000007ff 	.word	0x000007ff

08001a94 <__aeabi_i2d>:
 8001a94:	b570      	push	{r4, r5, r6, lr}
 8001a96:	2800      	cmp	r0, #0
 8001a98:	d016      	beq.n	8001ac8 <__aeabi_i2d+0x34>
 8001a9a:	17c3      	asrs	r3, r0, #31
 8001a9c:	18c5      	adds	r5, r0, r3
 8001a9e:	405d      	eors	r5, r3
 8001aa0:	0fc4      	lsrs	r4, r0, #31
 8001aa2:	0028      	movs	r0, r5
 8001aa4:	f000 f8f6 	bl	8001c94 <__clzsi2>
 8001aa8:	4a11      	ldr	r2, [pc, #68]	; (8001af0 <__aeabi_i2d+0x5c>)
 8001aaa:	1a12      	subs	r2, r2, r0
 8001aac:	280a      	cmp	r0, #10
 8001aae:	dc16      	bgt.n	8001ade <__aeabi_i2d+0x4a>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	002e      	movs	r6, r5
 8001ab4:	3315      	adds	r3, #21
 8001ab6:	409e      	lsls	r6, r3
 8001ab8:	230b      	movs	r3, #11
 8001aba:	1a18      	subs	r0, r3, r0
 8001abc:	40c5      	lsrs	r5, r0
 8001abe:	0552      	lsls	r2, r2, #21
 8001ac0:	032d      	lsls	r5, r5, #12
 8001ac2:	0b2d      	lsrs	r5, r5, #12
 8001ac4:	0d53      	lsrs	r3, r2, #21
 8001ac6:	e003      	b.n	8001ad0 <__aeabi_i2d+0x3c>
 8001ac8:	2400      	movs	r4, #0
 8001aca:	2300      	movs	r3, #0
 8001acc:	2500      	movs	r5, #0
 8001ace:	2600      	movs	r6, #0
 8001ad0:	051b      	lsls	r3, r3, #20
 8001ad2:	432b      	orrs	r3, r5
 8001ad4:	07e4      	lsls	r4, r4, #31
 8001ad6:	4323      	orrs	r3, r4
 8001ad8:	0030      	movs	r0, r6
 8001ada:	0019      	movs	r1, r3
 8001adc:	bd70      	pop	{r4, r5, r6, pc}
 8001ade:	380b      	subs	r0, #11
 8001ae0:	4085      	lsls	r5, r0
 8001ae2:	0552      	lsls	r2, r2, #21
 8001ae4:	032d      	lsls	r5, r5, #12
 8001ae6:	2600      	movs	r6, #0
 8001ae8:	0b2d      	lsrs	r5, r5, #12
 8001aea:	0d53      	lsrs	r3, r2, #21
 8001aec:	e7f0      	b.n	8001ad0 <__aeabi_i2d+0x3c>
 8001aee:	46c0      	nop			; (mov r8, r8)
 8001af0:	0000041e 	.word	0x0000041e

08001af4 <__aeabi_f2d>:
 8001af4:	b570      	push	{r4, r5, r6, lr}
 8001af6:	0043      	lsls	r3, r0, #1
 8001af8:	0246      	lsls	r6, r0, #9
 8001afa:	0fc4      	lsrs	r4, r0, #31
 8001afc:	20fe      	movs	r0, #254	; 0xfe
 8001afe:	0e1b      	lsrs	r3, r3, #24
 8001b00:	1c59      	adds	r1, r3, #1
 8001b02:	0a75      	lsrs	r5, r6, #9
 8001b04:	4208      	tst	r0, r1
 8001b06:	d00c      	beq.n	8001b22 <__aeabi_f2d+0x2e>
 8001b08:	22e0      	movs	r2, #224	; 0xe0
 8001b0a:	0092      	lsls	r2, r2, #2
 8001b0c:	4694      	mov	ip, r2
 8001b0e:	076d      	lsls	r5, r5, #29
 8001b10:	0b36      	lsrs	r6, r6, #12
 8001b12:	4463      	add	r3, ip
 8001b14:	051b      	lsls	r3, r3, #20
 8001b16:	4333      	orrs	r3, r6
 8001b18:	07e4      	lsls	r4, r4, #31
 8001b1a:	4323      	orrs	r3, r4
 8001b1c:	0028      	movs	r0, r5
 8001b1e:	0019      	movs	r1, r3
 8001b20:	bd70      	pop	{r4, r5, r6, pc}
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d114      	bne.n	8001b50 <__aeabi_f2d+0x5c>
 8001b26:	2d00      	cmp	r5, #0
 8001b28:	d01b      	beq.n	8001b62 <__aeabi_f2d+0x6e>
 8001b2a:	0028      	movs	r0, r5
 8001b2c:	f000 f8b2 	bl	8001c94 <__clzsi2>
 8001b30:	280a      	cmp	r0, #10
 8001b32:	dc1c      	bgt.n	8001b6e <__aeabi_f2d+0x7a>
 8001b34:	230b      	movs	r3, #11
 8001b36:	002e      	movs	r6, r5
 8001b38:	1a1b      	subs	r3, r3, r0
 8001b3a:	40de      	lsrs	r6, r3
 8001b3c:	0003      	movs	r3, r0
 8001b3e:	3315      	adds	r3, #21
 8001b40:	409d      	lsls	r5, r3
 8001b42:	4a0e      	ldr	r2, [pc, #56]	; (8001b7c <__aeabi_f2d+0x88>)
 8001b44:	0336      	lsls	r6, r6, #12
 8001b46:	1a12      	subs	r2, r2, r0
 8001b48:	0552      	lsls	r2, r2, #21
 8001b4a:	0b36      	lsrs	r6, r6, #12
 8001b4c:	0d53      	lsrs	r3, r2, #21
 8001b4e:	e7e1      	b.n	8001b14 <__aeabi_f2d+0x20>
 8001b50:	2d00      	cmp	r5, #0
 8001b52:	d009      	beq.n	8001b68 <__aeabi_f2d+0x74>
 8001b54:	2280      	movs	r2, #128	; 0x80
 8001b56:	0b36      	lsrs	r6, r6, #12
 8001b58:	0312      	lsls	r2, r2, #12
 8001b5a:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <__aeabi_f2d+0x8c>)
 8001b5c:	076d      	lsls	r5, r5, #29
 8001b5e:	4316      	orrs	r6, r2
 8001b60:	e7d8      	b.n	8001b14 <__aeabi_f2d+0x20>
 8001b62:	2300      	movs	r3, #0
 8001b64:	2600      	movs	r6, #0
 8001b66:	e7d5      	b.n	8001b14 <__aeabi_f2d+0x20>
 8001b68:	2600      	movs	r6, #0
 8001b6a:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <__aeabi_f2d+0x8c>)
 8001b6c:	e7d2      	b.n	8001b14 <__aeabi_f2d+0x20>
 8001b6e:	0003      	movs	r3, r0
 8001b70:	3b0b      	subs	r3, #11
 8001b72:	409d      	lsls	r5, r3
 8001b74:	002e      	movs	r6, r5
 8001b76:	2500      	movs	r5, #0
 8001b78:	e7e3      	b.n	8001b42 <__aeabi_f2d+0x4e>
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	00000389 	.word	0x00000389
 8001b80:	000007ff 	.word	0x000007ff

08001b84 <__aeabi_d2f>:
 8001b84:	0002      	movs	r2, r0
 8001b86:	004b      	lsls	r3, r1, #1
 8001b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b8a:	0d5b      	lsrs	r3, r3, #21
 8001b8c:	030c      	lsls	r4, r1, #12
 8001b8e:	4e3d      	ldr	r6, [pc, #244]	; (8001c84 <__aeabi_d2f+0x100>)
 8001b90:	0a64      	lsrs	r4, r4, #9
 8001b92:	0f40      	lsrs	r0, r0, #29
 8001b94:	1c5f      	adds	r7, r3, #1
 8001b96:	0fc9      	lsrs	r1, r1, #31
 8001b98:	4304      	orrs	r4, r0
 8001b9a:	00d5      	lsls	r5, r2, #3
 8001b9c:	4237      	tst	r7, r6
 8001b9e:	d00a      	beq.n	8001bb6 <__aeabi_d2f+0x32>
 8001ba0:	4839      	ldr	r0, [pc, #228]	; (8001c88 <__aeabi_d2f+0x104>)
 8001ba2:	181e      	adds	r6, r3, r0
 8001ba4:	2efe      	cmp	r6, #254	; 0xfe
 8001ba6:	dd16      	ble.n	8001bd6 <__aeabi_d2f+0x52>
 8001ba8:	20ff      	movs	r0, #255	; 0xff
 8001baa:	2400      	movs	r4, #0
 8001bac:	05c0      	lsls	r0, r0, #23
 8001bae:	4320      	orrs	r0, r4
 8001bb0:	07c9      	lsls	r1, r1, #31
 8001bb2:	4308      	orrs	r0, r1
 8001bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d106      	bne.n	8001bc8 <__aeabi_d2f+0x44>
 8001bba:	432c      	orrs	r4, r5
 8001bbc:	d026      	beq.n	8001c0c <__aeabi_d2f+0x88>
 8001bbe:	2205      	movs	r2, #5
 8001bc0:	0192      	lsls	r2, r2, #6
 8001bc2:	0a54      	lsrs	r4, r2, #9
 8001bc4:	b2d8      	uxtb	r0, r3
 8001bc6:	e7f1      	b.n	8001bac <__aeabi_d2f+0x28>
 8001bc8:	4325      	orrs	r5, r4
 8001bca:	d0ed      	beq.n	8001ba8 <__aeabi_d2f+0x24>
 8001bcc:	2080      	movs	r0, #128	; 0x80
 8001bce:	03c0      	lsls	r0, r0, #15
 8001bd0:	4304      	orrs	r4, r0
 8001bd2:	20ff      	movs	r0, #255	; 0xff
 8001bd4:	e7ea      	b.n	8001bac <__aeabi_d2f+0x28>
 8001bd6:	2e00      	cmp	r6, #0
 8001bd8:	dd1b      	ble.n	8001c12 <__aeabi_d2f+0x8e>
 8001bda:	0192      	lsls	r2, r2, #6
 8001bdc:	1e53      	subs	r3, r2, #1
 8001bde:	419a      	sbcs	r2, r3
 8001be0:	00e4      	lsls	r4, r4, #3
 8001be2:	0f6d      	lsrs	r5, r5, #29
 8001be4:	4322      	orrs	r2, r4
 8001be6:	432a      	orrs	r2, r5
 8001be8:	0753      	lsls	r3, r2, #29
 8001bea:	d048      	beq.n	8001c7e <__aeabi_d2f+0xfa>
 8001bec:	230f      	movs	r3, #15
 8001bee:	4013      	ands	r3, r2
 8001bf0:	2b04      	cmp	r3, #4
 8001bf2:	d000      	beq.n	8001bf6 <__aeabi_d2f+0x72>
 8001bf4:	3204      	adds	r2, #4
 8001bf6:	2380      	movs	r3, #128	; 0x80
 8001bf8:	04db      	lsls	r3, r3, #19
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d03f      	beq.n	8001c7e <__aeabi_d2f+0xfa>
 8001bfe:	1c70      	adds	r0, r6, #1
 8001c00:	2efe      	cmp	r6, #254	; 0xfe
 8001c02:	d0d1      	beq.n	8001ba8 <__aeabi_d2f+0x24>
 8001c04:	0192      	lsls	r2, r2, #6
 8001c06:	0a54      	lsrs	r4, r2, #9
 8001c08:	b2c0      	uxtb	r0, r0
 8001c0a:	e7cf      	b.n	8001bac <__aeabi_d2f+0x28>
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	2400      	movs	r4, #0
 8001c10:	e7cc      	b.n	8001bac <__aeabi_d2f+0x28>
 8001c12:	0032      	movs	r2, r6
 8001c14:	3217      	adds	r2, #23
 8001c16:	db22      	blt.n	8001c5e <__aeabi_d2f+0xda>
 8001c18:	2080      	movs	r0, #128	; 0x80
 8001c1a:	0400      	lsls	r0, r0, #16
 8001c1c:	4320      	orrs	r0, r4
 8001c1e:	241e      	movs	r4, #30
 8001c20:	1ba4      	subs	r4, r4, r6
 8001c22:	2c1f      	cmp	r4, #31
 8001c24:	dd1d      	ble.n	8001c62 <__aeabi_d2f+0xde>
 8001c26:	2202      	movs	r2, #2
 8001c28:	4252      	negs	r2, r2
 8001c2a:	1b96      	subs	r6, r2, r6
 8001c2c:	0002      	movs	r2, r0
 8001c2e:	40f2      	lsrs	r2, r6
 8001c30:	0016      	movs	r6, r2
 8001c32:	2c20      	cmp	r4, #32
 8001c34:	d004      	beq.n	8001c40 <__aeabi_d2f+0xbc>
 8001c36:	4a15      	ldr	r2, [pc, #84]	; (8001c8c <__aeabi_d2f+0x108>)
 8001c38:	4694      	mov	ip, r2
 8001c3a:	4463      	add	r3, ip
 8001c3c:	4098      	lsls	r0, r3
 8001c3e:	4305      	orrs	r5, r0
 8001c40:	002a      	movs	r2, r5
 8001c42:	1e53      	subs	r3, r2, #1
 8001c44:	419a      	sbcs	r2, r3
 8001c46:	4332      	orrs	r2, r6
 8001c48:	2600      	movs	r6, #0
 8001c4a:	0753      	lsls	r3, r2, #29
 8001c4c:	d1ce      	bne.n	8001bec <__aeabi_d2f+0x68>
 8001c4e:	2480      	movs	r4, #128	; 0x80
 8001c50:	0013      	movs	r3, r2
 8001c52:	04e4      	lsls	r4, r4, #19
 8001c54:	2001      	movs	r0, #1
 8001c56:	4023      	ands	r3, r4
 8001c58:	4222      	tst	r2, r4
 8001c5a:	d1d3      	bne.n	8001c04 <__aeabi_d2f+0x80>
 8001c5c:	e7b0      	b.n	8001bc0 <__aeabi_d2f+0x3c>
 8001c5e:	2300      	movs	r3, #0
 8001c60:	e7ad      	b.n	8001bbe <__aeabi_d2f+0x3a>
 8001c62:	4a0b      	ldr	r2, [pc, #44]	; (8001c90 <__aeabi_d2f+0x10c>)
 8001c64:	4694      	mov	ip, r2
 8001c66:	002a      	movs	r2, r5
 8001c68:	40e2      	lsrs	r2, r4
 8001c6a:	0014      	movs	r4, r2
 8001c6c:	002a      	movs	r2, r5
 8001c6e:	4463      	add	r3, ip
 8001c70:	409a      	lsls	r2, r3
 8001c72:	4098      	lsls	r0, r3
 8001c74:	1e55      	subs	r5, r2, #1
 8001c76:	41aa      	sbcs	r2, r5
 8001c78:	4302      	orrs	r2, r0
 8001c7a:	4322      	orrs	r2, r4
 8001c7c:	e7e4      	b.n	8001c48 <__aeabi_d2f+0xc4>
 8001c7e:	0033      	movs	r3, r6
 8001c80:	e79e      	b.n	8001bc0 <__aeabi_d2f+0x3c>
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	000007fe 	.word	0x000007fe
 8001c88:	fffffc80 	.word	0xfffffc80
 8001c8c:	fffffca2 	.word	0xfffffca2
 8001c90:	fffffc82 	.word	0xfffffc82

08001c94 <__clzsi2>:
 8001c94:	211c      	movs	r1, #28
 8001c96:	2301      	movs	r3, #1
 8001c98:	041b      	lsls	r3, r3, #16
 8001c9a:	4298      	cmp	r0, r3
 8001c9c:	d301      	bcc.n	8001ca2 <__clzsi2+0xe>
 8001c9e:	0c00      	lsrs	r0, r0, #16
 8001ca0:	3910      	subs	r1, #16
 8001ca2:	0a1b      	lsrs	r3, r3, #8
 8001ca4:	4298      	cmp	r0, r3
 8001ca6:	d301      	bcc.n	8001cac <__clzsi2+0x18>
 8001ca8:	0a00      	lsrs	r0, r0, #8
 8001caa:	3908      	subs	r1, #8
 8001cac:	091b      	lsrs	r3, r3, #4
 8001cae:	4298      	cmp	r0, r3
 8001cb0:	d301      	bcc.n	8001cb6 <__clzsi2+0x22>
 8001cb2:	0900      	lsrs	r0, r0, #4
 8001cb4:	3904      	subs	r1, #4
 8001cb6:	a202      	add	r2, pc, #8	; (adr r2, 8001cc0 <__clzsi2+0x2c>)
 8001cb8:	5c10      	ldrb	r0, [r2, r0]
 8001cba:	1840      	adds	r0, r0, r1
 8001cbc:	4770      	bx	lr
 8001cbe:	46c0      	nop			; (mov r8, r8)
 8001cc0:	02020304 	.word	0x02020304
 8001cc4:	01010101 	.word	0x01010101
	...

08001cd0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4a06      	ldr	r2, [pc, #24]	; (8001cf8 <vApplicationGetIdleTaskMemory+0x28>)
 8001ce0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	4a05      	ldr	r2, [pc, #20]	; (8001cfc <vApplicationGetIdleTaskMemory+0x2c>)
 8001ce6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2280      	movs	r2, #128	; 0x80
 8001cec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001cee:	46c0      	nop			; (mov r8, r8)
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	b004      	add	sp, #16
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	46c0      	nop			; (mov r8, r8)
 8001cf8:	20000090 	.word	0x20000090
 8001cfc:	20000144 	.word	0x20000144

08001d00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d00:	b5b0      	push	{r4, r5, r7, lr}
 8001d02:	b096      	sub	sp, #88	; 0x58
 8001d04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d06:	f000 fe05 	bl	8002914 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d0a:	f000 f859 	bl	8001dc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d0e:	f000 f955 	bl	8001fbc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001d12:	f000 f91b 	bl	8001f4c <MX_USART1_UART_Init>
  MX_ADC_Init();
 8001d16:	f000 f8ad 	bl	8001e74 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  sprintf(HEADER1, "Initialized USB Serial Comunication \n");
 8001d1a:	4a20      	ldr	r2, [pc, #128]	; (8001d9c <main+0x9c>)
 8001d1c:	4b20      	ldr	r3, [pc, #128]	; (8001da0 <main+0xa0>)
 8001d1e:	0011      	movs	r1, r2
 8001d20:	0018      	movs	r0, r3
 8001d22:	f005 fc1f 	bl	8007564 <siprintf>
  HAL_UART_Transmit(&huart1, HEADER1, sizeof(HEADER1), 38);
 8001d26:	491e      	ldr	r1, [pc, #120]	; (8001da0 <main+0xa0>)
 8001d28:	481e      	ldr	r0, [pc, #120]	; (8001da4 <main+0xa4>)
 8001d2a:	2326      	movs	r3, #38	; 0x26
 8001d2c:	2228      	movs	r2, #40	; 0x28
 8001d2e:	f002 ffbd 	bl	8004cac <HAL_UART_Transmit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001d32:	213c      	movs	r1, #60	; 0x3c
 8001d34:	187b      	adds	r3, r7, r1
 8001d36:	4a1c      	ldr	r2, [pc, #112]	; (8001da8 <main+0xa8>)
 8001d38:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001d3a:	c331      	stmia	r3!, {r0, r4, r5}
 8001d3c:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001d3e:	c331      	stmia	r3!, {r0, r4, r5}
 8001d40:	6812      	ldr	r2, [r2, #0]
 8001d42:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001d44:	187b      	adds	r3, r7, r1
 8001d46:	2100      	movs	r1, #0
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f004 fa00 	bl	800614e <osThreadCreate>
 8001d4e:	0002      	movs	r2, r0
 8001d50:	4b16      	ldr	r3, [pc, #88]	; (8001dac <main+0xac>)
 8001d52:	601a      	str	r2, [r3, #0]

  /* definition and creation of AmplifierTask */
  osThreadDef(AmplifierTask, StartAmplifierTask, osPriorityNormal, 0, 128);
 8001d54:	2120      	movs	r1, #32
 8001d56:	187b      	adds	r3, r7, r1
 8001d58:	4a15      	ldr	r2, [pc, #84]	; (8001db0 <main+0xb0>)
 8001d5a:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001d5c:	c331      	stmia	r3!, {r0, r4, r5}
 8001d5e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001d60:	c331      	stmia	r3!, {r0, r4, r5}
 8001d62:	6812      	ldr	r2, [r2, #0]
 8001d64:	601a      	str	r2, [r3, #0]
  AmplifierTaskHandle = osThreadCreate(osThread(AmplifierTask), NULL);
 8001d66:	187b      	adds	r3, r7, r1
 8001d68:	2100      	movs	r1, #0
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	f004 f9ef 	bl	800614e <osThreadCreate>
 8001d70:	0002      	movs	r2, r0
 8001d72:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <main+0xb4>)
 8001d74:	601a      	str	r2, [r3, #0]

  /* definition and creation of SerialTask */
  osThreadDef(SerialTask, StartSerialTask, osPriorityNormal, 0, 128);
 8001d76:	1d3b      	adds	r3, r7, #4
 8001d78:	4a0f      	ldr	r2, [pc, #60]	; (8001db8 <main+0xb8>)
 8001d7a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d7c:	c313      	stmia	r3!, {r0, r1, r4}
 8001d7e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d80:	c313      	stmia	r3!, {r0, r1, r4}
 8001d82:	6812      	ldr	r2, [r2, #0]
 8001d84:	601a      	str	r2, [r3, #0]
  SerialTaskHandle = osThreadCreate(osThread(SerialTask), NULL);
 8001d86:	1d3b      	adds	r3, r7, #4
 8001d88:	2100      	movs	r1, #0
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	f004 f9df 	bl	800614e <osThreadCreate>
 8001d90:	0002      	movs	r2, r0
 8001d92:	4b0a      	ldr	r3, [pc, #40]	; (8001dbc <main+0xbc>)
 8001d94:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001d96:	f004 f9d2 	bl	800613e <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d9a:	e7fe      	b.n	8001d9a <main+0x9a>
 8001d9c:	08007d0c 	.word	0x08007d0c
 8001da0:	2000041c 	.word	0x2000041c
 8001da4:	20000384 	.word	0x20000384
 8001da8:	08007d34 	.word	0x08007d34
 8001dac:	2000040c 	.word	0x2000040c
 8001db0:	08007d50 	.word	0x08007d50
 8001db4:	20000410 	.word	0x20000410
 8001db8:	08007d6c 	.word	0x08007d6c
 8001dbc:	20000414 	.word	0x20000414

08001dc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dc0:	b590      	push	{r4, r7, lr}
 8001dc2:	b099      	sub	sp, #100	; 0x64
 8001dc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dc6:	242c      	movs	r4, #44	; 0x2c
 8001dc8:	193b      	adds	r3, r7, r4
 8001dca:	0018      	movs	r0, r3
 8001dcc:	2334      	movs	r3, #52	; 0x34
 8001dce:	001a      	movs	r2, r3
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	f005 faa0 	bl	8007316 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dd6:	231c      	movs	r3, #28
 8001dd8:	18fb      	adds	r3, r7, r3
 8001dda:	0018      	movs	r0, r3
 8001ddc:	2310      	movs	r3, #16
 8001dde:	001a      	movs	r2, r3
 8001de0:	2100      	movs	r1, #0
 8001de2:	f005 fa98 	bl	8007316 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001de6:	1d3b      	adds	r3, r7, #4
 8001de8:	0018      	movs	r0, r3
 8001dea:	2318      	movs	r3, #24
 8001dec:	001a      	movs	r2, r3
 8001dee:	2100      	movs	r1, #0
 8001df0:	f005 fa91 	bl	8007316 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSI48;
 8001df4:	0021      	movs	r1, r4
 8001df6:	187b      	adds	r3, r7, r1
 8001df8:	2230      	movs	r2, #48	; 0x30
 8001dfa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001dfc:	187b      	adds	r3, r7, r1
 8001dfe:	2201      	movs	r2, #1
 8001e00:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001e02:	187b      	adds	r3, r7, r1
 8001e04:	2201      	movs	r2, #1
 8001e06:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001e08:	187b      	adds	r3, r7, r1
 8001e0a:	2210      	movs	r2, #16
 8001e0c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001e0e:	187b      	adds	r3, r7, r1
 8001e10:	2200      	movs	r2, #0
 8001e12:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e14:	187b      	adds	r3, r7, r1
 8001e16:	0018      	movs	r0, r3
 8001e18:	f001 fea4 	bl	8003b64 <HAL_RCC_OscConfig>
 8001e1c:	1e03      	subs	r3, r0, #0
 8001e1e:	d001      	beq.n	8001e24 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001e20:	f000 fb9c 	bl	800255c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e24:	211c      	movs	r1, #28
 8001e26:	187b      	adds	r3, r7, r1
 8001e28:	2207      	movs	r2, #7
 8001e2a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8001e2c:	187b      	adds	r3, r7, r1
 8001e2e:	2203      	movs	r2, #3
 8001e30:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e32:	187b      	adds	r3, r7, r1
 8001e34:	2200      	movs	r2, #0
 8001e36:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e38:	187b      	adds	r3, r7, r1
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e3e:	187b      	adds	r3, r7, r1
 8001e40:	2101      	movs	r1, #1
 8001e42:	0018      	movs	r0, r3
 8001e44:	f002 fa14 	bl	8004270 <HAL_RCC_ClockConfig>
 8001e48:	1e03      	subs	r3, r0, #0
 8001e4a:	d001      	beq.n	8001e50 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001e4c:	f000 fb86 	bl	800255c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e50:	1d3b      	adds	r3, r7, #4
 8001e52:	2201      	movs	r2, #1
 8001e54:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001e56:	1d3b      	adds	r3, r7, #4
 8001e58:	2200      	movs	r2, #0
 8001e5a:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e5c:	1d3b      	adds	r3, r7, #4
 8001e5e:	0018      	movs	r0, r3
 8001e60:	f002 fb9c 	bl	800459c <HAL_RCCEx_PeriphCLKConfig>
 8001e64:	1e03      	subs	r3, r0, #0
 8001e66:	d001      	beq.n	8001e6c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001e68:	f000 fb78 	bl	800255c <Error_Handler>
  }
}
 8001e6c:	46c0      	nop			; (mov r8, r8)
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	b019      	add	sp, #100	; 0x64
 8001e72:	bd90      	pop	{r4, r7, pc}

08001e74 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	230c      	movs	r3, #12
 8001e80:	001a      	movs	r2, r3
 8001e82:	2100      	movs	r1, #0
 8001e84:	f005 fa47 	bl	8007316 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001e88:	4b2e      	ldr	r3, [pc, #184]	; (8001f44 <MX_ADC_Init+0xd0>)
 8001e8a:	4a2f      	ldr	r2, [pc, #188]	; (8001f48 <MX_ADC_Init+0xd4>)
 8001e8c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001e8e:	4b2d      	ldr	r3, [pc, #180]	; (8001f44 <MX_ADC_Init+0xd0>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001e94:	4b2b      	ldr	r3, [pc, #172]	; (8001f44 <MX_ADC_Init+0xd0>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e9a:	4b2a      	ldr	r3, [pc, #168]	; (8001f44 <MX_ADC_Init+0xd0>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001ea0:	4b28      	ldr	r3, [pc, #160]	; (8001f44 <MX_ADC_Init+0xd0>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ea6:	4b27      	ldr	r3, [pc, #156]	; (8001f44 <MX_ADC_Init+0xd0>)
 8001ea8:	2204      	movs	r2, #4
 8001eaa:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001eac:	4b25      	ldr	r3, [pc, #148]	; (8001f44 <MX_ADC_Init+0xd0>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001eb2:	4b24      	ldr	r3, [pc, #144]	; (8001f44 <MX_ADC_Init+0xd0>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001eb8:	4b22      	ldr	r3, [pc, #136]	; (8001f44 <MX_ADC_Init+0xd0>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001ebe:	4b21      	ldr	r3, [pc, #132]	; (8001f44 <MX_ADC_Init+0xd0>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ec4:	4b1f      	ldr	r3, [pc, #124]	; (8001f44 <MX_ADC_Init+0xd0>)
 8001ec6:	22c2      	movs	r2, #194	; 0xc2
 8001ec8:	32ff      	adds	r2, #255	; 0xff
 8001eca:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ecc:	4b1d      	ldr	r3, [pc, #116]	; (8001f44 <MX_ADC_Init+0xd0>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001ed2:	4b1c      	ldr	r3, [pc, #112]	; (8001f44 <MX_ADC_Init+0xd0>)
 8001ed4:	2224      	movs	r2, #36	; 0x24
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001eda:	4b1a      	ldr	r3, [pc, #104]	; (8001f44 <MX_ADC_Init+0xd0>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001ee0:	4b18      	ldr	r3, [pc, #96]	; (8001f44 <MX_ADC_Init+0xd0>)
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f000 fd46 	bl	8002974 <HAL_ADC_Init>
 8001ee8:	1e03      	subs	r3, r0, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8001eec:	f000 fb36 	bl	800255c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001ef0:	1d3b      	adds	r3, r7, #4
 8001ef2:	2210      	movs	r2, #16
 8001ef4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	2280      	movs	r2, #128	; 0x80
 8001efa:	0152      	lsls	r2, r2, #5
 8001efc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8001efe:	1d3b      	adds	r3, r7, #4
 8001f00:	2203      	movs	r2, #3
 8001f02:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001f04:	1d3a      	adds	r2, r7, #4
 8001f06:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <MX_ADC_Init+0xd0>)
 8001f08:	0011      	movs	r1, r2
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	f001 f866 	bl	8002fdc <HAL_ADC_ConfigChannel>
 8001f10:	1e03      	subs	r3, r0, #0
 8001f12:	d001      	beq.n	8001f18 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8001f14:	f000 fb22 	bl	800255c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001f18:	1d3b      	adds	r3, r7, #4
 8001f1a:	2211      	movs	r2, #17
 8001f1c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001f1e:	1d3a      	adds	r2, r7, #4
 8001f20:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <MX_ADC_Init+0xd0>)
 8001f22:	0011      	movs	r1, r2
 8001f24:	0018      	movs	r0, r3
 8001f26:	f001 f859 	bl	8002fdc <HAL_ADC_ConfigChannel>
 8001f2a:	1e03      	subs	r3, r0, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8001f2e:	f000 fb15 	bl	800255c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */
  HAL_ADCEx_Calibration_Start(&hadc);
 8001f32:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <MX_ADC_Init+0xd0>)
 8001f34:	0018      	movs	r0, r3
 8001f36:	f001 faa1 	bl	800347c <HAL_ADCEx_Calibration_Start>
  /* USER CODE END ADC_Init 2 */

}
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	b004      	add	sp, #16
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	20000344 	.word	0x20000344
 8001f48:	40012400 	.word	0x40012400

08001f4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f50:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <MX_USART1_UART_Init+0x68>)
 8001f52:	4a19      	ldr	r2, [pc, #100]	; (8001fb8 <MX_USART1_UART_Init+0x6c>)
 8001f54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001f56:	4b17      	ldr	r3, [pc, #92]	; (8001fb4 <MX_USART1_UART_Init+0x68>)
 8001f58:	2296      	movs	r2, #150	; 0x96
 8001f5a:	0192      	lsls	r2, r2, #6
 8001f5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f5e:	4b15      	ldr	r3, [pc, #84]	; (8001fb4 <MX_USART1_UART_Init+0x68>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f64:	4b13      	ldr	r3, [pc, #76]	; (8001fb4 <MX_USART1_UART_Init+0x68>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f6a:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <MX_USART1_UART_Init+0x68>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f70:	4b10      	ldr	r3, [pc, #64]	; (8001fb4 <MX_USART1_UART_Init+0x68>)
 8001f72:	220c      	movs	r2, #12
 8001f74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f76:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <MX_USART1_UART_Init+0x68>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f7c:	4b0d      	ldr	r3, [pc, #52]	; (8001fb4 <MX_USART1_UART_Init+0x68>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f82:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <MX_USART1_UART_Init+0x68>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001f88:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <MX_USART1_UART_Init+0x68>)
 8001f8a:	2230      	movs	r2, #48	; 0x30
 8001f8c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001f8e:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <MX_USART1_UART_Init+0x68>)
 8001f90:	2280      	movs	r2, #128	; 0x80
 8001f92:	0152      	lsls	r2, r2, #5
 8001f94:	639a      	str	r2, [r3, #56]	; 0x38
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001f96:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <MX_USART1_UART_Init+0x68>)
 8001f98:	2280      	movs	r2, #128	; 0x80
 8001f9a:	0192      	lsls	r2, r2, #6
 8001f9c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f9e:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <MX_USART1_UART_Init+0x68>)
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	f002 fe2f 	bl	8004c04 <HAL_UART_Init>
 8001fa6:	1e03      	subs	r3, r0, #0
 8001fa8:	d001      	beq.n	8001fae <MX_USART1_UART_Init+0x62>
  {
    Error_Handler();
 8001faa:	f000 fad7 	bl	800255c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000384 	.word	0x20000384
 8001fb8:	40013800 	.word	0x40013800

08001fbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fbc:	b590      	push	{r4, r7, lr}
 8001fbe:	b089      	sub	sp, #36	; 0x24
 8001fc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc2:	240c      	movs	r4, #12
 8001fc4:	193b      	adds	r3, r7, r4
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	2314      	movs	r3, #20
 8001fca:	001a      	movs	r2, r3
 8001fcc:	2100      	movs	r1, #0
 8001fce:	f005 f9a2 	bl	8007316 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fd2:	4b28      	ldr	r3, [pc, #160]	; (8002074 <MX_GPIO_Init+0xb8>)
 8001fd4:	695a      	ldr	r2, [r3, #20]
 8001fd6:	4b27      	ldr	r3, [pc, #156]	; (8002074 <MX_GPIO_Init+0xb8>)
 8001fd8:	2180      	movs	r1, #128	; 0x80
 8001fda:	03c9      	lsls	r1, r1, #15
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	615a      	str	r2, [r3, #20]
 8001fe0:	4b24      	ldr	r3, [pc, #144]	; (8002074 <MX_GPIO_Init+0xb8>)
 8001fe2:	695a      	ldr	r2, [r3, #20]
 8001fe4:	2380      	movs	r3, #128	; 0x80
 8001fe6:	03db      	lsls	r3, r3, #15
 8001fe8:	4013      	ands	r3, r2
 8001fea:	60bb      	str	r3, [r7, #8]
 8001fec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fee:	4b21      	ldr	r3, [pc, #132]	; (8002074 <MX_GPIO_Init+0xb8>)
 8001ff0:	695a      	ldr	r2, [r3, #20]
 8001ff2:	4b20      	ldr	r3, [pc, #128]	; (8002074 <MX_GPIO_Init+0xb8>)
 8001ff4:	2180      	movs	r1, #128	; 0x80
 8001ff6:	0289      	lsls	r1, r1, #10
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	615a      	str	r2, [r3, #20]
 8001ffc:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <MX_GPIO_Init+0xb8>)
 8001ffe:	695a      	ldr	r2, [r3, #20]
 8002000:	2380      	movs	r3, #128	; 0x80
 8002002:	029b      	lsls	r3, r3, #10
 8002004:	4013      	ands	r3, r2
 8002006:	607b      	str	r3, [r7, #4]
 8002008:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STANDBY__AMPLIFIER_GPIO_Port, STANDBY__AMPLIFIER_Pin, GPIO_PIN_RESET);
 800200a:	2390      	movs	r3, #144	; 0x90
 800200c:	05db      	lsls	r3, r3, #23
 800200e:	2200      	movs	r2, #0
 8002010:	2101      	movs	r1, #1
 8002012:	0018      	movs	r0, r3
 8002014:	f001 fd89 	bl	8003b2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MUTE_AMPLIFIER_GPIO_Port, MUTE_AMPLIFIER_Pin, GPIO_PIN_SET);
 8002018:	2390      	movs	r3, #144	; 0x90
 800201a:	05db      	lsls	r3, r3, #23
 800201c:	2201      	movs	r2, #1
 800201e:	2102      	movs	r1, #2
 8002020:	0018      	movs	r0, r3
 8002022:	f001 fd82 	bl	8003b2a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : STANDBY__AMPLIFIER_Pin MUTE_AMPLIFIER_Pin */
  GPIO_InitStruct.Pin = STANDBY__AMPLIFIER_Pin|MUTE_AMPLIFIER_Pin;
 8002026:	193b      	adds	r3, r7, r4
 8002028:	2203      	movs	r2, #3
 800202a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800202c:	193b      	adds	r3, r7, r4
 800202e:	2201      	movs	r2, #1
 8002030:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	193b      	adds	r3, r7, r4
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002038:	193b      	adds	r3, r7, r4
 800203a:	2200      	movs	r2, #0
 800203c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800203e:	193a      	adds	r2, r7, r4
 8002040:	2390      	movs	r3, #144	; 0x90
 8002042:	05db      	lsls	r3, r3, #23
 8002044:	0011      	movs	r1, r2
 8002046:	0018      	movs	r0, r3
 8002048:	f001 fbea 	bl	8003820 <HAL_GPIO_Init>

  /*Configure GPIO pin : MUTE_BUTTON_Pin */
  GPIO_InitStruct.Pin = MUTE_BUTTON_Pin;
 800204c:	193b      	adds	r3, r7, r4
 800204e:	2204      	movs	r2, #4
 8002050:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002052:	193b      	adds	r3, r7, r4
 8002054:	2200      	movs	r2, #0
 8002056:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	193b      	adds	r3, r7, r4
 800205a:	2200      	movs	r2, #0
 800205c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MUTE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800205e:	193a      	adds	r2, r7, r4
 8002060:	2390      	movs	r3, #144	; 0x90
 8002062:	05db      	lsls	r3, r3, #23
 8002064:	0011      	movs	r1, r2
 8002066:	0018      	movs	r0, r3
 8002068:	f001 fbda 	bl	8003820 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800206c:	46c0      	nop			; (mov r8, r8)
 800206e:	46bd      	mov	sp, r7
 8002070:	b009      	add	sp, #36	; 0x24
 8002072:	bd90      	pop	{r4, r7, pc}
 8002074:	40021000 	.word	0x40021000

08002078 <HAL_UART_RxCpltCallback>:




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, Rx_data, 1);
 8002080:	4904      	ldr	r1, [pc, #16]	; (8002094 <HAL_UART_RxCpltCallback+0x1c>)
 8002082:	4b05      	ldr	r3, [pc, #20]	; (8002098 <HAL_UART_RxCpltCallback+0x20>)
 8002084:	2201      	movs	r2, #1
 8002086:	0018      	movs	r0, r3
 8002088:	f002 feb0 	bl	8004dec <HAL_UART_Receive_IT>
}
 800208c:	46c0      	nop			; (mov r8, r8)
 800208e:	46bd      	mov	sp, r7
 8002090:	b002      	add	sp, #8
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20000448 	.word	0x20000448
 8002098:	20000384 	.word	0x20000384

0800209c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800209c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800209e:	b089      	sub	sp, #36	; 0x24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
      osDelay(500);
 80020a4:	23fa      	movs	r3, #250	; 0xfa
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	0018      	movs	r0, r3
 80020aa:	f004 f89d 	bl	80061e8 <osDelay>
	  // Select Get and Calculate The Temperature
      ADC_ChannelConfTypeDef sConfig = {0};
 80020ae:	260c      	movs	r6, #12
 80020b0:	2408      	movs	r4, #8
 80020b2:	1933      	adds	r3, r6, r4
 80020b4:	19db      	adds	r3, r3, r7
 80020b6:	0018      	movs	r0, r3
 80020b8:	230c      	movs	r3, #12
 80020ba:	001a      	movs	r2, r3
 80020bc:	2100      	movs	r1, #0
 80020be:	f005 f92a 	bl	8007316 <memset>
      sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80020c2:	1933      	adds	r3, r6, r4
 80020c4:	19db      	adds	r3, r3, r7
 80020c6:	2210      	movs	r2, #16
 80020c8:	601a      	str	r2, [r3, #0]
      sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80020ca:	1933      	adds	r3, r6, r4
 80020cc:	19db      	adds	r3, r3, r7
 80020ce:	2203      	movs	r2, #3
 80020d0:	609a      	str	r2, [r3, #8]
      HAL_ADC_Start(&hadc);
 80020d2:	4b58      	ldr	r3, [pc, #352]	; (8002234 <StartDefaultTask+0x198>)
 80020d4:	0018      	movs	r0, r3
 80020d6:	f000 fd8d 	bl	8002bf4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, 1000);
 80020da:	23fa      	movs	r3, #250	; 0xfa
 80020dc:	009a      	lsls	r2, r3, #2
 80020de:	4b55      	ldr	r3, [pc, #340]	; (8002234 <StartDefaultTask+0x198>)
 80020e0:	0011      	movs	r1, r2
 80020e2:	0018      	movs	r0, r3
 80020e4:	f000 fe1a 	bl	8002d1c <HAL_ADC_PollForConversion>
	  ADC_Read_Channel = HAL_ADC_GetValue(&hadc);
 80020e8:	4b52      	ldr	r3, [pc, #328]	; (8002234 <StartDefaultTask+0x198>)
 80020ea:	0018      	movs	r0, r3
 80020ec:	f000 feae 	bl	8002e4c <HAL_ADC_GetValue>
 80020f0:	0003      	movs	r3, r0
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	4b50      	ldr	r3, [pc, #320]	; (8002238 <StartDefaultTask+0x19c>)
 80020f6:	801a      	strh	r2, [r3, #0]
	  Temperature = ((3.3*ADC_Read_Channel/4095 - Vref)/AVG_SLOPE)+25;
 80020f8:	4b4f      	ldr	r3, [pc, #316]	; (8002238 <StartDefaultTask+0x19c>)
 80020fa:	881b      	ldrh	r3, [r3, #0]
 80020fc:	0018      	movs	r0, r3
 80020fe:	f7ff fcc9 	bl	8001a94 <__aeabi_i2d>
 8002102:	4a4e      	ldr	r2, [pc, #312]	; (800223c <StartDefaultTask+0x1a0>)
 8002104:	4b4e      	ldr	r3, [pc, #312]	; (8002240 <StartDefaultTask+0x1a4>)
 8002106:	f7fe fec7 	bl	8000e98 <__aeabi_dmul>
 800210a:	0002      	movs	r2, r0
 800210c:	000b      	movs	r3, r1
 800210e:	0010      	movs	r0, r2
 8002110:	0019      	movs	r1, r3
 8002112:	2200      	movs	r2, #0
 8002114:	4b4b      	ldr	r3, [pc, #300]	; (8002244 <StartDefaultTask+0x1a8>)
 8002116:	f7fe fbc9 	bl	80008ac <__aeabi_ddiv>
 800211a:	0002      	movs	r2, r0
 800211c:	000b      	movs	r3, r1
 800211e:	0014      	movs	r4, r2
 8002120:	001d      	movs	r5, r3
 8002122:	4b49      	ldr	r3, [pc, #292]	; (8002248 <StartDefaultTask+0x1ac>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	1c18      	adds	r0, r3, #0
 8002128:	f7ff fce4 	bl	8001af4 <__aeabi_f2d>
 800212c:	0002      	movs	r2, r0
 800212e:	000b      	movs	r3, r1
 8002130:	0020      	movs	r0, r4
 8002132:	0029      	movs	r1, r5
 8002134:	f7ff f91c 	bl	8001370 <__aeabi_dsub>
 8002138:	0002      	movs	r2, r0
 800213a:	000b      	movs	r3, r1
 800213c:	0010      	movs	r0, r2
 800213e:	0019      	movs	r1, r3
 8002140:	2280      	movs	r2, #128	; 0x80
 8002142:	05d2      	lsls	r2, r2, #23
 8002144:	4b41      	ldr	r3, [pc, #260]	; (800224c <StartDefaultTask+0x1b0>)
 8002146:	f7fe fbb1 	bl	80008ac <__aeabi_ddiv>
 800214a:	0002      	movs	r2, r0
 800214c:	000b      	movs	r3, r1
 800214e:	0010      	movs	r0, r2
 8002150:	0019      	movs	r1, r3
 8002152:	2200      	movs	r2, #0
 8002154:	4b3e      	ldr	r3, [pc, #248]	; (8002250 <StartDefaultTask+0x1b4>)
 8002156:	f7fe f86d 	bl	8000234 <__aeabi_dadd>
 800215a:	0002      	movs	r2, r0
 800215c:	000b      	movs	r3, r1
 800215e:	0010      	movs	r0, r2
 8002160:	0019      	movs	r1, r3
 8002162:	f7ff fd0f 	bl	8001b84 <__aeabi_d2f>
 8002166:	1c02      	adds	r2, r0, #0
 8002168:	4b3a      	ldr	r3, [pc, #232]	; (8002254 <StartDefaultTask+0x1b8>)
 800216a:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc);
 800216c:	4b31      	ldr	r3, [pc, #196]	; (8002234 <StartDefaultTask+0x198>)
 800216e:	0018      	movs	r0, r3
 8002170:	f000 fd94 	bl	8002c9c <HAL_ADC_Stop>
	  osDelay(500);
 8002174:	23fa      	movs	r3, #250	; 0xfa
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	0018      	movs	r0, r3
 800217a:	f004 f835 	bl	80061e8 <osDelay>

	  // Select Get and Calculate The VRef
	  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800217e:	2408      	movs	r4, #8
 8002180:	1933      	adds	r3, r6, r4
 8002182:	19db      	adds	r3, r3, r7
 8002184:	2211      	movs	r2, #17
 8002186:	601a      	str	r2, [r3, #0]
	  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8002188:	1933      	adds	r3, r6, r4
 800218a:	19db      	adds	r3, r3, r7
 800218c:	2206      	movs	r2, #6
 800218e:	609a      	str	r2, [r3, #8]
	  HAL_ADC_Start(&hadc);
 8002190:	4b28      	ldr	r3, [pc, #160]	; (8002234 <StartDefaultTask+0x198>)
 8002192:	0018      	movs	r0, r3
 8002194:	f000 fd2e 	bl	8002bf4 <HAL_ADC_Start>
	  vrefint_calibrate = *VREFINT_CAL_ADDR;
 8002198:	4b2f      	ldr	r3, [pc, #188]	; (8002258 <StartDefaultTask+0x1bc>)
 800219a:	881a      	ldrh	r2, [r3, #0]
 800219c:	4b2f      	ldr	r3, [pc, #188]	; (800225c <StartDefaultTask+0x1c0>)
 800219e:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_PollForConversion(&hadc, 1000);
 80021a0:	23fa      	movs	r3, #250	; 0xfa
 80021a2:	009a      	lsls	r2, r3, #2
 80021a4:	4b23      	ldr	r3, [pc, #140]	; (8002234 <StartDefaultTask+0x198>)
 80021a6:	0011      	movs	r1, r2
 80021a8:	0018      	movs	r0, r3
 80021aa:	f000 fdb7 	bl	8002d1c <HAL_ADC_PollForConversion>
	  ADC_Read_Channel = HAL_ADC_GetValue(&hadc);
 80021ae:	4b21      	ldr	r3, [pc, #132]	; (8002234 <StartDefaultTask+0x198>)
 80021b0:	0018      	movs	r0, r3
 80021b2:	f000 fe4b 	bl	8002e4c <HAL_ADC_GetValue>
 80021b6:	0003      	movs	r3, r0
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	4b1f      	ldr	r3, [pc, #124]	; (8002238 <StartDefaultTask+0x19c>)
 80021bc:	801a      	strh	r2, [r3, #0]
	  Vref = (ADC_Read_Channel*((vrefint_calibrate * VREFINT_CAL_VOLTAGE)/ADC_Read_Channel))/4096;
 80021be:	4b1e      	ldr	r3, [pc, #120]	; (8002238 <StartDefaultTask+0x19c>)
 80021c0:	881b      	ldrh	r3, [r3, #0]
 80021c2:	0018      	movs	r0, r3
 80021c4:	f7ff fc66 	bl	8001a94 <__aeabi_i2d>
 80021c8:	0004      	movs	r4, r0
 80021ca:	000d      	movs	r5, r1
 80021cc:	4b23      	ldr	r3, [pc, #140]	; (800225c <StartDefaultTask+0x1c0>)
 80021ce:	881b      	ldrh	r3, [r3, #0]
 80021d0:	0018      	movs	r0, r3
 80021d2:	f7ff fc5f 	bl	8001a94 <__aeabi_i2d>
 80021d6:	4a19      	ldr	r2, [pc, #100]	; (800223c <StartDefaultTask+0x1a0>)
 80021d8:	4b19      	ldr	r3, [pc, #100]	; (8002240 <StartDefaultTask+0x1a4>)
 80021da:	f7fe fe5d 	bl	8000e98 <__aeabi_dmul>
 80021de:	0002      	movs	r2, r0
 80021e0:	000b      	movs	r3, r1
 80021e2:	603a      	str	r2, [r7, #0]
 80021e4:	607b      	str	r3, [r7, #4]
 80021e6:	4b14      	ldr	r3, [pc, #80]	; (8002238 <StartDefaultTask+0x19c>)
 80021e8:	881b      	ldrh	r3, [r3, #0]
 80021ea:	0018      	movs	r0, r3
 80021ec:	f7ff fc52 	bl	8001a94 <__aeabi_i2d>
 80021f0:	0002      	movs	r2, r0
 80021f2:	000b      	movs	r3, r1
 80021f4:	6838      	ldr	r0, [r7, #0]
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	f7fe fb58 	bl	80008ac <__aeabi_ddiv>
 80021fc:	0002      	movs	r2, r0
 80021fe:	000b      	movs	r3, r1
 8002200:	0020      	movs	r0, r4
 8002202:	0029      	movs	r1, r5
 8002204:	f7fe fe48 	bl	8000e98 <__aeabi_dmul>
 8002208:	0002      	movs	r2, r0
 800220a:	000b      	movs	r3, r1
 800220c:	0010      	movs	r0, r2
 800220e:	0019      	movs	r1, r3
 8002210:	2200      	movs	r2, #0
 8002212:	4b13      	ldr	r3, [pc, #76]	; (8002260 <StartDefaultTask+0x1c4>)
 8002214:	f7fe fb4a 	bl	80008ac <__aeabi_ddiv>
 8002218:	0002      	movs	r2, r0
 800221a:	000b      	movs	r3, r1
 800221c:	0010      	movs	r0, r2
 800221e:	0019      	movs	r1, r3
 8002220:	f7ff fcb0 	bl	8001b84 <__aeabi_d2f>
 8002224:	1c02      	adds	r2, r0, #0
 8002226:	4b08      	ldr	r3, [pc, #32]	; (8002248 <StartDefaultTask+0x1ac>)
 8002228:	601a      	str	r2, [r3, #0]
	  //Vref = Vdda_Value/4096.00;
	  HAL_ADC_Stop(&hadc);
 800222a:	4b02      	ldr	r3, [pc, #8]	; (8002234 <StartDefaultTask+0x198>)
 800222c:	0018      	movs	r0, r3
 800222e:	f000 fd35 	bl	8002c9c <HAL_ADC_Stop>
  {
 8002232:	e737      	b.n	80020a4 <StartDefaultTask+0x8>
 8002234:	20000344 	.word	0x20000344
 8002238:	2000044a 	.word	0x2000044a
 800223c:	66666666 	.word	0x66666666
 8002240:	400a6666 	.word	0x400a6666
 8002244:	40affe00 	.word	0x40affe00
 8002248:	20000450 	.word	0x20000450
 800224c:	40113333 	.word	0x40113333
 8002250:	40390000 	.word	0x40390000
 8002254:	2000044c 	.word	0x2000044c
 8002258:	1ffff7ba 	.word	0x1ffff7ba
 800225c:	20000454 	.word	0x20000454
 8002260:	40b00000 	.word	0x40b00000

08002264 <StartAmplifierTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAmplifierTask */
void StartAmplifierTask(void const * argument)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAmplifierTask */
  /* Infinite loop */
  for(;;)
  {
	osDelay(1);
 800226c:	2001      	movs	r0, #1
 800226e:	f003 ffbb 	bl	80061e8 <osDelay>
	MuteButtonState = HAL_GPIO_ReadPin(MUTE_BUTTON_GPIO_Port, MUTE_BUTTON_Pin); // GET STATE MUTE BUTTON 'CURRENT STATE IS NEGETIVE'
 8002272:	2390      	movs	r3, #144	; 0x90
 8002274:	05db      	lsls	r3, r3, #23
 8002276:	2104      	movs	r1, #4
 8002278:	0018      	movs	r0, r3
 800227a:	f001 fc39 	bl	8003af0 <HAL_GPIO_ReadPin>
 800227e:	0003      	movs	r3, r0
 8002280:	1e5a      	subs	r2, r3, #1
 8002282:	4193      	sbcs	r3, r2
 8002284:	b2da      	uxtb	r2, r3
 8002286:	4b35      	ldr	r3, [pc, #212]	; (800235c <StartAmplifierTask+0xf8>)
 8002288:	701a      	strb	r2, [r3, #0]
	MuteButtonState = !MuteButtonState; 	// REVERSE NEGATIVE TO POSITIVE SIGNAL
 800228a:	4b34      	ldr	r3, [pc, #208]	; (800235c <StartAmplifierTask+0xf8>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	1e5a      	subs	r2, r3, #1
 8002290:	4193      	sbcs	r3, r2
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2201      	movs	r2, #1
 8002296:	4053      	eors	r3, r2
 8002298:	b2db      	uxtb	r3, r3
 800229a:	1c1a      	adds	r2, r3, #0
 800229c:	2301      	movs	r3, #1
 800229e:	4013      	ands	r3, r2
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	4b2e      	ldr	r3, [pc, #184]	; (800235c <StartAmplifierTask+0xf8>)
 80022a4:	701a      	strb	r2, [r3, #0]

	if ((MuteButtonState == true && StateAmplifier == false)||(SerialCommand == 1 ))	//CHECK STATUS BUTTON
 80022a6:	4b2d      	ldr	r3, [pc, #180]	; (800235c <StartAmplifierTask+0xf8>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d006      	beq.n	80022bc <StartAmplifierTask+0x58>
 80022ae:	4b2c      	ldr	r3, [pc, #176]	; (8002360 <StartAmplifierTask+0xfc>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2201      	movs	r2, #1
 80022b4:	4053      	eors	r3, r2
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d103      	bne.n	80022c4 <StartAmplifierTask+0x60>
 80022bc:	4b29      	ldr	r3, [pc, #164]	; (8002364 <StartAmplifierTask+0x100>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d11e      	bne.n	8002302 <StartAmplifierTask+0x9e>
	{
		StateAmplifier = true;
 80022c4:	4b26      	ldr	r3, [pc, #152]	; (8002360 <StartAmplifierTask+0xfc>)
 80022c6:	2201      	movs	r2, #1
 80022c8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(STANDBY__AMPLIFIER_GPIO_Port, STANDBY__AMPLIFIER_Pin, GPIO_PIN_SET);
 80022ca:	2390      	movs	r3, #144	; 0x90
 80022cc:	05db      	lsls	r3, r3, #23
 80022ce:	2201      	movs	r2, #1
 80022d0:	2101      	movs	r1, #1
 80022d2:	0018      	movs	r0, r3
 80022d4:	f001 fc29 	bl	8003b2a <HAL_GPIO_WritePin>
		osDelay(200);
 80022d8:	20c8      	movs	r0, #200	; 0xc8
 80022da:	f003 ff85 	bl	80061e8 <osDelay>
		HAL_GPIO_WritePin(MUTE_AMPLIFIER_GPIO_Port, MUTE_AMPLIFIER_Pin, GPIO_PIN_RESET);
 80022de:	2390      	movs	r3, #144	; 0x90
 80022e0:	05db      	lsls	r3, r3, #23
 80022e2:	2200      	movs	r2, #0
 80022e4:	2102      	movs	r1, #2
 80022e6:	0018      	movs	r0, r3
 80022e8:	f001 fc1f 	bl	8003b2a <HAL_GPIO_WritePin>
		MuteButtonState = false;
 80022ec:	4b1b      	ldr	r3, [pc, #108]	; (800235c <StartAmplifierTask+0xf8>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	701a      	strb	r2, [r3, #0]
		SerialCommand = 0;
 80022f2:	4b1c      	ldr	r3, [pc, #112]	; (8002364 <StartAmplifierTask+0x100>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	701a      	strb	r2, [r3, #0]
		osDelay(1000);
 80022f8:	23fa      	movs	r3, #250	; 0xfa
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	0018      	movs	r0, r3
 80022fe:	f003 ff73 	bl	80061e8 <osDelay>
	}
	if ((MuteButtonState == true && StateAmplifier == true)||(SerialCommand == 2 ))	//CHECK STATUS BUTTON
 8002302:	4b16      	ldr	r3, [pc, #88]	; (800235c <StartAmplifierTask+0xf8>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <StartAmplifierTask+0xae>
 800230a:	4b15      	ldr	r3, [pc, #84]	; (8002360 <StartAmplifierTask+0xfc>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d103      	bne.n	800231a <StartAmplifierTask+0xb6>
 8002312:	4b14      	ldr	r3, [pc, #80]	; (8002364 <StartAmplifierTask+0x100>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b02      	cmp	r3, #2
 8002318:	d1a8      	bne.n	800226c <StartAmplifierTask+0x8>
	{
		StateAmplifier = false;
 800231a:	4b11      	ldr	r3, [pc, #68]	; (8002360 <StartAmplifierTask+0xfc>)
 800231c:	2200      	movs	r2, #0
 800231e:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(MUTE_AMPLIFIER_GPIO_Port, MUTE_AMPLIFIER_Pin, GPIO_PIN_SET);
 8002320:	2390      	movs	r3, #144	; 0x90
 8002322:	05db      	lsls	r3, r3, #23
 8002324:	2201      	movs	r2, #1
 8002326:	2102      	movs	r1, #2
 8002328:	0018      	movs	r0, r3
 800232a:	f001 fbfe 	bl	8003b2a <HAL_GPIO_WritePin>
		osDelay(200);
 800232e:	20c8      	movs	r0, #200	; 0xc8
 8002330:	f003 ff5a 	bl	80061e8 <osDelay>
		HAL_GPIO_WritePin(STANDBY__AMPLIFIER_GPIO_Port, STANDBY__AMPLIFIER_Pin, GPIO_PIN_RESET);
 8002334:	2390      	movs	r3, #144	; 0x90
 8002336:	05db      	lsls	r3, r3, #23
 8002338:	2200      	movs	r2, #0
 800233a:	2101      	movs	r1, #1
 800233c:	0018      	movs	r0, r3
 800233e:	f001 fbf4 	bl	8003b2a <HAL_GPIO_WritePin>
		MuteButtonState = false;
 8002342:	4b06      	ldr	r3, [pc, #24]	; (800235c <StartAmplifierTask+0xf8>)
 8002344:	2200      	movs	r2, #0
 8002346:	701a      	strb	r2, [r3, #0]
		SerialCommand = 0;
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <StartAmplifierTask+0x100>)
 800234a:	2200      	movs	r2, #0
 800234c:	701a      	strb	r2, [r3, #0]
		osDelay(1000);
 800234e:	23fa      	movs	r3, #250	; 0xfa
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	0018      	movs	r0, r3
 8002354:	f003 ff48 	bl	80061e8 <osDelay>
	osDelay(1);
 8002358:	e788      	b.n	800226c <StartAmplifierTask+0x8>
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	2000041a 	.word	0x2000041a
 8002360:	20000418 	.word	0x20000418
 8002364:	20000449 	.word	0x20000449

08002368 <StartSerialTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSerialTask */
void StartSerialTask(void const * argument)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSerialTask */
  /* Infinite loop */
  for(;;)
  {
	//--------------------FOR SERIAL COMUNICATION---------------------------------------------
	osDelay(1);
 8002370:	2001      	movs	r0, #1
 8002372:	f003 ff39 	bl	80061e8 <osDelay>
	//----------------------------TX COMUNICATION---------------------------------------------
	MuteButtonState = HAL_GPIO_ReadPin(MUTE_BUTTON_GPIO_Port, MUTE_BUTTON_Pin); // GET STATE MUTE BUTTON 'CURRENT STATE IS NEGETIVE'
 8002376:	2390      	movs	r3, #144	; 0x90
 8002378:	05db      	lsls	r3, r3, #23
 800237a:	2104      	movs	r1, #4
 800237c:	0018      	movs	r0, r3
 800237e:	f001 fbb7 	bl	8003af0 <HAL_GPIO_ReadPin>
 8002382:	0003      	movs	r3, r0
 8002384:	1e5a      	subs	r2, r3, #1
 8002386:	4193      	sbcs	r3, r2
 8002388:	b2da      	uxtb	r2, r3
 800238a:	4b5d      	ldr	r3, [pc, #372]	; (8002500 <StartSerialTask+0x198>)
 800238c:	701a      	strb	r2, [r3, #0]
	MuteButtonState = !MuteButtonState; 	// REVERSE NEGATIVE TO POSITIVE SIGNAL
 800238e:	4b5c      	ldr	r3, [pc, #368]	; (8002500 <StartSerialTask+0x198>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	1e5a      	subs	r2, r3, #1
 8002394:	4193      	sbcs	r3, r2
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2201      	movs	r2, #1
 800239a:	4053      	eors	r3, r2
 800239c:	b2db      	uxtb	r3, r3
 800239e:	1c1a      	adds	r2, r3, #0
 80023a0:	2301      	movs	r3, #1
 80023a2:	4013      	ands	r3, r2
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	4b56      	ldr	r3, [pc, #344]	; (8002500 <StartSerialTask+0x198>)
 80023a8:	701a      	strb	r2, [r3, #0]

	if ((MuteButtonState == true)||(SerialCommand != 0))
 80023aa:	4b55      	ldr	r3, [pc, #340]	; (8002500 <StartSerialTask+0x198>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d103      	bne.n	80023ba <StartSerialTask+0x52>
 80023b2:	4b54      	ldr	r3, [pc, #336]	; (8002504 <StartSerialTask+0x19c>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d055      	beq.n	8002466 <StartSerialTask+0xfe>
	{
		if ((StateAmplifier == true)&&(StateAmplifier != OldStateAmplifier))
 80023ba:	4b53      	ldr	r3, [pc, #332]	; (8002508 <StartSerialTask+0x1a0>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d025      	beq.n	800240e <StartSerialTask+0xa6>
 80023c2:	4b51      	ldr	r3, [pc, #324]	; (8002508 <StartSerialTask+0x1a0>)
 80023c4:	781a      	ldrb	r2, [r3, #0]
 80023c6:	4b51      	ldr	r3, [pc, #324]	; (800250c <StartSerialTask+0x1a4>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d01f      	beq.n	800240e <StartSerialTask+0xa6>
		{
			  sprintf(HEADER1, "Px_AMPLIFIER ON_Sx");
 80023ce:	4a50      	ldr	r2, [pc, #320]	; (8002510 <StartSerialTask+0x1a8>)
 80023d0:	4b50      	ldr	r3, [pc, #320]	; (8002514 <StartSerialTask+0x1ac>)
 80023d2:	0011      	movs	r1, r2
 80023d4:	0018      	movs	r0, r3
 80023d6:	f005 f8c5 	bl	8007564 <siprintf>
			  sprintf(CR, "\r\n");
 80023da:	4a4f      	ldr	r2, [pc, #316]	; (8002518 <StartSerialTask+0x1b0>)
 80023dc:	4b4f      	ldr	r3, [pc, #316]	; (800251c <StartSerialTask+0x1b4>)
 80023de:	0011      	movs	r1, r2
 80023e0:	0018      	movs	r0, r3
 80023e2:	f005 f8bf 	bl	8007564 <siprintf>
			  HAL_UART_Transmit(&huart1, HEADER1, sizeof(HEADER1), 18);
 80023e6:	494b      	ldr	r1, [pc, #300]	; (8002514 <StartSerialTask+0x1ac>)
 80023e8:	484d      	ldr	r0, [pc, #308]	; (8002520 <StartSerialTask+0x1b8>)
 80023ea:	2312      	movs	r3, #18
 80023ec:	2228      	movs	r2, #40	; 0x28
 80023ee:	f002 fc5d 	bl	8004cac <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart1, (uint8_t *)CR, sizeof(CR), 0xFFFF);
 80023f2:	4b4c      	ldr	r3, [pc, #304]	; (8002524 <StartSerialTask+0x1bc>)
 80023f4:	4949      	ldr	r1, [pc, #292]	; (800251c <StartSerialTask+0x1b4>)
 80023f6:	484a      	ldr	r0, [pc, #296]	; (8002520 <StartSerialTask+0x1b8>)
 80023f8:	2204      	movs	r2, #4
 80023fa:	f002 fc57 	bl	8004cac <HAL_UART_Transmit>
			  OldStateAmplifier = StateAmplifier;
 80023fe:	4b42      	ldr	r3, [pc, #264]	; (8002508 <StartSerialTask+0x1a0>)
 8002400:	781a      	ldrb	r2, [r3, #0]
 8002402:	4b42      	ldr	r3, [pc, #264]	; (800250c <StartSerialTask+0x1a4>)
 8002404:	701a      	strb	r2, [r3, #0]
			  SerialCommand = 0;
 8002406:	4b3f      	ldr	r3, [pc, #252]	; (8002504 <StartSerialTask+0x19c>)
 8002408:	2200      	movs	r2, #0
 800240a:	701a      	strb	r2, [r3, #0]
		{
 800240c:	e02b      	b.n	8002466 <StartSerialTask+0xfe>
		}
		else if ((StateAmplifier == false)&&(StateAmplifier != OldStateAmplifier))
 800240e:	4b3e      	ldr	r3, [pc, #248]	; (8002508 <StartSerialTask+0x1a0>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2201      	movs	r2, #1
 8002414:	4053      	eors	r3, r2
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b00      	cmp	r3, #0
 800241a:	d024      	beq.n	8002466 <StartSerialTask+0xfe>
 800241c:	4b3a      	ldr	r3, [pc, #232]	; (8002508 <StartSerialTask+0x1a0>)
 800241e:	781a      	ldrb	r2, [r3, #0]
 8002420:	4b3a      	ldr	r3, [pc, #232]	; (800250c <StartSerialTask+0x1a4>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	429a      	cmp	r2, r3
 8002426:	d01e      	beq.n	8002466 <StartSerialTask+0xfe>
		{
			  sprintf(HEADER1, "Px_AMPLIFIER OFF_Sx");
 8002428:	4a3f      	ldr	r2, [pc, #252]	; (8002528 <StartSerialTask+0x1c0>)
 800242a:	4b3a      	ldr	r3, [pc, #232]	; (8002514 <StartSerialTask+0x1ac>)
 800242c:	0011      	movs	r1, r2
 800242e:	0018      	movs	r0, r3
 8002430:	f005 f898 	bl	8007564 <siprintf>
			  sprintf(CR, "\r\n");
 8002434:	4a38      	ldr	r2, [pc, #224]	; (8002518 <StartSerialTask+0x1b0>)
 8002436:	4b39      	ldr	r3, [pc, #228]	; (800251c <StartSerialTask+0x1b4>)
 8002438:	0011      	movs	r1, r2
 800243a:	0018      	movs	r0, r3
 800243c:	f005 f892 	bl	8007564 <siprintf>
			  HAL_UART_Transmit(&huart1, HEADER1, sizeof(HEADER1), 18);
 8002440:	4934      	ldr	r1, [pc, #208]	; (8002514 <StartSerialTask+0x1ac>)
 8002442:	4837      	ldr	r0, [pc, #220]	; (8002520 <StartSerialTask+0x1b8>)
 8002444:	2312      	movs	r3, #18
 8002446:	2228      	movs	r2, #40	; 0x28
 8002448:	f002 fc30 	bl	8004cac <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart1, (uint8_t *)CR, sizeof(CR), 0xFFFF);
 800244c:	4b35      	ldr	r3, [pc, #212]	; (8002524 <StartSerialTask+0x1bc>)
 800244e:	4933      	ldr	r1, [pc, #204]	; (800251c <StartSerialTask+0x1b4>)
 8002450:	4833      	ldr	r0, [pc, #204]	; (8002520 <StartSerialTask+0x1b8>)
 8002452:	2204      	movs	r2, #4
 8002454:	f002 fc2a 	bl	8004cac <HAL_UART_Transmit>
			  OldStateAmplifier = StateAmplifier;
 8002458:	4b2b      	ldr	r3, [pc, #172]	; (8002508 <StartSerialTask+0x1a0>)
 800245a:	781a      	ldrb	r2, [r3, #0]
 800245c:	4b2b      	ldr	r3, [pc, #172]	; (800250c <StartSerialTask+0x1a4>)
 800245e:	701a      	strb	r2, [r3, #0]
			  SerialCommand = 0;
 8002460:	4b28      	ldr	r3, [pc, #160]	; (8002504 <StartSerialTask+0x19c>)
 8002462:	2200      	movs	r2, #0
 8002464:	701a      	strb	r2, [r3, #0]
		}
	}
	//----------------------------RX COMUNICATION---------------------------------------------
	HAL_UART_Receive_IT(&huart1, Rx_data, 1);
 8002466:	4931      	ldr	r1, [pc, #196]	; (800252c <StartSerialTask+0x1c4>)
 8002468:	4b2d      	ldr	r3, [pc, #180]	; (8002520 <StartSerialTask+0x1b8>)
 800246a:	2201      	movs	r2, #1
 800246c:	0018      	movs	r0, r3
 800246e:	f002 fcbd 	bl	8004dec <HAL_UART_Receive_IT>
	if (Rx_data[0] == 49) // COMMAND 1
 8002472:	4b2e      	ldr	r3, [pc, #184]	; (800252c <StartSerialTask+0x1c4>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b31      	cmp	r3, #49	; 0x31
 8002478:	d11e      	bne.n	80024b8 <StartSerialTask+0x150>
	{
		sprintf(HEADER1, "Px_Command ON Amplifier Received_Sx");
 800247a:	4a2d      	ldr	r2, [pc, #180]	; (8002530 <StartSerialTask+0x1c8>)
 800247c:	4b25      	ldr	r3, [pc, #148]	; (8002514 <StartSerialTask+0x1ac>)
 800247e:	0011      	movs	r1, r2
 8002480:	0018      	movs	r0, r3
 8002482:	f005 f86f 	bl	8007564 <siprintf>
		sprintf(CR, "\r\n");
 8002486:	4a24      	ldr	r2, [pc, #144]	; (8002518 <StartSerialTask+0x1b0>)
 8002488:	4b24      	ldr	r3, [pc, #144]	; (800251c <StartSerialTask+0x1b4>)
 800248a:	0011      	movs	r1, r2
 800248c:	0018      	movs	r0, r3
 800248e:	f005 f869 	bl	8007564 <siprintf>
		HAL_UART_Transmit(&huart1, HEADER1, sizeof(HEADER1), 35);
 8002492:	4920      	ldr	r1, [pc, #128]	; (8002514 <StartSerialTask+0x1ac>)
 8002494:	4822      	ldr	r0, [pc, #136]	; (8002520 <StartSerialTask+0x1b8>)
 8002496:	2323      	movs	r3, #35	; 0x23
 8002498:	2228      	movs	r2, #40	; 0x28
 800249a:	f002 fc07 	bl	8004cac <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t *)CR, sizeof(CR), 0xFFFF);
 800249e:	4b21      	ldr	r3, [pc, #132]	; (8002524 <StartSerialTask+0x1bc>)
 80024a0:	491e      	ldr	r1, [pc, #120]	; (800251c <StartSerialTask+0x1b4>)
 80024a2:	481f      	ldr	r0, [pc, #124]	; (8002520 <StartSerialTask+0x1b8>)
 80024a4:	2204      	movs	r2, #4
 80024a6:	f002 fc01 	bl	8004cac <HAL_UART_Transmit>
		SerialCommand = 1; 			//COMMAND START AMPIFIER AND SOUND
 80024aa:	4b16      	ldr	r3, [pc, #88]	; (8002504 <StartSerialTask+0x19c>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	701a      	strb	r2, [r3, #0]
		Rx_data[0] = 0;
 80024b0:	4b1e      	ldr	r3, [pc, #120]	; (800252c <StartSerialTask+0x1c4>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	701a      	strb	r2, [r3, #0]
 80024b6:	e75b      	b.n	8002370 <StartSerialTask+0x8>
	}
	else if ((Rx_data[0] == 50))    // COMMAND 2
 80024b8:	4b1c      	ldr	r3, [pc, #112]	; (800252c <StartSerialTask+0x1c4>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b32      	cmp	r3, #50	; 0x32
 80024be:	d000      	beq.n	80024c2 <StartSerialTask+0x15a>
 80024c0:	e756      	b.n	8002370 <StartSerialTask+0x8>
	{
		sprintf(HEADER1, "Px_Command OFF Amplifier Received_Sx");
 80024c2:	4a1c      	ldr	r2, [pc, #112]	; (8002534 <StartSerialTask+0x1cc>)
 80024c4:	4b13      	ldr	r3, [pc, #76]	; (8002514 <StartSerialTask+0x1ac>)
 80024c6:	0011      	movs	r1, r2
 80024c8:	0018      	movs	r0, r3
 80024ca:	f005 f84b 	bl	8007564 <siprintf>
		sprintf(CR, "\r\n");
 80024ce:	4a12      	ldr	r2, [pc, #72]	; (8002518 <StartSerialTask+0x1b0>)
 80024d0:	4b12      	ldr	r3, [pc, #72]	; (800251c <StartSerialTask+0x1b4>)
 80024d2:	0011      	movs	r1, r2
 80024d4:	0018      	movs	r0, r3
 80024d6:	f005 f845 	bl	8007564 <siprintf>
		HAL_UART_Transmit(&huart1, HEADER1, sizeof(HEADER1), 36);
 80024da:	490e      	ldr	r1, [pc, #56]	; (8002514 <StartSerialTask+0x1ac>)
 80024dc:	4810      	ldr	r0, [pc, #64]	; (8002520 <StartSerialTask+0x1b8>)
 80024de:	2324      	movs	r3, #36	; 0x24
 80024e0:	2228      	movs	r2, #40	; 0x28
 80024e2:	f002 fbe3 	bl	8004cac <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t *)CR, sizeof(CR), 0xFFFF);
 80024e6:	4b0f      	ldr	r3, [pc, #60]	; (8002524 <StartSerialTask+0x1bc>)
 80024e8:	490c      	ldr	r1, [pc, #48]	; (800251c <StartSerialTask+0x1b4>)
 80024ea:	480d      	ldr	r0, [pc, #52]	; (8002520 <StartSerialTask+0x1b8>)
 80024ec:	2204      	movs	r2, #4
 80024ee:	f002 fbdd 	bl	8004cac <HAL_UART_Transmit>
		SerialCommand = 2;		   //COMMAND STOP AMPIFIER AND SOUND
 80024f2:	4b04      	ldr	r3, [pc, #16]	; (8002504 <StartSerialTask+0x19c>)
 80024f4:	2202      	movs	r2, #2
 80024f6:	701a      	strb	r2, [r3, #0]
		Rx_data[0] = 0;
 80024f8:	4b0c      	ldr	r3, [pc, #48]	; (800252c <StartSerialTask+0x1c4>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	701a      	strb	r2, [r3, #0]
	osDelay(1);
 80024fe:	e737      	b.n	8002370 <StartSerialTask+0x8>
 8002500:	2000041a 	.word	0x2000041a
 8002504:	20000449 	.word	0x20000449
 8002508:	20000418 	.word	0x20000418
 800250c:	20000419 	.word	0x20000419
 8002510:	08007d88 	.word	0x08007d88
 8002514:	2000041c 	.word	0x2000041c
 8002518:	08007d9c 	.word	0x08007d9c
 800251c:	20000444 	.word	0x20000444
 8002520:	20000384 	.word	0x20000384
 8002524:	0000ffff 	.word	0x0000ffff
 8002528:	08007da0 	.word	0x08007da0
 800252c:	20000448 	.word	0x20000448
 8002530:	08007db4 	.word	0x08007db4
 8002534:	08007dd8 	.word	0x08007dd8

08002538 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a04      	ldr	r2, [pc, #16]	; (8002558 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d101      	bne.n	800254e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800254a:	f000 f9f7 	bl	800293c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800254e:	46c0      	nop			; (mov r8, r8)
 8002550:	46bd      	mov	sp, r7
 8002552:	b002      	add	sp, #8
 8002554:	bd80      	pop	{r7, pc}
 8002556:	46c0      	nop			; (mov r8, r8)
 8002558:	40012c00 	.word	0x40012c00

0800255c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002560:	b672      	cpsid	i
}
 8002562:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002564:	e7fe      	b.n	8002564 <Error_Handler+0x8>
	...

08002568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256e:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <HAL_MspInit+0x50>)
 8002570:	699a      	ldr	r2, [r3, #24]
 8002572:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <HAL_MspInit+0x50>)
 8002574:	2101      	movs	r1, #1
 8002576:	430a      	orrs	r2, r1
 8002578:	619a      	str	r2, [r3, #24]
 800257a:	4b0f      	ldr	r3, [pc, #60]	; (80025b8 <HAL_MspInit+0x50>)
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	2201      	movs	r2, #1
 8002580:	4013      	ands	r3, r2
 8002582:	607b      	str	r3, [r7, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002586:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <HAL_MspInit+0x50>)
 8002588:	69da      	ldr	r2, [r3, #28]
 800258a:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <HAL_MspInit+0x50>)
 800258c:	2180      	movs	r1, #128	; 0x80
 800258e:	0549      	lsls	r1, r1, #21
 8002590:	430a      	orrs	r2, r1
 8002592:	61da      	str	r2, [r3, #28]
 8002594:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <HAL_MspInit+0x50>)
 8002596:	69da      	ldr	r2, [r3, #28]
 8002598:	2380      	movs	r3, #128	; 0x80
 800259a:	055b      	lsls	r3, r3, #21
 800259c:	4013      	ands	r3, r2
 800259e:	603b      	str	r3, [r7, #0]
 80025a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80025a2:	2302      	movs	r3, #2
 80025a4:	425b      	negs	r3, r3
 80025a6:	2200      	movs	r2, #0
 80025a8:	2103      	movs	r1, #3
 80025aa:	0018      	movs	r0, r3
 80025ac:	f001 f896 	bl	80036dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025b0:	46c0      	nop			; (mov r8, r8)
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b002      	add	sp, #8
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40021000 	.word	0x40021000

080025bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a0e      	ldr	r2, [pc, #56]	; (8002604 <HAL_ADC_MspInit+0x48>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d115      	bne.n	80025fa <HAL_ADC_MspInit+0x3e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80025ce:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <HAL_ADC_MspInit+0x4c>)
 80025d0:	699a      	ldr	r2, [r3, #24]
 80025d2:	4b0d      	ldr	r3, [pc, #52]	; (8002608 <HAL_ADC_MspInit+0x4c>)
 80025d4:	2180      	movs	r1, #128	; 0x80
 80025d6:	0089      	lsls	r1, r1, #2
 80025d8:	430a      	orrs	r2, r1
 80025da:	619a      	str	r2, [r3, #24]
 80025dc:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <HAL_ADC_MspInit+0x4c>)
 80025de:	699a      	ldr	r2, [r3, #24]
 80025e0:	2380      	movs	r3, #128	; 0x80
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4013      	ands	r3, r2
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 3, 0);
 80025ea:	2200      	movs	r2, #0
 80025ec:	2103      	movs	r1, #3
 80025ee:	200c      	movs	r0, #12
 80025f0:	f001 f874 	bl	80036dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80025f4:	200c      	movs	r0, #12
 80025f6:	f001 f886 	bl	8003706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80025fa:	46c0      	nop			; (mov r8, r8)
 80025fc:	46bd      	mov	sp, r7
 80025fe:	b004      	add	sp, #16
 8002600:	bd80      	pop	{r7, pc}
 8002602:	46c0      	nop			; (mov r8, r8)
 8002604:	40012400 	.word	0x40012400
 8002608:	40021000 	.word	0x40021000

0800260c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800260c:	b590      	push	{r4, r7, lr}
 800260e:	b08b      	sub	sp, #44	; 0x2c
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002614:	2414      	movs	r4, #20
 8002616:	193b      	adds	r3, r7, r4
 8002618:	0018      	movs	r0, r3
 800261a:	2314      	movs	r3, #20
 800261c:	001a      	movs	r2, r3
 800261e:	2100      	movs	r1, #0
 8002620:	f004 fe79 	bl	8007316 <memset>
  if(huart->Instance==USART1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a21      	ldr	r2, [pc, #132]	; (80026b0 <HAL_UART_MspInit+0xa4>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d13b      	bne.n	80026a6 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800262e:	4b21      	ldr	r3, [pc, #132]	; (80026b4 <HAL_UART_MspInit+0xa8>)
 8002630:	699a      	ldr	r2, [r3, #24]
 8002632:	4b20      	ldr	r3, [pc, #128]	; (80026b4 <HAL_UART_MspInit+0xa8>)
 8002634:	2180      	movs	r1, #128	; 0x80
 8002636:	01c9      	lsls	r1, r1, #7
 8002638:	430a      	orrs	r2, r1
 800263a:	619a      	str	r2, [r3, #24]
 800263c:	4b1d      	ldr	r3, [pc, #116]	; (80026b4 <HAL_UART_MspInit+0xa8>)
 800263e:	699a      	ldr	r2, [r3, #24]
 8002640:	2380      	movs	r3, #128	; 0x80
 8002642:	01db      	lsls	r3, r3, #7
 8002644:	4013      	ands	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
 8002648:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800264a:	4b1a      	ldr	r3, [pc, #104]	; (80026b4 <HAL_UART_MspInit+0xa8>)
 800264c:	695a      	ldr	r2, [r3, #20]
 800264e:	4b19      	ldr	r3, [pc, #100]	; (80026b4 <HAL_UART_MspInit+0xa8>)
 8002650:	2180      	movs	r1, #128	; 0x80
 8002652:	0289      	lsls	r1, r1, #10
 8002654:	430a      	orrs	r2, r1
 8002656:	615a      	str	r2, [r3, #20]
 8002658:	4b16      	ldr	r3, [pc, #88]	; (80026b4 <HAL_UART_MspInit+0xa8>)
 800265a:	695a      	ldr	r2, [r3, #20]
 800265c:	2380      	movs	r3, #128	; 0x80
 800265e:	029b      	lsls	r3, r3, #10
 8002660:	4013      	ands	r3, r2
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002666:	193b      	adds	r3, r7, r4
 8002668:	22c0      	movs	r2, #192	; 0xc0
 800266a:	00d2      	lsls	r2, r2, #3
 800266c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266e:	0021      	movs	r1, r4
 8002670:	187b      	adds	r3, r7, r1
 8002672:	2202      	movs	r2, #2
 8002674:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002676:	187b      	adds	r3, r7, r1
 8002678:	2200      	movs	r2, #0
 800267a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800267c:	187b      	adds	r3, r7, r1
 800267e:	2203      	movs	r2, #3
 8002680:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002682:	187b      	adds	r3, r7, r1
 8002684:	2201      	movs	r2, #1
 8002686:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002688:	187a      	adds	r2, r7, r1
 800268a:	2390      	movs	r3, #144	; 0x90
 800268c:	05db      	lsls	r3, r3, #23
 800268e:	0011      	movs	r1, r2
 8002690:	0018      	movs	r0, r3
 8002692:	f001 f8c5 	bl	8003820 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8002696:	2200      	movs	r2, #0
 8002698:	2103      	movs	r1, #3
 800269a:	201b      	movs	r0, #27
 800269c:	f001 f81e 	bl	80036dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026a0:	201b      	movs	r0, #27
 80026a2:	f001 f830 	bl	8003706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	46bd      	mov	sp, r7
 80026aa:	b00b      	add	sp, #44	; 0x2c
 80026ac:	bd90      	pop	{r4, r7, pc}
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	40013800 	.word	0x40013800
 80026b4:	40021000 	.word	0x40021000

080026b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026b8:	b5b0      	push	{r4, r5, r7, lr}
 80026ba:	b08c      	sub	sp, #48	; 0x30
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80026c0:	2300      	movs	r3, #0
 80026c2:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t              uwPrescalerValue = 0U;
 80026c4:	2300      	movs	r3, #0
 80026c6:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80026c8:	4b38      	ldr	r3, [pc, #224]	; (80027ac <HAL_InitTick+0xf4>)
 80026ca:	699a      	ldr	r2, [r3, #24]
 80026cc:	4b37      	ldr	r3, [pc, #220]	; (80027ac <HAL_InitTick+0xf4>)
 80026ce:	2180      	movs	r1, #128	; 0x80
 80026d0:	0109      	lsls	r1, r1, #4
 80026d2:	430a      	orrs	r2, r1
 80026d4:	619a      	str	r2, [r3, #24]
 80026d6:	4b35      	ldr	r3, [pc, #212]	; (80027ac <HAL_InitTick+0xf4>)
 80026d8:	699a      	ldr	r2, [r3, #24]
 80026da:	2380      	movs	r3, #128	; 0x80
 80026dc:	011b      	lsls	r3, r3, #4
 80026de:	4013      	ands	r3, r2
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80026e4:	230c      	movs	r3, #12
 80026e6:	18fa      	adds	r2, r7, r3
 80026e8:	2410      	movs	r4, #16
 80026ea:	193b      	adds	r3, r7, r4
 80026ec:	0011      	movs	r1, r2
 80026ee:	0018      	movs	r0, r3
 80026f0:	f001 ff2a 	bl	8004548 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80026f4:	193b      	adds	r3, r7, r4
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d104      	bne.n	800270a <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002700:	f001 ff0c 	bl	800451c <HAL_RCC_GetPCLK1Freq>
 8002704:	0003      	movs	r3, r0
 8002706:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002708:	e004      	b.n	8002714 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800270a:	f001 ff07 	bl	800451c <HAL_RCC_GetPCLK1Freq>
 800270e:	0003      	movs	r3, r0
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002716:	4926      	ldr	r1, [pc, #152]	; (80027b0 <HAL_InitTick+0xf8>)
 8002718:	0018      	movs	r0, r3
 800271a:	f7fd fcff 	bl	800011c <__udivsi3>
 800271e:	0003      	movs	r3, r0
 8002720:	3b01      	subs	r3, #1
 8002722:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002724:	4b23      	ldr	r3, [pc, #140]	; (80027b4 <HAL_InitTick+0xfc>)
 8002726:	4a24      	ldr	r2, [pc, #144]	; (80027b8 <HAL_InitTick+0x100>)
 8002728:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800272a:	4b22      	ldr	r3, [pc, #136]	; (80027b4 <HAL_InitTick+0xfc>)
 800272c:	4a23      	ldr	r2, [pc, #140]	; (80027bc <HAL_InitTick+0x104>)
 800272e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002730:	4b20      	ldr	r3, [pc, #128]	; (80027b4 <HAL_InitTick+0xfc>)
 8002732:	6a3a      	ldr	r2, [r7, #32]
 8002734:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8002736:	4b1f      	ldr	r3, [pc, #124]	; (80027b4 <HAL_InitTick+0xfc>)
 8002738:	2200      	movs	r2, #0
 800273a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800273c:	4b1d      	ldr	r3, [pc, #116]	; (80027b4 <HAL_InitTick+0xfc>)
 800273e:	2200      	movs	r2, #0
 8002740:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002742:	4b1c      	ldr	r3, [pc, #112]	; (80027b4 <HAL_InitTick+0xfc>)
 8002744:	2200      	movs	r2, #0
 8002746:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002748:	252b      	movs	r5, #43	; 0x2b
 800274a:	197c      	adds	r4, r7, r5
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <HAL_InitTick+0xfc>)
 800274e:	0018      	movs	r0, r3
 8002750:	f002 f812 	bl	8004778 <HAL_TIM_Base_Init>
 8002754:	0003      	movs	r3, r0
 8002756:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8002758:	197b      	adds	r3, r7, r5
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d11e      	bne.n	800279e <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002760:	197c      	adds	r4, r7, r5
 8002762:	4b14      	ldr	r3, [pc, #80]	; (80027b4 <HAL_InitTick+0xfc>)
 8002764:	0018      	movs	r0, r3
 8002766:	f002 f85f 	bl	8004828 <HAL_TIM_Base_Start_IT>
 800276a:	0003      	movs	r3, r0
 800276c:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 800276e:	197b      	adds	r3, r7, r5
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d113      	bne.n	800279e <HAL_InitTick+0xe6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8002776:	200d      	movs	r0, #13
 8002778:	f000 ffc5 	bl	8003706 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b03      	cmp	r3, #3
 8002780:	d809      	bhi.n	8002796 <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	0019      	movs	r1, r3
 8002788:	200d      	movs	r0, #13
 800278a:	f000 ffa7 	bl	80036dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800278e:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <HAL_InitTick+0x108>)
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	e003      	b.n	800279e <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 8002796:	232b      	movs	r3, #43	; 0x2b
 8002798:	18fb      	adds	r3, r7, r3
 800279a:	2201      	movs	r2, #1
 800279c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 800279e:	232b      	movs	r3, #43	; 0x2b
 80027a0:	18fb      	adds	r3, r7, r3
 80027a2:	781b      	ldrb	r3, [r3, #0]
}
 80027a4:	0018      	movs	r0, r3
 80027a6:	46bd      	mov	sp, r7
 80027a8:	b00c      	add	sp, #48	; 0x30
 80027aa:	bdb0      	pop	{r4, r5, r7, pc}
 80027ac:	40021000 	.word	0x40021000
 80027b0:	000f4240 	.word	0x000f4240
 80027b4:	20000458 	.word	0x20000458
 80027b8:	40012c00 	.word	0x40012c00
 80027bc:	000003e7 	.word	0x000003e7
 80027c0:	20000004 	.word	0x20000004

080027c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027c8:	e7fe      	b.n	80027c8 <NMI_Handler+0x4>

080027ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027ce:	e7fe      	b.n	80027ce <HardFault_Handler+0x4>

080027d0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80027d4:	4b03      	ldr	r3, [pc, #12]	; (80027e4 <ADC1_IRQHandler+0x14>)
 80027d6:	0018      	movs	r0, r3
 80027d8:	f000 fb44 	bl	8002e64 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80027dc:	46c0      	nop			; (mov r8, r8)
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	20000344 	.word	0x20000344

080027e8 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80027ec:	4b03      	ldr	r3, [pc, #12]	; (80027fc <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80027ee:	0018      	movs	r0, r3
 80027f0:	f002 f866 	bl	80048c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80027f4:	46c0      	nop			; (mov r8, r8)
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	20000458 	.word	0x20000458

08002800 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002804:	4b03      	ldr	r3, [pc, #12]	; (8002814 <USART1_IRQHandler+0x14>)
 8002806:	0018      	movs	r0, r3
 8002808:	f002 fb48 	bl	8004e9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800280c:	46c0      	nop			; (mov r8, r8)
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	20000384 	.word	0x20000384

08002818 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002820:	4a14      	ldr	r2, [pc, #80]	; (8002874 <_sbrk+0x5c>)
 8002822:	4b15      	ldr	r3, [pc, #84]	; (8002878 <_sbrk+0x60>)
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800282c:	4b13      	ldr	r3, [pc, #76]	; (800287c <_sbrk+0x64>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d102      	bne.n	800283a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002834:	4b11      	ldr	r3, [pc, #68]	; (800287c <_sbrk+0x64>)
 8002836:	4a12      	ldr	r2, [pc, #72]	; (8002880 <_sbrk+0x68>)
 8002838:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800283a:	4b10      	ldr	r3, [pc, #64]	; (800287c <_sbrk+0x64>)
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	18d3      	adds	r3, r2, r3
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	429a      	cmp	r2, r3
 8002846:	d207      	bcs.n	8002858 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002848:	f004 fd30 	bl	80072ac <__errno>
 800284c:	0003      	movs	r3, r0
 800284e:	220c      	movs	r2, #12
 8002850:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002852:	2301      	movs	r3, #1
 8002854:	425b      	negs	r3, r3
 8002856:	e009      	b.n	800286c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002858:	4b08      	ldr	r3, [pc, #32]	; (800287c <_sbrk+0x64>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800285e:	4b07      	ldr	r3, [pc, #28]	; (800287c <_sbrk+0x64>)
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	18d2      	adds	r2, r2, r3
 8002866:	4b05      	ldr	r3, [pc, #20]	; (800287c <_sbrk+0x64>)
 8002868:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800286a:	68fb      	ldr	r3, [r7, #12]
}
 800286c:	0018      	movs	r0, r3
 800286e:	46bd      	mov	sp, r7
 8002870:	b006      	add	sp, #24
 8002872:	bd80      	pop	{r7, pc}
 8002874:	20001800 	.word	0x20001800
 8002878:	00000400 	.word	0x00000400
 800287c:	200004a0 	.word	0x200004a0
 8002880:	20001200 	.word	0x20001200

08002884 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002888:	46c0      	nop			; (mov r8, r8)
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
	...

08002890 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002890:	4813      	ldr	r0, [pc, #76]	; (80028e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002892:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002894:	f7ff fff6 	bl	8002884 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8002898:	4812      	ldr	r0, [pc, #72]	; (80028e4 <LoopForever+0x6>)
    LDR R1, [R0]
 800289a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800289c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800289e:	4a12      	ldr	r2, [pc, #72]	; (80028e8 <LoopForever+0xa>)
    CMP R1, R2
 80028a0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80028a2:	d105      	bne.n	80028b0 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80028a4:	4811      	ldr	r0, [pc, #68]	; (80028ec <LoopForever+0xe>)
    LDR R1,=0x00000001
 80028a6:	4912      	ldr	r1, [pc, #72]	; (80028f0 <LoopForever+0x12>)
    STR R1, [R0]
 80028a8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80028aa:	4812      	ldr	r0, [pc, #72]	; (80028f4 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80028ac:	4912      	ldr	r1, [pc, #72]	; (80028f8 <LoopForever+0x1a>)
    STR R1, [R0]
 80028ae:	6001      	str	r1, [r0, #0]

080028b0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028b0:	4812      	ldr	r0, [pc, #72]	; (80028fc <LoopForever+0x1e>)
  ldr r1, =_edata
 80028b2:	4913      	ldr	r1, [pc, #76]	; (8002900 <LoopForever+0x22>)
  ldr r2, =_sidata
 80028b4:	4a13      	ldr	r2, [pc, #76]	; (8002904 <LoopForever+0x26>)
  movs r3, #0
 80028b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028b8:	e002      	b.n	80028c0 <LoopCopyDataInit>

080028ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028be:	3304      	adds	r3, #4

080028c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028c4:	d3f9      	bcc.n	80028ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028c6:	4a10      	ldr	r2, [pc, #64]	; (8002908 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80028c8:	4c10      	ldr	r4, [pc, #64]	; (800290c <LoopForever+0x2e>)
  movs r3, #0
 80028ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028cc:	e001      	b.n	80028d2 <LoopFillZerobss>

080028ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028d0:	3204      	adds	r2, #4

080028d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028d4:	d3fb      	bcc.n	80028ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80028d6:	f004 fcef 	bl	80072b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028da:	f7ff fa11 	bl	8001d00 <main>

080028de <LoopForever>:

LoopForever:
    b LoopForever
 80028de:	e7fe      	b.n	80028de <LoopForever>
  ldr   r0, =_estack
 80028e0:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80028e4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80028e8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80028ec:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80028f0:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80028f4:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80028f8:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80028fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002900:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002904:	08007f5c 	.word	0x08007f5c
  ldr r2, =_sbss
 8002908:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800290c:	200011fc 	.word	0x200011fc

08002910 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002910:	e7fe      	b.n	8002910 <CEC_CAN_IRQHandler>
	...

08002914 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002918:	4b07      	ldr	r3, [pc, #28]	; (8002938 <HAL_Init+0x24>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4b06      	ldr	r3, [pc, #24]	; (8002938 <HAL_Init+0x24>)
 800291e:	2110      	movs	r1, #16
 8002920:	430a      	orrs	r2, r1
 8002922:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002924:	2003      	movs	r0, #3
 8002926:	f7ff fec7 	bl	80026b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800292a:	f7ff fe1d 	bl	8002568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	0018      	movs	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	40022000 	.word	0x40022000

0800293c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002940:	4b05      	ldr	r3, [pc, #20]	; (8002958 <HAL_IncTick+0x1c>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	001a      	movs	r2, r3
 8002946:	4b05      	ldr	r3, [pc, #20]	; (800295c <HAL_IncTick+0x20>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	18d2      	adds	r2, r2, r3
 800294c:	4b03      	ldr	r3, [pc, #12]	; (800295c <HAL_IncTick+0x20>)
 800294e:	601a      	str	r2, [r3, #0]
}
 8002950:	46c0      	nop			; (mov r8, r8)
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	20000008 	.word	0x20000008
 800295c:	200004a4 	.word	0x200004a4

08002960 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  return uwTick;
 8002964:	4b02      	ldr	r3, [pc, #8]	; (8002970 <HAL_GetTick+0x10>)
 8002966:	681b      	ldr	r3, [r3, #0]
}
 8002968:	0018      	movs	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	200004a4 	.word	0x200004a4

08002974 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800297c:	230f      	movs	r3, #15
 800297e:	18fb      	adds	r3, r7, r3
 8002980:	2200      	movs	r2, #0
 8002982:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002984:	2300      	movs	r3, #0
 8002986:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e125      	b.n	8002bde <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10a      	bne.n	80029b0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2234      	movs	r2, #52	; 0x34
 80029a4:	2100      	movs	r1, #0
 80029a6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	0018      	movs	r0, r3
 80029ac:	f7ff fe06 	bl	80025bc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b4:	2210      	movs	r2, #16
 80029b6:	4013      	ands	r3, r2
 80029b8:	d000      	beq.n	80029bc <HAL_ADC_Init+0x48>
 80029ba:	e103      	b.n	8002bc4 <HAL_ADC_Init+0x250>
 80029bc:	230f      	movs	r3, #15
 80029be:	18fb      	adds	r3, r7, r3
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d000      	beq.n	80029c8 <HAL_ADC_Init+0x54>
 80029c6:	e0fd      	b.n	8002bc4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	2204      	movs	r2, #4
 80029d0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80029d2:	d000      	beq.n	80029d6 <HAL_ADC_Init+0x62>
 80029d4:	e0f6      	b.n	8002bc4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029da:	4a83      	ldr	r2, [pc, #524]	; (8002be8 <HAL_ADC_Init+0x274>)
 80029dc:	4013      	ands	r3, r2
 80029de:	2202      	movs	r2, #2
 80029e0:	431a      	orrs	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	2203      	movs	r2, #3
 80029ee:	4013      	ands	r3, r2
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d112      	bne.n	8002a1a <HAL_ADC_Init+0xa6>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2201      	movs	r2, #1
 80029fc:	4013      	ands	r3, r2
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d009      	beq.n	8002a16 <HAL_ADC_Init+0xa2>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68da      	ldr	r2, [r3, #12]
 8002a08:	2380      	movs	r3, #128	; 0x80
 8002a0a:	021b      	lsls	r3, r3, #8
 8002a0c:	401a      	ands	r2, r3
 8002a0e:	2380      	movs	r3, #128	; 0x80
 8002a10:	021b      	lsls	r3, r3, #8
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d101      	bne.n	8002a1a <HAL_ADC_Init+0xa6>
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <HAL_ADC_Init+0xa8>
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d116      	bne.n	8002a4e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	2218      	movs	r2, #24
 8002a28:	4393      	bics	r3, r2
 8002a2a:	0019      	movs	r1, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	430a      	orrs	r2, r1
 8002a36:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	0899      	lsrs	r1, r3, #2
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4964      	ldr	r1, [pc, #400]	; (8002bec <HAL_ADC_Init+0x278>)
 8002a5a:	400a      	ands	r2, r1
 8002a5c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	7e1b      	ldrb	r3, [r3, #24]
 8002a62:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	7e5b      	ldrb	r3, [r3, #25]
 8002a68:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a6a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	7e9b      	ldrb	r3, [r3, #26]
 8002a70:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002a72:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d002      	beq.n	8002a82 <HAL_ADC_Init+0x10e>
 8002a7c:	2380      	movs	r3, #128	; 0x80
 8002a7e:	015b      	lsls	r3, r3, #5
 8002a80:	e000      	b.n	8002a84 <HAL_ADC_Init+0x110>
 8002a82:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002a84:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002a8a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d101      	bne.n	8002a98 <HAL_ADC_Init+0x124>
 8002a94:	2304      	movs	r3, #4
 8002a96:	e000      	b.n	8002a9a <HAL_ADC_Init+0x126>
 8002a98:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002a9a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2124      	movs	r1, #36	; 0x24
 8002aa0:	5c5b      	ldrb	r3, [r3, r1]
 8002aa2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002aa4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	7edb      	ldrb	r3, [r3, #27]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d115      	bne.n	8002ae0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	7e9b      	ldrb	r3, [r3, #26]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d105      	bne.n	8002ac8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2280      	movs	r2, #128	; 0x80
 8002ac0:	0252      	lsls	r2, r2, #9
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	e00b      	b.n	8002ae0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002acc:	2220      	movs	r2, #32
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad8:	2201      	movs	r2, #1
 8002ada:	431a      	orrs	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69da      	ldr	r2, [r3, #28]
 8002ae4:	23c2      	movs	r3, #194	; 0xc2
 8002ae6:	33ff      	adds	r3, #255	; 0xff
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d007      	beq.n	8002afc <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002af4:	4313      	orrs	r3, r2
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68d9      	ldr	r1, [r3, #12]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b10:	2380      	movs	r3, #128	; 0x80
 8002b12:	055b      	lsls	r3, r3, #21
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d01b      	beq.n	8002b50 <HAL_ADC_Init+0x1dc>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d017      	beq.n	8002b50 <HAL_ADC_Init+0x1dc>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d013      	beq.n	8002b50 <HAL_ADC_Init+0x1dc>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	d00f      	beq.n	8002b50 <HAL_ADC_Init+0x1dc>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b34:	2b04      	cmp	r3, #4
 8002b36:	d00b      	beq.n	8002b50 <HAL_ADC_Init+0x1dc>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3c:	2b05      	cmp	r3, #5
 8002b3e:	d007      	beq.n	8002b50 <HAL_ADC_Init+0x1dc>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b44:	2b06      	cmp	r3, #6
 8002b46:	d003      	beq.n	8002b50 <HAL_ADC_Init+0x1dc>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4c:	2b07      	cmp	r3, #7
 8002b4e:	d112      	bne.n	8002b76 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	695a      	ldr	r2, [r3, #20]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2107      	movs	r1, #7
 8002b5c:	438a      	bics	r2, r1
 8002b5e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6959      	ldr	r1, [r3, #20]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6a:	2207      	movs	r2, #7
 8002b6c:	401a      	ands	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	4a1c      	ldr	r2, [pc, #112]	; (8002bf0 <HAL_ADC_Init+0x27c>)
 8002b7e:	4013      	ands	r3, r2
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d10b      	bne.n	8002b9e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b90:	2203      	movs	r2, #3
 8002b92:	4393      	bics	r3, r2
 8002b94:	2201      	movs	r2, #1
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002b9c:	e01c      	b.n	8002bd8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba2:	2212      	movs	r2, #18
 8002ba4:	4393      	bics	r3, r2
 8002ba6:	2210      	movs	r2, #16
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002bba:	230f      	movs	r3, #15
 8002bbc:	18fb      	adds	r3, r7, r3
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002bc2:	e009      	b.n	8002bd8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc8:	2210      	movs	r2, #16
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002bd0:	230f      	movs	r3, #15
 8002bd2:	18fb      	adds	r3, r7, r3
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002bd8:	230f      	movs	r3, #15
 8002bda:	18fb      	adds	r3, r7, r3
 8002bdc:	781b      	ldrb	r3, [r3, #0]
}
 8002bde:	0018      	movs	r0, r3
 8002be0:	46bd      	mov	sp, r7
 8002be2:	b004      	add	sp, #16
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	fffffefd 	.word	0xfffffefd
 8002bec:	fffe0219 	.word	0xfffe0219
 8002bf0:	833fffe7 	.word	0x833fffe7

08002bf4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002bf4:	b590      	push	{r4, r7, lr}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bfc:	230f      	movs	r3, #15
 8002bfe:	18fb      	adds	r3, r7, r3
 8002c00:	2200      	movs	r2, #0
 8002c02:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	2204      	movs	r2, #4
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d138      	bne.n	8002c82 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2234      	movs	r2, #52	; 0x34
 8002c14:	5c9b      	ldrb	r3, [r3, r2]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d101      	bne.n	8002c1e <HAL_ADC_Start+0x2a>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e038      	b.n	8002c90 <HAL_ADC_Start+0x9c>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2234      	movs	r2, #52	; 0x34
 8002c22:	2101      	movs	r1, #1
 8002c24:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	7e5b      	ldrb	r3, [r3, #25]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d007      	beq.n	8002c3e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002c2e:	230f      	movs	r3, #15
 8002c30:	18fc      	adds	r4, r7, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	0018      	movs	r0, r3
 8002c36:	f000 fadf 	bl	80031f8 <ADC_Enable>
 8002c3a:	0003      	movs	r3, r0
 8002c3c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002c3e:	230f      	movs	r3, #15
 8002c40:	18fb      	adds	r3, r7, r3
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d120      	bne.n	8002c8a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4c:	4a12      	ldr	r2, [pc, #72]	; (8002c98 <HAL_ADC_Start+0xa4>)
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2280      	movs	r2, #128	; 0x80
 8002c52:	0052      	lsls	r2, r2, #1
 8002c54:	431a      	orrs	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2234      	movs	r2, #52	; 0x34
 8002c64:	2100      	movs	r1, #0
 8002c66:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	221c      	movs	r2, #28
 8002c6e:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2104      	movs	r1, #4
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	609a      	str	r2, [r3, #8]
 8002c80:	e003      	b.n	8002c8a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c82:	230f      	movs	r3, #15
 8002c84:	18fb      	adds	r3, r7, r3
 8002c86:	2202      	movs	r2, #2
 8002c88:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002c8a:	230f      	movs	r3, #15
 8002c8c:	18fb      	adds	r3, r7, r3
 8002c8e:	781b      	ldrb	r3, [r3, #0]
}
 8002c90:	0018      	movs	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b005      	add	sp, #20
 8002c96:	bd90      	pop	{r4, r7, pc}
 8002c98:	fffff0fe 	.word	0xfffff0fe

08002c9c <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 8002c9c:	b5b0      	push	{r4, r5, r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ca4:	230f      	movs	r3, #15
 8002ca6:	18fb      	adds	r3, r7, r3
 8002ca8:	2200      	movs	r2, #0
 8002caa:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2234      	movs	r2, #52	; 0x34
 8002cb0:	5c9b      	ldrb	r3, [r3, r2]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d101      	bne.n	8002cba <HAL_ADC_Stop+0x1e>
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	e029      	b.n	8002d0e <HAL_ADC_Stop+0x72>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2234      	movs	r2, #52	; 0x34
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002cc2:	250f      	movs	r5, #15
 8002cc4:	197c      	adds	r4, r7, r5
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f000 fb8a 	bl	80033e2 <ADC_ConversionStop>
 8002cce:	0003      	movs	r3, r0
 8002cd0:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002cd2:	197b      	adds	r3, r7, r5
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d112      	bne.n	8002d00 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002cda:	197c      	adds	r4, r7, r5
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	0018      	movs	r0, r3
 8002ce0:	f000 fb0e 	bl	8003300 <ADC_Disable>
 8002ce4:	0003      	movs	r3, r0
 8002ce6:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002ce8:	197b      	adds	r3, r7, r5
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d107      	bne.n	8002d00 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf4:	4a08      	ldr	r2, [pc, #32]	; (8002d18 <HAL_ADC_Stop+0x7c>)
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2234      	movs	r2, #52	; 0x34
 8002d04:	2100      	movs	r1, #0
 8002d06:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002d08:	230f      	movs	r3, #15
 8002d0a:	18fb      	adds	r3, r7, r3
 8002d0c:	781b      	ldrb	r3, [r3, #0]
}
 8002d0e:	0018      	movs	r0, r3
 8002d10:	46bd      	mov	sp, r7
 8002d12:	b004      	add	sp, #16
 8002d14:	bdb0      	pop	{r4, r5, r7, pc}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	fffffefe 	.word	0xfffffefe

08002d1c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	2b08      	cmp	r3, #8
 8002d2c:	d102      	bne.n	8002d34 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002d2e:	2308      	movs	r3, #8
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	e014      	b.n	8002d5e <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d10b      	bne.n	8002d5a <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d46:	2220      	movs	r2, #32
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2234      	movs	r2, #52	; 0x34
 8002d52:	2100      	movs	r1, #0
 8002d54:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e071      	b.n	8002e3e <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002d5a:	230c      	movs	r3, #12
 8002d5c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002d5e:	f7ff fdff 	bl	8002960 <HAL_GetTick>
 8002d62:	0003      	movs	r3, r0
 8002d64:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002d66:	e01f      	b.n	8002da8 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	d01c      	beq.n	8002da8 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d007      	beq.n	8002d84 <HAL_ADC_PollForConversion+0x68>
 8002d74:	f7ff fdf4 	bl	8002960 <HAL_GetTick>
 8002d78:	0002      	movs	r2, r0
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d211      	bcs.n	8002da8 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	d10b      	bne.n	8002da8 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d94:	2204      	movs	r2, #4
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2234      	movs	r2, #52	; 0x34
 8002da0:	2100      	movs	r1, #0
 8002da2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e04a      	b.n	8002e3e <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	4013      	ands	r3, r2
 8002db2:	d0d9      	beq.n	8002d68 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db8:	2280      	movs	r2, #128	; 0x80
 8002dba:	0092      	lsls	r2, r2, #2
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	23c0      	movs	r3, #192	; 0xc0
 8002dca:	011b      	lsls	r3, r3, #4
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d12d      	bne.n	8002e2c <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d129      	bne.n	8002e2c <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2208      	movs	r2, #8
 8002de0:	4013      	ands	r3, r2
 8002de2:	2b08      	cmp	r3, #8
 8002de4:	d122      	bne.n	8002e2c <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	2204      	movs	r2, #4
 8002dee:	4013      	ands	r3, r2
 8002df0:	d110      	bne.n	8002e14 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	210c      	movs	r1, #12
 8002dfe:	438a      	bics	r2, r1
 8002e00:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e06:	4a10      	ldr	r2, [pc, #64]	; (8002e48 <HAL_ADC_PollForConversion+0x12c>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	639a      	str	r2, [r3, #56]	; 0x38
 8002e12:	e00b      	b.n	8002e2c <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e18:	2220      	movs	r2, #32
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e24:	2201      	movs	r2, #1
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	7e1b      	ldrb	r3, [r3, #24]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d103      	bne.n	8002e3c <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	220c      	movs	r2, #12
 8002e3a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	0018      	movs	r0, r3
 8002e40:	46bd      	mov	sp, r7
 8002e42:	b004      	add	sp, #16
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	fffffefe 	.word	0xfffffefe

08002e4c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	b002      	add	sp, #8
 8002e60:	bd80      	pop	{r7, pc}
	...

08002e64 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2204      	movs	r2, #4
 8002e80:	4013      	ands	r3, r2
 8002e82:	d003      	beq.n	8002e8c <HAL_ADC_IRQHandler+0x28>
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2204      	movs	r2, #4
 8002e88:	4013      	ands	r3, r2
 8002e8a:	d107      	bne.n	8002e9c <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2208      	movs	r2, #8
 8002e90:	4013      	ands	r3, r2
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002e92:	d049      	beq.n	8002f28 <HAL_ADC_IRQHandler+0xc4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2208      	movs	r2, #8
 8002e98:	4013      	ands	r3, r2
 8002e9a:	d045      	beq.n	8002f28 <HAL_ADC_IRQHandler+0xc4>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea0:	2210      	movs	r2, #16
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	d106      	bne.n	8002eb4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eaa:	2280      	movs	r2, #128	; 0x80
 8002eac:	0092      	lsls	r2, r2, #2
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	23c0      	movs	r3, #192	; 0xc0
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	d12a      	bne.n	8002f18 <HAL_ADC_IRQHandler+0xb4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d126      	bne.n	8002f18 <HAL_ADC_IRQHandler+0xb4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2208      	movs	r2, #8
 8002ece:	4013      	ands	r3, r2
 8002ed0:	d022      	beq.n	8002f18 <HAL_ADC_IRQHandler+0xb4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	2204      	movs	r2, #4
 8002eda:	4013      	ands	r3, r2
 8002edc:	d110      	bne.n	8002f00 <HAL_ADC_IRQHandler+0x9c>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	210c      	movs	r1, #12
 8002eea:	438a      	bics	r2, r1
 8002eec:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef2:	4a2d      	ldr	r2, [pc, #180]	; (8002fa8 <HAL_ADC_IRQHandler+0x144>)
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	639a      	str	r2, [r3, #56]	; 0x38
 8002efe:	e00b      	b.n	8002f18 <HAL_ADC_IRQHandler+0xb4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f04:	2220      	movs	r2, #32
 8002f06:	431a      	orrs	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f10:	2201      	movs	r2, #1
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f000 f846 	bl	8002fac <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	220c      	movs	r2, #12
 8002f26:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2280      	movs	r2, #128	; 0x80
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	d012      	beq.n	8002f56 <HAL_ADC_IRQHandler+0xf2>
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2280      	movs	r2, #128	; 0x80
 8002f34:	4013      	ands	r3, r2
 8002f36:	d00e      	beq.n	8002f56 <HAL_ADC_IRQHandler+0xf2>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3c:	2280      	movs	r2, #128	; 0x80
 8002f3e:	0252      	lsls	r2, r2, #9
 8002f40:	431a      	orrs	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	0018      	movs	r0, r3
 8002f4a:	f000 f837 	bl	8002fbc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2280      	movs	r2, #128	; 0x80
 8002f54:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2210      	movs	r2, #16
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d020      	beq.n	8002fa0 <HAL_ADC_IRQHandler+0x13c>
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2210      	movs	r2, #16
 8002f62:	4013      	ands	r3, r2
 8002f64:	d01c      	beq.n	8002fa0 <HAL_ADC_IRQHandler+0x13c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d006      	beq.n	8002f7c <HAL_ADC_IRQHandler+0x118>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	2201      	movs	r2, #1
 8002f76:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d10d      	bne.n	8002f98 <HAL_ADC_IRQHandler+0x134>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f80:	2202      	movs	r2, #2
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2210      	movs	r2, #16
 8002f8e:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	0018      	movs	r0, r3
 8002f94:	f000 f81a 	bl	8002fcc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2210      	movs	r2, #16
 8002f9e:	601a      	str	r2, [r3, #0]
  }

}
 8002fa0:	46c0      	nop			; (mov r8, r8)
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	b004      	add	sp, #16
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	fffffefe 	.word	0xfffffefe

08002fac <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002fb4:	46c0      	nop			; (mov r8, r8)
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	b002      	add	sp, #8
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002fc4:	46c0      	nop			; (mov r8, r8)
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	b002      	add	sp, #8
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002fd4:	46c0      	nop			; (mov r8, r8)
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	b002      	add	sp, #8
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fe6:	230f      	movs	r3, #15
 8002fe8:	18fb      	adds	r3, r7, r3
 8002fea:	2200      	movs	r2, #0
 8002fec:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff6:	2380      	movs	r3, #128	; 0x80
 8002ff8:	055b      	lsls	r3, r3, #21
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d011      	beq.n	8003022 <HAL_ADC_ConfigChannel+0x46>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003002:	2b01      	cmp	r3, #1
 8003004:	d00d      	beq.n	8003022 <HAL_ADC_ConfigChannel+0x46>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300a:	2b02      	cmp	r3, #2
 800300c:	d009      	beq.n	8003022 <HAL_ADC_ConfigChannel+0x46>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003012:	2b03      	cmp	r3, #3
 8003014:	d005      	beq.n	8003022 <HAL_ADC_ConfigChannel+0x46>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301a:	2b04      	cmp	r3, #4
 800301c:	d001      	beq.n	8003022 <HAL_ADC_ConfigChannel+0x46>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2234      	movs	r2, #52	; 0x34
 8003026:	5c9b      	ldrb	r3, [r3, r2]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_ADC_ConfigChannel+0x54>
 800302c:	2302      	movs	r3, #2
 800302e:	e0d0      	b.n	80031d2 <HAL_ADC_ConfigChannel+0x1f6>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2234      	movs	r2, #52	; 0x34
 8003034:	2101      	movs	r1, #1
 8003036:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	2204      	movs	r2, #4
 8003040:	4013      	ands	r3, r2
 8003042:	d000      	beq.n	8003046 <HAL_ADC_ConfigChannel+0x6a>
 8003044:	e0b4      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	4a64      	ldr	r2, [pc, #400]	; (80031dc <HAL_ADC_ConfigChannel+0x200>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d100      	bne.n	8003052 <HAL_ADC_ConfigChannel+0x76>
 8003050:	e082      	b.n	8003158 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2201      	movs	r2, #1
 800305e:	409a      	lsls	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800306c:	2380      	movs	r3, #128	; 0x80
 800306e:	055b      	lsls	r3, r3, #21
 8003070:	429a      	cmp	r2, r3
 8003072:	d037      	beq.n	80030e4 <HAL_ADC_ConfigChannel+0x108>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003078:	2b01      	cmp	r3, #1
 800307a:	d033      	beq.n	80030e4 <HAL_ADC_ConfigChannel+0x108>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003080:	2b02      	cmp	r3, #2
 8003082:	d02f      	beq.n	80030e4 <HAL_ADC_ConfigChannel+0x108>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003088:	2b03      	cmp	r3, #3
 800308a:	d02b      	beq.n	80030e4 <HAL_ADC_ConfigChannel+0x108>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003090:	2b04      	cmp	r3, #4
 8003092:	d027      	beq.n	80030e4 <HAL_ADC_ConfigChannel+0x108>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003098:	2b05      	cmp	r3, #5
 800309a:	d023      	beq.n	80030e4 <HAL_ADC_ConfigChannel+0x108>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a0:	2b06      	cmp	r3, #6
 80030a2:	d01f      	beq.n	80030e4 <HAL_ADC_ConfigChannel+0x108>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a8:	2b07      	cmp	r3, #7
 80030aa:	d01b      	beq.n	80030e4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	2107      	movs	r1, #7
 80030b8:	400b      	ands	r3, r1
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d012      	beq.n	80030e4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695a      	ldr	r2, [r3, #20]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2107      	movs	r1, #7
 80030ca:	438a      	bics	r2, r1
 80030cc:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6959      	ldr	r1, [r3, #20]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	2207      	movs	r2, #7
 80030da:	401a      	ands	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2b10      	cmp	r3, #16
 80030ea:	d007      	beq.n	80030fc <HAL_ADC_ConfigChannel+0x120>
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b11      	cmp	r3, #17
 80030f2:	d003      	beq.n	80030fc <HAL_ADC_ConfigChannel+0x120>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2b12      	cmp	r3, #18
 80030fa:	d163      	bne.n	80031c4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80030fc:	4b38      	ldr	r3, [pc, #224]	; (80031e0 <HAL_ADC_ConfigChannel+0x204>)
 80030fe:	6819      	ldr	r1, [r3, #0]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b10      	cmp	r3, #16
 8003106:	d009      	beq.n	800311c <HAL_ADC_ConfigChannel+0x140>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2b11      	cmp	r3, #17
 800310e:	d102      	bne.n	8003116 <HAL_ADC_ConfigChannel+0x13a>
 8003110:	2380      	movs	r3, #128	; 0x80
 8003112:	03db      	lsls	r3, r3, #15
 8003114:	e004      	b.n	8003120 <HAL_ADC_ConfigChannel+0x144>
 8003116:	2380      	movs	r3, #128	; 0x80
 8003118:	045b      	lsls	r3, r3, #17
 800311a:	e001      	b.n	8003120 <HAL_ADC_ConfigChannel+0x144>
 800311c:	2380      	movs	r3, #128	; 0x80
 800311e:	041b      	lsls	r3, r3, #16
 8003120:	4a2f      	ldr	r2, [pc, #188]	; (80031e0 <HAL_ADC_ConfigChannel+0x204>)
 8003122:	430b      	orrs	r3, r1
 8003124:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b10      	cmp	r3, #16
 800312c:	d14a      	bne.n	80031c4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800312e:	4b2d      	ldr	r3, [pc, #180]	; (80031e4 <HAL_ADC_ConfigChannel+0x208>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	492d      	ldr	r1, [pc, #180]	; (80031e8 <HAL_ADC_ConfigChannel+0x20c>)
 8003134:	0018      	movs	r0, r3
 8003136:	f7fc fff1 	bl	800011c <__udivsi3>
 800313a:	0003      	movs	r3, r0
 800313c:	001a      	movs	r2, r3
 800313e:	0013      	movs	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	189b      	adds	r3, r3, r2
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003148:	e002      	b.n	8003150 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	3b01      	subs	r3, #1
 800314e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f9      	bne.n	800314a <HAL_ADC_ConfigChannel+0x16e>
 8003156:	e035      	b.n	80031c4 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2101      	movs	r1, #1
 8003164:	4099      	lsls	r1, r3
 8003166:	000b      	movs	r3, r1
 8003168:	43d9      	mvns	r1, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	400a      	ands	r2, r1
 8003170:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2b10      	cmp	r3, #16
 8003178:	d007      	beq.n	800318a <HAL_ADC_ConfigChannel+0x1ae>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b11      	cmp	r3, #17
 8003180:	d003      	beq.n	800318a <HAL_ADC_ConfigChannel+0x1ae>
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2b12      	cmp	r3, #18
 8003188:	d11c      	bne.n	80031c4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800318a:	4b15      	ldr	r3, [pc, #84]	; (80031e0 <HAL_ADC_ConfigChannel+0x204>)
 800318c:	6819      	ldr	r1, [r3, #0]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b10      	cmp	r3, #16
 8003194:	d007      	beq.n	80031a6 <HAL_ADC_ConfigChannel+0x1ca>
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b11      	cmp	r3, #17
 800319c:	d101      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x1c6>
 800319e:	4b13      	ldr	r3, [pc, #76]	; (80031ec <HAL_ADC_ConfigChannel+0x210>)
 80031a0:	e002      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x1cc>
 80031a2:	4b13      	ldr	r3, [pc, #76]	; (80031f0 <HAL_ADC_ConfigChannel+0x214>)
 80031a4:	e000      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x1cc>
 80031a6:	4b13      	ldr	r3, [pc, #76]	; (80031f4 <HAL_ADC_ConfigChannel+0x218>)
 80031a8:	4a0d      	ldr	r2, [pc, #52]	; (80031e0 <HAL_ADC_ConfigChannel+0x204>)
 80031aa:	400b      	ands	r3, r1
 80031ac:	6013      	str	r3, [r2, #0]
 80031ae:	e009      	b.n	80031c4 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b4:	2220      	movs	r2, #32
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80031bc:	230f      	movs	r3, #15
 80031be:	18fb      	adds	r3, r7, r3
 80031c0:	2201      	movs	r2, #1
 80031c2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2234      	movs	r2, #52	; 0x34
 80031c8:	2100      	movs	r1, #0
 80031ca:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80031cc:	230f      	movs	r3, #15
 80031ce:	18fb      	adds	r3, r7, r3
 80031d0:	781b      	ldrb	r3, [r3, #0]
}
 80031d2:	0018      	movs	r0, r3
 80031d4:	46bd      	mov	sp, r7
 80031d6:	b004      	add	sp, #16
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	46c0      	nop			; (mov r8, r8)
 80031dc:	00001001 	.word	0x00001001
 80031e0:	40012708 	.word	0x40012708
 80031e4:	20000000 	.word	0x20000000
 80031e8:	000f4240 	.word	0x000f4240
 80031ec:	ffbfffff 	.word	0xffbfffff
 80031f0:	feffffff 	.word	0xfeffffff
 80031f4:	ff7fffff 	.word	0xff7fffff

080031f8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	2203      	movs	r2, #3
 8003210:	4013      	ands	r3, r2
 8003212:	2b01      	cmp	r3, #1
 8003214:	d112      	bne.n	800323c <ADC_Enable+0x44>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2201      	movs	r2, #1
 800321e:	4013      	ands	r3, r2
 8003220:	2b01      	cmp	r3, #1
 8003222:	d009      	beq.n	8003238 <ADC_Enable+0x40>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	2380      	movs	r3, #128	; 0x80
 800322c:	021b      	lsls	r3, r3, #8
 800322e:	401a      	ands	r2, r3
 8003230:	2380      	movs	r3, #128	; 0x80
 8003232:	021b      	lsls	r3, r3, #8
 8003234:	429a      	cmp	r2, r3
 8003236:	d101      	bne.n	800323c <ADC_Enable+0x44>
 8003238:	2301      	movs	r3, #1
 800323a:	e000      	b.n	800323e <ADC_Enable+0x46>
 800323c:	2300      	movs	r3, #0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d152      	bne.n	80032e8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	4a2a      	ldr	r2, [pc, #168]	; (80032f4 <ADC_Enable+0xfc>)
 800324a:	4013      	ands	r3, r2
 800324c:	d00d      	beq.n	800326a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003252:	2210      	movs	r2, #16
 8003254:	431a      	orrs	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325e:	2201      	movs	r2, #1
 8003260:	431a      	orrs	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e03f      	b.n	80032ea <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2101      	movs	r1, #1
 8003276:	430a      	orrs	r2, r1
 8003278:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800327a:	4b1f      	ldr	r3, [pc, #124]	; (80032f8 <ADC_Enable+0x100>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	491f      	ldr	r1, [pc, #124]	; (80032fc <ADC_Enable+0x104>)
 8003280:	0018      	movs	r0, r3
 8003282:	f7fc ff4b 	bl	800011c <__udivsi3>
 8003286:	0003      	movs	r3, r0
 8003288:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800328a:	e002      	b.n	8003292 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	3b01      	subs	r3, #1
 8003290:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1f9      	bne.n	800328c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003298:	f7ff fb62 	bl	8002960 <HAL_GetTick>
 800329c:	0003      	movs	r3, r0
 800329e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80032a0:	e01b      	b.n	80032da <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032a2:	f7ff fb5d 	bl	8002960 <HAL_GetTick>
 80032a6:	0002      	movs	r2, r0
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d914      	bls.n	80032da <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2201      	movs	r2, #1
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d00d      	beq.n	80032da <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c2:	2210      	movs	r2, #16
 80032c4:	431a      	orrs	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ce:	2201      	movs	r2, #1
 80032d0:	431a      	orrs	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e007      	b.n	80032ea <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2201      	movs	r2, #1
 80032e2:	4013      	ands	r3, r2
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d1dc      	bne.n	80032a2 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	0018      	movs	r0, r3
 80032ec:	46bd      	mov	sp, r7
 80032ee:	b004      	add	sp, #16
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	80000017 	.word	0x80000017
 80032f8:	20000000 	.word	0x20000000
 80032fc:	000f4240 	.word	0x000f4240

08003300 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003308:	2300      	movs	r3, #0
 800330a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	2203      	movs	r2, #3
 8003314:	4013      	ands	r3, r2
 8003316:	2b01      	cmp	r3, #1
 8003318:	d112      	bne.n	8003340 <ADC_Disable+0x40>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2201      	movs	r2, #1
 8003322:	4013      	ands	r3, r2
 8003324:	2b01      	cmp	r3, #1
 8003326:	d009      	beq.n	800333c <ADC_Disable+0x3c>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68da      	ldr	r2, [r3, #12]
 800332e:	2380      	movs	r3, #128	; 0x80
 8003330:	021b      	lsls	r3, r3, #8
 8003332:	401a      	ands	r2, r3
 8003334:	2380      	movs	r3, #128	; 0x80
 8003336:	021b      	lsls	r3, r3, #8
 8003338:	429a      	cmp	r2, r3
 800333a:	d101      	bne.n	8003340 <ADC_Disable+0x40>
 800333c:	2301      	movs	r3, #1
 800333e:	e000      	b.n	8003342 <ADC_Disable+0x42>
 8003340:	2300      	movs	r3, #0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d048      	beq.n	80033d8 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	2205      	movs	r2, #5
 800334e:	4013      	ands	r3, r2
 8003350:	2b01      	cmp	r3, #1
 8003352:	d110      	bne.n	8003376 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689a      	ldr	r2, [r3, #8]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2102      	movs	r1, #2
 8003360:	430a      	orrs	r2, r1
 8003362:	609a      	str	r2, [r3, #8]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2203      	movs	r2, #3
 800336a:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800336c:	f7ff faf8 	bl	8002960 <HAL_GetTick>
 8003370:	0003      	movs	r3, r0
 8003372:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003374:	e029      	b.n	80033ca <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337a:	2210      	movs	r2, #16
 800337c:	431a      	orrs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003386:	2201      	movs	r2, #1
 8003388:	431a      	orrs	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e023      	b.n	80033da <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003392:	f7ff fae5 	bl	8002960 <HAL_GetTick>
 8003396:	0002      	movs	r2, r0
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d914      	bls.n	80033ca <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	2201      	movs	r2, #1
 80033a8:	4013      	ands	r3, r2
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d10d      	bne.n	80033ca <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b2:	2210      	movs	r2, #16
 80033b4:	431a      	orrs	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033be:	2201      	movs	r2, #1
 80033c0:	431a      	orrs	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e007      	b.n	80033da <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	2201      	movs	r2, #1
 80033d2:	4013      	ands	r3, r2
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d0dc      	beq.n	8003392 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	0018      	movs	r0, r3
 80033dc:	46bd      	mov	sp, r7
 80033de:	b004      	add	sp, #16
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b084      	sub	sp, #16
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	2204      	movs	r2, #4
 80033f6:	4013      	ands	r3, r2
 80033f8:	d03a      	beq.n	8003470 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	2204      	movs	r2, #4
 8003402:	4013      	ands	r3, r2
 8003404:	2b04      	cmp	r3, #4
 8003406:	d10d      	bne.n	8003424 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	2202      	movs	r2, #2
 8003410:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003412:	d107      	bne.n	8003424 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689a      	ldr	r2, [r3, #8]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2110      	movs	r1, #16
 8003420:	430a      	orrs	r2, r1
 8003422:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003424:	f7ff fa9c 	bl	8002960 <HAL_GetTick>
 8003428:	0003      	movs	r3, r0
 800342a:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800342c:	e01a      	b.n	8003464 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800342e:	f7ff fa97 	bl	8002960 <HAL_GetTick>
 8003432:	0002      	movs	r2, r0
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d913      	bls.n	8003464 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	2204      	movs	r2, #4
 8003444:	4013      	ands	r3, r2
 8003446:	d00d      	beq.n	8003464 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344c:	2210      	movs	r2, #16
 800344e:	431a      	orrs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003458:	2201      	movs	r2, #1
 800345a:	431a      	orrs	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e006      	b.n	8003472 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	2204      	movs	r2, #4
 800346c:	4013      	ands	r3, r2
 800346e:	d1de      	bne.n	800342e <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	0018      	movs	r0, r3
 8003474:	46bd      	mov	sp, r7
 8003476:	b004      	add	sp, #16
 8003478:	bd80      	pop	{r7, pc}
	...

0800347c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003484:	2317      	movs	r3, #23
 8003486:	18fb      	adds	r3, r7, r3
 8003488:	2200      	movs	r2, #0
 800348a:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8003490:	2300      	movs	r3, #0
 8003492:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2234      	movs	r2, #52	; 0x34
 8003498:	5c9b      	ldrb	r3, [r3, r2]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d101      	bne.n	80034a2 <HAL_ADCEx_Calibration_Start+0x26>
 800349e:	2302      	movs	r3, #2
 80034a0:	e08d      	b.n	80035be <HAL_ADCEx_Calibration_Start+0x142>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2234      	movs	r2, #52	; 0x34
 80034a6:	2101      	movs	r1, #1
 80034a8:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	2203      	movs	r2, #3
 80034b2:	4013      	ands	r3, r2
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d112      	bne.n	80034de <HAL_ADCEx_Calibration_Start+0x62>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2201      	movs	r2, #1
 80034c0:	4013      	ands	r3, r2
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d009      	beq.n	80034da <HAL_ADCEx_Calibration_Start+0x5e>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68da      	ldr	r2, [r3, #12]
 80034cc:	2380      	movs	r3, #128	; 0x80
 80034ce:	021b      	lsls	r3, r3, #8
 80034d0:	401a      	ands	r2, r3
 80034d2:	2380      	movs	r3, #128	; 0x80
 80034d4:	021b      	lsls	r3, r3, #8
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d101      	bne.n	80034de <HAL_ADCEx_Calibration_Start+0x62>
 80034da:	2301      	movs	r3, #1
 80034dc:	e000      	b.n	80034e0 <HAL_ADCEx_Calibration_Start+0x64>
 80034de:	2300      	movs	r3, #0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d15b      	bne.n	800359c <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e8:	4a37      	ldr	r2, [pc, #220]	; (80035c8 <HAL_ADCEx_Calibration_Start+0x14c>)
 80034ea:	4013      	ands	r3, r2
 80034ec:	2202      	movs	r2, #2
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	2203      	movs	r2, #3
 80034fc:	4013      	ands	r3, r2
 80034fe:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2103      	movs	r1, #3
 800350c:	438a      	bics	r2, r1
 800350e:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2180      	movs	r1, #128	; 0x80
 800351c:	0609      	lsls	r1, r1, #24
 800351e:	430a      	orrs	r2, r1
 8003520:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8003522:	f7ff fa1d 	bl	8002960 <HAL_GetTick>
 8003526:	0003      	movs	r3, r0
 8003528:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800352a:	e01d      	b.n	8003568 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800352c:	f7ff fa18 	bl	8002960 <HAL_GetTick>
 8003530:	0002      	movs	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d916      	bls.n	8003568 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	0fdb      	lsrs	r3, r3, #31
 8003542:	07da      	lsls	r2, r3, #31
 8003544:	2380      	movs	r3, #128	; 0x80
 8003546:	061b      	lsls	r3, r3, #24
 8003548:	429a      	cmp	r2, r3
 800354a:	d10d      	bne.n	8003568 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003550:	2212      	movs	r2, #18
 8003552:	4393      	bics	r3, r2
 8003554:	2210      	movs	r2, #16
 8003556:	431a      	orrs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2234      	movs	r2, #52	; 0x34
 8003560:	2100      	movs	r1, #0
 8003562:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e02a      	b.n	80035be <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	0fdb      	lsrs	r3, r3, #31
 8003570:	07da      	lsls	r2, r3, #31
 8003572:	2380      	movs	r3, #128	; 0x80
 8003574:	061b      	lsls	r3, r3, #24
 8003576:	429a      	cmp	r2, r3
 8003578:	d0d8      	beq.n	800352c <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68d9      	ldr	r1, [r3, #12]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	430a      	orrs	r2, r1
 8003588:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358e:	2203      	movs	r2, #3
 8003590:	4393      	bics	r3, r2
 8003592:	2201      	movs	r2, #1
 8003594:	431a      	orrs	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	639a      	str	r2, [r3, #56]	; 0x38
 800359a:	e009      	b.n	80035b0 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a0:	2220      	movs	r2, #32
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80035a8:	2317      	movs	r3, #23
 80035aa:	18fb      	adds	r3, r7, r3
 80035ac:	2201      	movs	r2, #1
 80035ae:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2234      	movs	r2, #52	; 0x34
 80035b4:	2100      	movs	r1, #0
 80035b6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80035b8:	2317      	movs	r3, #23
 80035ba:	18fb      	adds	r3, r7, r3
 80035bc:	781b      	ldrb	r3, [r3, #0]
}
 80035be:	0018      	movs	r0, r3
 80035c0:	46bd      	mov	sp, r7
 80035c2:	b006      	add	sp, #24
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	46c0      	nop			; (mov r8, r8)
 80035c8:	fffffefd 	.word	0xfffffefd

080035cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	0002      	movs	r2, r0
 80035d4:	1dfb      	adds	r3, r7, #7
 80035d6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80035d8:	1dfb      	adds	r3, r7, #7
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2b7f      	cmp	r3, #127	; 0x7f
 80035de:	d809      	bhi.n	80035f4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035e0:	1dfb      	adds	r3, r7, #7
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	001a      	movs	r2, r3
 80035e6:	231f      	movs	r3, #31
 80035e8:	401a      	ands	r2, r3
 80035ea:	4b04      	ldr	r3, [pc, #16]	; (80035fc <__NVIC_EnableIRQ+0x30>)
 80035ec:	2101      	movs	r1, #1
 80035ee:	4091      	lsls	r1, r2
 80035f0:	000a      	movs	r2, r1
 80035f2:	601a      	str	r2, [r3, #0]
  }
}
 80035f4:	46c0      	nop			; (mov r8, r8)
 80035f6:	46bd      	mov	sp, r7
 80035f8:	b002      	add	sp, #8
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	e000e100 	.word	0xe000e100

08003600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003600:	b590      	push	{r4, r7, lr}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	0002      	movs	r2, r0
 8003608:	6039      	str	r1, [r7, #0]
 800360a:	1dfb      	adds	r3, r7, #7
 800360c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800360e:	1dfb      	adds	r3, r7, #7
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b7f      	cmp	r3, #127	; 0x7f
 8003614:	d828      	bhi.n	8003668 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003616:	4a2f      	ldr	r2, [pc, #188]	; (80036d4 <__NVIC_SetPriority+0xd4>)
 8003618:	1dfb      	adds	r3, r7, #7
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	b25b      	sxtb	r3, r3
 800361e:	089b      	lsrs	r3, r3, #2
 8003620:	33c0      	adds	r3, #192	; 0xc0
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	589b      	ldr	r3, [r3, r2]
 8003626:	1dfa      	adds	r2, r7, #7
 8003628:	7812      	ldrb	r2, [r2, #0]
 800362a:	0011      	movs	r1, r2
 800362c:	2203      	movs	r2, #3
 800362e:	400a      	ands	r2, r1
 8003630:	00d2      	lsls	r2, r2, #3
 8003632:	21ff      	movs	r1, #255	; 0xff
 8003634:	4091      	lsls	r1, r2
 8003636:	000a      	movs	r2, r1
 8003638:	43d2      	mvns	r2, r2
 800363a:	401a      	ands	r2, r3
 800363c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	019b      	lsls	r3, r3, #6
 8003642:	22ff      	movs	r2, #255	; 0xff
 8003644:	401a      	ands	r2, r3
 8003646:	1dfb      	adds	r3, r7, #7
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	0018      	movs	r0, r3
 800364c:	2303      	movs	r3, #3
 800364e:	4003      	ands	r3, r0
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003654:	481f      	ldr	r0, [pc, #124]	; (80036d4 <__NVIC_SetPriority+0xd4>)
 8003656:	1dfb      	adds	r3, r7, #7
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	b25b      	sxtb	r3, r3
 800365c:	089b      	lsrs	r3, r3, #2
 800365e:	430a      	orrs	r2, r1
 8003660:	33c0      	adds	r3, #192	; 0xc0
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003666:	e031      	b.n	80036cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003668:	4a1b      	ldr	r2, [pc, #108]	; (80036d8 <__NVIC_SetPriority+0xd8>)
 800366a:	1dfb      	adds	r3, r7, #7
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	0019      	movs	r1, r3
 8003670:	230f      	movs	r3, #15
 8003672:	400b      	ands	r3, r1
 8003674:	3b08      	subs	r3, #8
 8003676:	089b      	lsrs	r3, r3, #2
 8003678:	3306      	adds	r3, #6
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	18d3      	adds	r3, r2, r3
 800367e:	3304      	adds	r3, #4
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	1dfa      	adds	r2, r7, #7
 8003684:	7812      	ldrb	r2, [r2, #0]
 8003686:	0011      	movs	r1, r2
 8003688:	2203      	movs	r2, #3
 800368a:	400a      	ands	r2, r1
 800368c:	00d2      	lsls	r2, r2, #3
 800368e:	21ff      	movs	r1, #255	; 0xff
 8003690:	4091      	lsls	r1, r2
 8003692:	000a      	movs	r2, r1
 8003694:	43d2      	mvns	r2, r2
 8003696:	401a      	ands	r2, r3
 8003698:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	019b      	lsls	r3, r3, #6
 800369e:	22ff      	movs	r2, #255	; 0xff
 80036a0:	401a      	ands	r2, r3
 80036a2:	1dfb      	adds	r3, r7, #7
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	0018      	movs	r0, r3
 80036a8:	2303      	movs	r3, #3
 80036aa:	4003      	ands	r3, r0
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036b0:	4809      	ldr	r0, [pc, #36]	; (80036d8 <__NVIC_SetPriority+0xd8>)
 80036b2:	1dfb      	adds	r3, r7, #7
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	001c      	movs	r4, r3
 80036b8:	230f      	movs	r3, #15
 80036ba:	4023      	ands	r3, r4
 80036bc:	3b08      	subs	r3, #8
 80036be:	089b      	lsrs	r3, r3, #2
 80036c0:	430a      	orrs	r2, r1
 80036c2:	3306      	adds	r3, #6
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	18c3      	adds	r3, r0, r3
 80036c8:	3304      	adds	r3, #4
 80036ca:	601a      	str	r2, [r3, #0]
}
 80036cc:	46c0      	nop			; (mov r8, r8)
 80036ce:	46bd      	mov	sp, r7
 80036d0:	b003      	add	sp, #12
 80036d2:	bd90      	pop	{r4, r7, pc}
 80036d4:	e000e100 	.word	0xe000e100
 80036d8:	e000ed00 	.word	0xe000ed00

080036dc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60b9      	str	r1, [r7, #8]
 80036e4:	607a      	str	r2, [r7, #4]
 80036e6:	210f      	movs	r1, #15
 80036e8:	187b      	adds	r3, r7, r1
 80036ea:	1c02      	adds	r2, r0, #0
 80036ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	187b      	adds	r3, r7, r1
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	b25b      	sxtb	r3, r3
 80036f6:	0011      	movs	r1, r2
 80036f8:	0018      	movs	r0, r3
 80036fa:	f7ff ff81 	bl	8003600 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80036fe:	46c0      	nop			; (mov r8, r8)
 8003700:	46bd      	mov	sp, r7
 8003702:	b004      	add	sp, #16
 8003704:	bd80      	pop	{r7, pc}

08003706 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b082      	sub	sp, #8
 800370a:	af00      	add	r7, sp, #0
 800370c:	0002      	movs	r2, r0
 800370e:	1dfb      	adds	r3, r7, #7
 8003710:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003712:	1dfb      	adds	r3, r7, #7
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	b25b      	sxtb	r3, r3
 8003718:	0018      	movs	r0, r3
 800371a:	f7ff ff57 	bl	80035cc <__NVIC_EnableIRQ>
}
 800371e:	46c0      	nop			; (mov r8, r8)
 8003720:	46bd      	mov	sp, r7
 8003722:	b002      	add	sp, #8
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b082      	sub	sp, #8
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2221      	movs	r2, #33	; 0x21
 8003732:	5c9b      	ldrb	r3, [r3, r2]
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d008      	beq.n	800374c <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2204      	movs	r2, #4
 800373e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2220      	movs	r2, #32
 8003744:	2100      	movs	r1, #0
 8003746:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e020      	b.n	800378e <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	210e      	movs	r1, #14
 8003758:	438a      	bics	r2, r1
 800375a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2101      	movs	r1, #1
 8003768:	438a      	bics	r2, r1
 800376a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003774:	2101      	movs	r1, #1
 8003776:	4091      	lsls	r1, r2
 8003778:	000a      	movs	r2, r1
 800377a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2221      	movs	r2, #33	; 0x21
 8003780:	2101      	movs	r1, #1
 8003782:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2220      	movs	r2, #32
 8003788:	2100      	movs	r1, #0
 800378a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	0018      	movs	r0, r3
 8003790:	46bd      	mov	sp, r7
 8003792:	b002      	add	sp, #8
 8003794:	bd80      	pop	{r7, pc}

08003796 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b084      	sub	sp, #16
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800379e:	210f      	movs	r1, #15
 80037a0:	187b      	adds	r3, r7, r1
 80037a2:	2200      	movs	r2, #0
 80037a4:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2221      	movs	r2, #33	; 0x21
 80037aa:	5c9b      	ldrb	r3, [r3, r2]
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d006      	beq.n	80037c0 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2204      	movs	r2, #4
 80037b6:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80037b8:	187b      	adds	r3, r7, r1
 80037ba:	2201      	movs	r2, #1
 80037bc:	701a      	strb	r2, [r3, #0]
 80037be:	e028      	b.n	8003812 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	210e      	movs	r1, #14
 80037cc:	438a      	bics	r2, r1
 80037ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2101      	movs	r1, #1
 80037dc:	438a      	bics	r2, r1
 80037de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e8:	2101      	movs	r1, #1
 80037ea:	4091      	lsls	r1, r2
 80037ec:	000a      	movs	r2, r1
 80037ee:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2221      	movs	r2, #33	; 0x21
 80037f4:	2101      	movs	r1, #1
 80037f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2220      	movs	r2, #32
 80037fc:	2100      	movs	r1, #0
 80037fe:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003804:	2b00      	cmp	r3, #0
 8003806:	d004      	beq.n	8003812 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	0010      	movs	r0, r2
 8003810:	4798      	blx	r3
    }
  }
  return status;
 8003812:	230f      	movs	r3, #15
 8003814:	18fb      	adds	r3, r7, r3
 8003816:	781b      	ldrb	r3, [r3, #0]
}
 8003818:	0018      	movs	r0, r3
 800381a:	46bd      	mov	sp, r7
 800381c:	b004      	add	sp, #16
 800381e:	bd80      	pop	{r7, pc}

08003820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800382a:	2300      	movs	r3, #0
 800382c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800382e:	e149      	b.n	8003ac4 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2101      	movs	r1, #1
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	4091      	lsls	r1, r2
 800383a:	000a      	movs	r2, r1
 800383c:	4013      	ands	r3, r2
 800383e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d100      	bne.n	8003848 <HAL_GPIO_Init+0x28>
 8003846:	e13a      	b.n	8003abe <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	2203      	movs	r2, #3
 800384e:	4013      	ands	r3, r2
 8003850:	2b01      	cmp	r3, #1
 8003852:	d005      	beq.n	8003860 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	2203      	movs	r2, #3
 800385a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800385c:	2b02      	cmp	r3, #2
 800385e:	d130      	bne.n	80038c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	2203      	movs	r2, #3
 800386c:	409a      	lsls	r2, r3
 800386e:	0013      	movs	r3, r2
 8003870:	43da      	mvns	r2, r3
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	4013      	ands	r3, r2
 8003876:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	68da      	ldr	r2, [r3, #12]
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	409a      	lsls	r2, r3
 8003882:	0013      	movs	r3, r2
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	4313      	orrs	r3, r2
 8003888:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003896:	2201      	movs	r2, #1
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	409a      	lsls	r2, r3
 800389c:	0013      	movs	r3, r2
 800389e:	43da      	mvns	r2, r3
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	4013      	ands	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	091b      	lsrs	r3, r3, #4
 80038ac:	2201      	movs	r2, #1
 80038ae:	401a      	ands	r2, r3
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	409a      	lsls	r2, r3
 80038b4:	0013      	movs	r3, r2
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2203      	movs	r2, #3
 80038c8:	4013      	ands	r3, r2
 80038ca:	2b03      	cmp	r3, #3
 80038cc:	d017      	beq.n	80038fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	2203      	movs	r2, #3
 80038da:	409a      	lsls	r2, r3
 80038dc:	0013      	movs	r3, r2
 80038de:	43da      	mvns	r2, r3
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	4013      	ands	r3, r2
 80038e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	689a      	ldr	r2, [r3, #8]
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	409a      	lsls	r2, r3
 80038f0:	0013      	movs	r3, r2
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2203      	movs	r2, #3
 8003904:	4013      	ands	r3, r2
 8003906:	2b02      	cmp	r3, #2
 8003908:	d123      	bne.n	8003952 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	08da      	lsrs	r2, r3, #3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3208      	adds	r2, #8
 8003912:	0092      	lsls	r2, r2, #2
 8003914:	58d3      	ldr	r3, [r2, r3]
 8003916:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	2207      	movs	r2, #7
 800391c:	4013      	ands	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	220f      	movs	r2, #15
 8003922:	409a      	lsls	r2, r3
 8003924:	0013      	movs	r3, r2
 8003926:	43da      	mvns	r2, r3
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	4013      	ands	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	691a      	ldr	r2, [r3, #16]
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	2107      	movs	r1, #7
 8003936:	400b      	ands	r3, r1
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	409a      	lsls	r2, r3
 800393c:	0013      	movs	r3, r2
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	4313      	orrs	r3, r2
 8003942:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	08da      	lsrs	r2, r3, #3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3208      	adds	r2, #8
 800394c:	0092      	lsls	r2, r2, #2
 800394e:	6939      	ldr	r1, [r7, #16]
 8003950:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	2203      	movs	r2, #3
 800395e:	409a      	lsls	r2, r3
 8003960:	0013      	movs	r3, r2
 8003962:	43da      	mvns	r2, r3
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	4013      	ands	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2203      	movs	r2, #3
 8003970:	401a      	ands	r2, r3
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	409a      	lsls	r2, r3
 8003978:	0013      	movs	r3, r2
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	4313      	orrs	r3, r2
 800397e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	23c0      	movs	r3, #192	; 0xc0
 800398c:	029b      	lsls	r3, r3, #10
 800398e:	4013      	ands	r3, r2
 8003990:	d100      	bne.n	8003994 <HAL_GPIO_Init+0x174>
 8003992:	e094      	b.n	8003abe <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003994:	4b51      	ldr	r3, [pc, #324]	; (8003adc <HAL_GPIO_Init+0x2bc>)
 8003996:	699a      	ldr	r2, [r3, #24]
 8003998:	4b50      	ldr	r3, [pc, #320]	; (8003adc <HAL_GPIO_Init+0x2bc>)
 800399a:	2101      	movs	r1, #1
 800399c:	430a      	orrs	r2, r1
 800399e:	619a      	str	r2, [r3, #24]
 80039a0:	4b4e      	ldr	r3, [pc, #312]	; (8003adc <HAL_GPIO_Init+0x2bc>)
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	2201      	movs	r2, #1
 80039a6:	4013      	ands	r3, r2
 80039a8:	60bb      	str	r3, [r7, #8]
 80039aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80039ac:	4a4c      	ldr	r2, [pc, #304]	; (8003ae0 <HAL_GPIO_Init+0x2c0>)
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	089b      	lsrs	r3, r3, #2
 80039b2:	3302      	adds	r3, #2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	589b      	ldr	r3, [r3, r2]
 80039b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	2203      	movs	r2, #3
 80039be:	4013      	ands	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	220f      	movs	r2, #15
 80039c4:	409a      	lsls	r2, r3
 80039c6:	0013      	movs	r3, r2
 80039c8:	43da      	mvns	r2, r3
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	4013      	ands	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	2390      	movs	r3, #144	; 0x90
 80039d4:	05db      	lsls	r3, r3, #23
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d00d      	beq.n	80039f6 <HAL_GPIO_Init+0x1d6>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a41      	ldr	r2, [pc, #260]	; (8003ae4 <HAL_GPIO_Init+0x2c4>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d007      	beq.n	80039f2 <HAL_GPIO_Init+0x1d2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a40      	ldr	r2, [pc, #256]	; (8003ae8 <HAL_GPIO_Init+0x2c8>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d101      	bne.n	80039ee <HAL_GPIO_Init+0x1ce>
 80039ea:	2302      	movs	r3, #2
 80039ec:	e004      	b.n	80039f8 <HAL_GPIO_Init+0x1d8>
 80039ee:	2305      	movs	r3, #5
 80039f0:	e002      	b.n	80039f8 <HAL_GPIO_Init+0x1d8>
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <HAL_GPIO_Init+0x1d8>
 80039f6:	2300      	movs	r3, #0
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	2103      	movs	r1, #3
 80039fc:	400a      	ands	r2, r1
 80039fe:	0092      	lsls	r2, r2, #2
 8003a00:	4093      	lsls	r3, r2
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a08:	4935      	ldr	r1, [pc, #212]	; (8003ae0 <HAL_GPIO_Init+0x2c0>)
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	089b      	lsrs	r3, r3, #2
 8003a0e:	3302      	adds	r3, #2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a16:	4b35      	ldr	r3, [pc, #212]	; (8003aec <HAL_GPIO_Init+0x2cc>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	43da      	mvns	r2, r3
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	4013      	ands	r3, r2
 8003a24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	2380      	movs	r3, #128	; 0x80
 8003a2c:	035b      	lsls	r3, r3, #13
 8003a2e:	4013      	ands	r3, r2
 8003a30:	d003      	beq.n	8003a3a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003a3a:	4b2c      	ldr	r3, [pc, #176]	; (8003aec <HAL_GPIO_Init+0x2cc>)
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003a40:	4b2a      	ldr	r3, [pc, #168]	; (8003aec <HAL_GPIO_Init+0x2cc>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	43da      	mvns	r2, r3
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	2380      	movs	r3, #128	; 0x80
 8003a56:	039b      	lsls	r3, r3, #14
 8003a58:	4013      	ands	r3, r2
 8003a5a:	d003      	beq.n	8003a64 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003a64:	4b21      	ldr	r3, [pc, #132]	; (8003aec <HAL_GPIO_Init+0x2cc>)
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003a6a:	4b20      	ldr	r3, [pc, #128]	; (8003aec <HAL_GPIO_Init+0x2cc>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	43da      	mvns	r2, r3
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	4013      	ands	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	2380      	movs	r3, #128	; 0x80
 8003a80:	029b      	lsls	r3, r3, #10
 8003a82:	4013      	ands	r3, r2
 8003a84:	d003      	beq.n	8003a8e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003a8e:	4b17      	ldr	r3, [pc, #92]	; (8003aec <HAL_GPIO_Init+0x2cc>)
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003a94:	4b15      	ldr	r3, [pc, #84]	; (8003aec <HAL_GPIO_Init+0x2cc>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	43da      	mvns	r2, r3
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	2380      	movs	r3, #128	; 0x80
 8003aaa:	025b      	lsls	r3, r3, #9
 8003aac:	4013      	ands	r3, r2
 8003aae:	d003      	beq.n	8003ab8 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003ab8:	4b0c      	ldr	r3, [pc, #48]	; (8003aec <HAL_GPIO_Init+0x2cc>)
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	40da      	lsrs	r2, r3
 8003acc:	1e13      	subs	r3, r2, #0
 8003ace:	d000      	beq.n	8003ad2 <HAL_GPIO_Init+0x2b2>
 8003ad0:	e6ae      	b.n	8003830 <HAL_GPIO_Init+0x10>
  } 
}
 8003ad2:	46c0      	nop			; (mov r8, r8)
 8003ad4:	46c0      	nop			; (mov r8, r8)
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	b006      	add	sp, #24
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	40010000 	.word	0x40010000
 8003ae4:	48000400 	.word	0x48000400
 8003ae8:	48000800 	.word	0x48000800
 8003aec:	40010400 	.word	0x40010400

08003af0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	000a      	movs	r2, r1
 8003afa:	1cbb      	adds	r3, r7, #2
 8003afc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	1cba      	adds	r2, r7, #2
 8003b04:	8812      	ldrh	r2, [r2, #0]
 8003b06:	4013      	ands	r3, r2
 8003b08:	d004      	beq.n	8003b14 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003b0a:	230f      	movs	r3, #15
 8003b0c:	18fb      	adds	r3, r7, r3
 8003b0e:	2201      	movs	r2, #1
 8003b10:	701a      	strb	r2, [r3, #0]
 8003b12:	e003      	b.n	8003b1c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b14:	230f      	movs	r3, #15
 8003b16:	18fb      	adds	r3, r7, r3
 8003b18:	2200      	movs	r2, #0
 8003b1a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003b1c:	230f      	movs	r3, #15
 8003b1e:	18fb      	adds	r3, r7, r3
 8003b20:	781b      	ldrb	r3, [r3, #0]
  }
 8003b22:	0018      	movs	r0, r3
 8003b24:	46bd      	mov	sp, r7
 8003b26:	b004      	add	sp, #16
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b082      	sub	sp, #8
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
 8003b32:	0008      	movs	r0, r1
 8003b34:	0011      	movs	r1, r2
 8003b36:	1cbb      	adds	r3, r7, #2
 8003b38:	1c02      	adds	r2, r0, #0
 8003b3a:	801a      	strh	r2, [r3, #0]
 8003b3c:	1c7b      	adds	r3, r7, #1
 8003b3e:	1c0a      	adds	r2, r1, #0
 8003b40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b42:	1c7b      	adds	r3, r7, #1
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d004      	beq.n	8003b54 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b4a:	1cbb      	adds	r3, r7, #2
 8003b4c:	881a      	ldrh	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b52:	e003      	b.n	8003b5c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b54:	1cbb      	adds	r3, r7, #2
 8003b56:	881a      	ldrh	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b5c:	46c0      	nop			; (mov r8, r8)
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	b002      	add	sp, #8
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b088      	sub	sp, #32
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d102      	bne.n	8003b78 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	f000 fb76 	bl	8004264 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	4013      	ands	r3, r2
 8003b80:	d100      	bne.n	8003b84 <HAL_RCC_OscConfig+0x20>
 8003b82:	e08e      	b.n	8003ca2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003b84:	4bc5      	ldr	r3, [pc, #788]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	220c      	movs	r2, #12
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	2b04      	cmp	r3, #4
 8003b8e:	d00e      	beq.n	8003bae <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b90:	4bc2      	ldr	r3, [pc, #776]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	220c      	movs	r2, #12
 8003b96:	4013      	ands	r3, r2
 8003b98:	2b08      	cmp	r3, #8
 8003b9a:	d117      	bne.n	8003bcc <HAL_RCC_OscConfig+0x68>
 8003b9c:	4bbf      	ldr	r3, [pc, #764]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	23c0      	movs	r3, #192	; 0xc0
 8003ba2:	025b      	lsls	r3, r3, #9
 8003ba4:	401a      	ands	r2, r3
 8003ba6:	2380      	movs	r3, #128	; 0x80
 8003ba8:	025b      	lsls	r3, r3, #9
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d10e      	bne.n	8003bcc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bae:	4bbb      	ldr	r3, [pc, #748]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	2380      	movs	r3, #128	; 0x80
 8003bb4:	029b      	lsls	r3, r3, #10
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	d100      	bne.n	8003bbc <HAL_RCC_OscConfig+0x58>
 8003bba:	e071      	b.n	8003ca0 <HAL_RCC_OscConfig+0x13c>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d000      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x62>
 8003bc4:	e06c      	b.n	8003ca0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	f000 fb4c 	bl	8004264 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d107      	bne.n	8003be4 <HAL_RCC_OscConfig+0x80>
 8003bd4:	4bb1      	ldr	r3, [pc, #708]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	4bb0      	ldr	r3, [pc, #704]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003bda:	2180      	movs	r1, #128	; 0x80
 8003bdc:	0249      	lsls	r1, r1, #9
 8003bde:	430a      	orrs	r2, r1
 8003be0:	601a      	str	r2, [r3, #0]
 8003be2:	e02f      	b.n	8003c44 <HAL_RCC_OscConfig+0xe0>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10c      	bne.n	8003c06 <HAL_RCC_OscConfig+0xa2>
 8003bec:	4bab      	ldr	r3, [pc, #684]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	4baa      	ldr	r3, [pc, #680]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003bf2:	49ab      	ldr	r1, [pc, #684]	; (8003ea0 <HAL_RCC_OscConfig+0x33c>)
 8003bf4:	400a      	ands	r2, r1
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	4ba8      	ldr	r3, [pc, #672]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	4ba7      	ldr	r3, [pc, #668]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003bfe:	49a9      	ldr	r1, [pc, #676]	; (8003ea4 <HAL_RCC_OscConfig+0x340>)
 8003c00:	400a      	ands	r2, r1
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	e01e      	b.n	8003c44 <HAL_RCC_OscConfig+0xe0>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2b05      	cmp	r3, #5
 8003c0c:	d10e      	bne.n	8003c2c <HAL_RCC_OscConfig+0xc8>
 8003c0e:	4ba3      	ldr	r3, [pc, #652]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	4ba2      	ldr	r3, [pc, #648]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003c14:	2180      	movs	r1, #128	; 0x80
 8003c16:	02c9      	lsls	r1, r1, #11
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	4b9f      	ldr	r3, [pc, #636]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	4b9e      	ldr	r3, [pc, #632]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003c22:	2180      	movs	r1, #128	; 0x80
 8003c24:	0249      	lsls	r1, r1, #9
 8003c26:	430a      	orrs	r2, r1
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	e00b      	b.n	8003c44 <HAL_RCC_OscConfig+0xe0>
 8003c2c:	4b9b      	ldr	r3, [pc, #620]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	4b9a      	ldr	r3, [pc, #616]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003c32:	499b      	ldr	r1, [pc, #620]	; (8003ea0 <HAL_RCC_OscConfig+0x33c>)
 8003c34:	400a      	ands	r2, r1
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	4b98      	ldr	r3, [pc, #608]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	4b97      	ldr	r3, [pc, #604]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003c3e:	4999      	ldr	r1, [pc, #612]	; (8003ea4 <HAL_RCC_OscConfig+0x340>)
 8003c40:	400a      	ands	r2, r1
 8003c42:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d014      	beq.n	8003c76 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4c:	f7fe fe88 	bl	8002960 <HAL_GetTick>
 8003c50:	0003      	movs	r3, r0
 8003c52:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c54:	e008      	b.n	8003c68 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c56:	f7fe fe83 	bl	8002960 <HAL_GetTick>
 8003c5a:	0002      	movs	r2, r0
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b64      	cmp	r3, #100	; 0x64
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e2fd      	b.n	8004264 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c68:	4b8c      	ldr	r3, [pc, #560]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	2380      	movs	r3, #128	; 0x80
 8003c6e:	029b      	lsls	r3, r3, #10
 8003c70:	4013      	ands	r3, r2
 8003c72:	d0f0      	beq.n	8003c56 <HAL_RCC_OscConfig+0xf2>
 8003c74:	e015      	b.n	8003ca2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c76:	f7fe fe73 	bl	8002960 <HAL_GetTick>
 8003c7a:	0003      	movs	r3, r0
 8003c7c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c80:	f7fe fe6e 	bl	8002960 <HAL_GetTick>
 8003c84:	0002      	movs	r2, r0
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b64      	cmp	r3, #100	; 0x64
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e2e8      	b.n	8004264 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c92:	4b82      	ldr	r3, [pc, #520]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	2380      	movs	r3, #128	; 0x80
 8003c98:	029b      	lsls	r3, r3, #10
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	d1f0      	bne.n	8003c80 <HAL_RCC_OscConfig+0x11c>
 8003c9e:	e000      	b.n	8003ca2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	4013      	ands	r3, r2
 8003caa:	d100      	bne.n	8003cae <HAL_RCC_OscConfig+0x14a>
 8003cac:	e06c      	b.n	8003d88 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003cae:	4b7b      	ldr	r3, [pc, #492]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	220c      	movs	r2, #12
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	d00e      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003cb8:	4b78      	ldr	r3, [pc, #480]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	220c      	movs	r2, #12
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	2b08      	cmp	r3, #8
 8003cc2:	d11f      	bne.n	8003d04 <HAL_RCC_OscConfig+0x1a0>
 8003cc4:	4b75      	ldr	r3, [pc, #468]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	23c0      	movs	r3, #192	; 0xc0
 8003cca:	025b      	lsls	r3, r3, #9
 8003ccc:	401a      	ands	r2, r3
 8003cce:	2380      	movs	r3, #128	; 0x80
 8003cd0:	021b      	lsls	r3, r3, #8
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d116      	bne.n	8003d04 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cd6:	4b71      	ldr	r3, [pc, #452]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	4013      	ands	r3, r2
 8003cde:	d005      	beq.n	8003cec <HAL_RCC_OscConfig+0x188>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d001      	beq.n	8003cec <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e2bb      	b.n	8004264 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cec:	4b6b      	ldr	r3, [pc, #428]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	22f8      	movs	r2, #248	; 0xf8
 8003cf2:	4393      	bics	r3, r2
 8003cf4:	0019      	movs	r1, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	00da      	lsls	r2, r3, #3
 8003cfc:	4b67      	ldr	r3, [pc, #412]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d02:	e041      	b.n	8003d88 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d024      	beq.n	8003d56 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d0c:	4b63      	ldr	r3, [pc, #396]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	4b62      	ldr	r3, [pc, #392]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003d12:	2101      	movs	r1, #1
 8003d14:	430a      	orrs	r2, r1
 8003d16:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d18:	f7fe fe22 	bl	8002960 <HAL_GetTick>
 8003d1c:	0003      	movs	r3, r0
 8003d1e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d20:	e008      	b.n	8003d34 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d22:	f7fe fe1d 	bl	8002960 <HAL_GetTick>
 8003d26:	0002      	movs	r2, r0
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e297      	b.n	8004264 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d34:	4b59      	ldr	r3, [pc, #356]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2202      	movs	r2, #2
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	d0f1      	beq.n	8003d22 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d3e:	4b57      	ldr	r3, [pc, #348]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	22f8      	movs	r2, #248	; 0xf8
 8003d44:	4393      	bics	r3, r2
 8003d46:	0019      	movs	r1, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	00da      	lsls	r2, r3, #3
 8003d4e:	4b53      	ldr	r3, [pc, #332]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003d50:	430a      	orrs	r2, r1
 8003d52:	601a      	str	r2, [r3, #0]
 8003d54:	e018      	b.n	8003d88 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d56:	4b51      	ldr	r3, [pc, #324]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	4b50      	ldr	r3, [pc, #320]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	438a      	bics	r2, r1
 8003d60:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d62:	f7fe fdfd 	bl	8002960 <HAL_GetTick>
 8003d66:	0003      	movs	r3, r0
 8003d68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d6c:	f7fe fdf8 	bl	8002960 <HAL_GetTick>
 8003d70:	0002      	movs	r2, r0
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e272      	b.n	8004264 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d7e:	4b47      	ldr	r3, [pc, #284]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2202      	movs	r2, #2
 8003d84:	4013      	ands	r3, r2
 8003d86:	d1f1      	bne.n	8003d6c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2208      	movs	r2, #8
 8003d8e:	4013      	ands	r3, r2
 8003d90:	d036      	beq.n	8003e00 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d019      	beq.n	8003dce <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d9a:	4b40      	ldr	r3, [pc, #256]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003d9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d9e:	4b3f      	ldr	r3, [pc, #252]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003da0:	2101      	movs	r1, #1
 8003da2:	430a      	orrs	r2, r1
 8003da4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003da6:	f7fe fddb 	bl	8002960 <HAL_GetTick>
 8003daa:	0003      	movs	r3, r0
 8003dac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003db0:	f7fe fdd6 	bl	8002960 <HAL_GetTick>
 8003db4:	0002      	movs	r2, r0
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e250      	b.n	8004264 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dc2:	4b36      	ldr	r3, [pc, #216]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	4013      	ands	r3, r2
 8003dca:	d0f1      	beq.n	8003db0 <HAL_RCC_OscConfig+0x24c>
 8003dcc:	e018      	b.n	8003e00 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dce:	4b33      	ldr	r3, [pc, #204]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003dd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dd2:	4b32      	ldr	r3, [pc, #200]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003dd4:	2101      	movs	r1, #1
 8003dd6:	438a      	bics	r2, r1
 8003dd8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dda:	f7fe fdc1 	bl	8002960 <HAL_GetTick>
 8003dde:	0003      	movs	r3, r0
 8003de0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003de4:	f7fe fdbc 	bl	8002960 <HAL_GetTick>
 8003de8:	0002      	movs	r2, r0
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e236      	b.n	8004264 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003df6:	4b29      	ldr	r3, [pc, #164]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	d1f1      	bne.n	8003de4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2204      	movs	r2, #4
 8003e06:	4013      	ands	r3, r2
 8003e08:	d100      	bne.n	8003e0c <HAL_RCC_OscConfig+0x2a8>
 8003e0a:	e0b5      	b.n	8003f78 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e0c:	201f      	movs	r0, #31
 8003e0e:	183b      	adds	r3, r7, r0
 8003e10:	2200      	movs	r2, #0
 8003e12:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e14:	4b21      	ldr	r3, [pc, #132]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003e16:	69da      	ldr	r2, [r3, #28]
 8003e18:	2380      	movs	r3, #128	; 0x80
 8003e1a:	055b      	lsls	r3, r3, #21
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	d110      	bne.n	8003e42 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e20:	4b1e      	ldr	r3, [pc, #120]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003e22:	69da      	ldr	r2, [r3, #28]
 8003e24:	4b1d      	ldr	r3, [pc, #116]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003e26:	2180      	movs	r1, #128	; 0x80
 8003e28:	0549      	lsls	r1, r1, #21
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	61da      	str	r2, [r3, #28]
 8003e2e:	4b1b      	ldr	r3, [pc, #108]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003e30:	69da      	ldr	r2, [r3, #28]
 8003e32:	2380      	movs	r3, #128	; 0x80
 8003e34:	055b      	lsls	r3, r3, #21
 8003e36:	4013      	ands	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003e3c:	183b      	adds	r3, r7, r0
 8003e3e:	2201      	movs	r2, #1
 8003e40:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e42:	4b19      	ldr	r3, [pc, #100]	; (8003ea8 <HAL_RCC_OscConfig+0x344>)
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	2380      	movs	r3, #128	; 0x80
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	d11a      	bne.n	8003e84 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e4e:	4b16      	ldr	r3, [pc, #88]	; (8003ea8 <HAL_RCC_OscConfig+0x344>)
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	4b15      	ldr	r3, [pc, #84]	; (8003ea8 <HAL_RCC_OscConfig+0x344>)
 8003e54:	2180      	movs	r1, #128	; 0x80
 8003e56:	0049      	lsls	r1, r1, #1
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e5c:	f7fe fd80 	bl	8002960 <HAL_GetTick>
 8003e60:	0003      	movs	r3, r0
 8003e62:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e64:	e008      	b.n	8003e78 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e66:	f7fe fd7b 	bl	8002960 <HAL_GetTick>
 8003e6a:	0002      	movs	r2, r0
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b64      	cmp	r3, #100	; 0x64
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e1f5      	b.n	8004264 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e78:	4b0b      	ldr	r3, [pc, #44]	; (8003ea8 <HAL_RCC_OscConfig+0x344>)
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	2380      	movs	r3, #128	; 0x80
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	4013      	ands	r3, r2
 8003e82:	d0f0      	beq.n	8003e66 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d10f      	bne.n	8003eac <HAL_RCC_OscConfig+0x348>
 8003e8c:	4b03      	ldr	r3, [pc, #12]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003e8e:	6a1a      	ldr	r2, [r3, #32]
 8003e90:	4b02      	ldr	r3, [pc, #8]	; (8003e9c <HAL_RCC_OscConfig+0x338>)
 8003e92:	2101      	movs	r1, #1
 8003e94:	430a      	orrs	r2, r1
 8003e96:	621a      	str	r2, [r3, #32]
 8003e98:	e036      	b.n	8003f08 <HAL_RCC_OscConfig+0x3a4>
 8003e9a:	46c0      	nop			; (mov r8, r8)
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	fffeffff 	.word	0xfffeffff
 8003ea4:	fffbffff 	.word	0xfffbffff
 8003ea8:	40007000 	.word	0x40007000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10c      	bne.n	8003ece <HAL_RCC_OscConfig+0x36a>
 8003eb4:	4bca      	ldr	r3, [pc, #808]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 8003eb6:	6a1a      	ldr	r2, [r3, #32]
 8003eb8:	4bc9      	ldr	r3, [pc, #804]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 8003eba:	2101      	movs	r1, #1
 8003ebc:	438a      	bics	r2, r1
 8003ebe:	621a      	str	r2, [r3, #32]
 8003ec0:	4bc7      	ldr	r3, [pc, #796]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 8003ec2:	6a1a      	ldr	r2, [r3, #32]
 8003ec4:	4bc6      	ldr	r3, [pc, #792]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 8003ec6:	2104      	movs	r1, #4
 8003ec8:	438a      	bics	r2, r1
 8003eca:	621a      	str	r2, [r3, #32]
 8003ecc:	e01c      	b.n	8003f08 <HAL_RCC_OscConfig+0x3a4>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	2b05      	cmp	r3, #5
 8003ed4:	d10c      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x38c>
 8003ed6:	4bc2      	ldr	r3, [pc, #776]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 8003ed8:	6a1a      	ldr	r2, [r3, #32]
 8003eda:	4bc1      	ldr	r3, [pc, #772]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 8003edc:	2104      	movs	r1, #4
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	621a      	str	r2, [r3, #32]
 8003ee2:	4bbf      	ldr	r3, [pc, #764]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 8003ee4:	6a1a      	ldr	r2, [r3, #32]
 8003ee6:	4bbe      	ldr	r3, [pc, #760]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 8003ee8:	2101      	movs	r1, #1
 8003eea:	430a      	orrs	r2, r1
 8003eec:	621a      	str	r2, [r3, #32]
 8003eee:	e00b      	b.n	8003f08 <HAL_RCC_OscConfig+0x3a4>
 8003ef0:	4bbb      	ldr	r3, [pc, #748]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 8003ef2:	6a1a      	ldr	r2, [r3, #32]
 8003ef4:	4bba      	ldr	r3, [pc, #744]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	438a      	bics	r2, r1
 8003efa:	621a      	str	r2, [r3, #32]
 8003efc:	4bb8      	ldr	r3, [pc, #736]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 8003efe:	6a1a      	ldr	r2, [r3, #32]
 8003f00:	4bb7      	ldr	r3, [pc, #732]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 8003f02:	2104      	movs	r1, #4
 8003f04:	438a      	bics	r2, r1
 8003f06:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d014      	beq.n	8003f3a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f10:	f7fe fd26 	bl	8002960 <HAL_GetTick>
 8003f14:	0003      	movs	r3, r0
 8003f16:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f18:	e009      	b.n	8003f2e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f1a:	f7fe fd21 	bl	8002960 <HAL_GetTick>
 8003f1e:	0002      	movs	r2, r0
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	4aaf      	ldr	r2, [pc, #700]	; (80041e4 <HAL_RCC_OscConfig+0x680>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e19a      	b.n	8004264 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f2e:	4bac      	ldr	r3, [pc, #688]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	2202      	movs	r2, #2
 8003f34:	4013      	ands	r3, r2
 8003f36:	d0f0      	beq.n	8003f1a <HAL_RCC_OscConfig+0x3b6>
 8003f38:	e013      	b.n	8003f62 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f3a:	f7fe fd11 	bl	8002960 <HAL_GetTick>
 8003f3e:	0003      	movs	r3, r0
 8003f40:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f42:	e009      	b.n	8003f58 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f44:	f7fe fd0c 	bl	8002960 <HAL_GetTick>
 8003f48:	0002      	movs	r2, r0
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	4aa5      	ldr	r2, [pc, #660]	; (80041e4 <HAL_RCC_OscConfig+0x680>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e185      	b.n	8004264 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f58:	4ba1      	ldr	r3, [pc, #644]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 8003f5a:	6a1b      	ldr	r3, [r3, #32]
 8003f5c:	2202      	movs	r2, #2
 8003f5e:	4013      	ands	r3, r2
 8003f60:	d1f0      	bne.n	8003f44 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f62:	231f      	movs	r3, #31
 8003f64:	18fb      	adds	r3, r7, r3
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d105      	bne.n	8003f78 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f6c:	4b9c      	ldr	r3, [pc, #624]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 8003f6e:	69da      	ldr	r2, [r3, #28]
 8003f70:	4b9b      	ldr	r3, [pc, #620]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 8003f72:	499d      	ldr	r1, [pc, #628]	; (80041e8 <HAL_RCC_OscConfig+0x684>)
 8003f74:	400a      	ands	r2, r1
 8003f76:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2210      	movs	r2, #16
 8003f7e:	4013      	ands	r3, r2
 8003f80:	d063      	beq.n	800404a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d12a      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003f8a:	4b95      	ldr	r3, [pc, #596]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 8003f8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f8e:	4b94      	ldr	r3, [pc, #592]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 8003f90:	2104      	movs	r1, #4
 8003f92:	430a      	orrs	r2, r1
 8003f94:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003f96:	4b92      	ldr	r3, [pc, #584]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 8003f98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f9a:	4b91      	ldr	r3, [pc, #580]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fa2:	f7fe fcdd 	bl	8002960 <HAL_GetTick>
 8003fa6:	0003      	movs	r3, r0
 8003fa8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003fac:	f7fe fcd8 	bl	8002960 <HAL_GetTick>
 8003fb0:	0002      	movs	r2, r0
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e152      	b.n	8004264 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003fbe:	4b88      	ldr	r3, [pc, #544]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 8003fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	d0f1      	beq.n	8003fac <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003fc8:	4b85      	ldr	r3, [pc, #532]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 8003fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fcc:	22f8      	movs	r2, #248	; 0xf8
 8003fce:	4393      	bics	r3, r2
 8003fd0:	0019      	movs	r1, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	00da      	lsls	r2, r3, #3
 8003fd8:	4b81      	ldr	r3, [pc, #516]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	635a      	str	r2, [r3, #52]	; 0x34
 8003fde:	e034      	b.n	800404a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	3305      	adds	r3, #5
 8003fe6:	d111      	bne.n	800400c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003fe8:	4b7d      	ldr	r3, [pc, #500]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 8003fea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fec:	4b7c      	ldr	r3, [pc, #496]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 8003fee:	2104      	movs	r1, #4
 8003ff0:	438a      	bics	r2, r1
 8003ff2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003ff4:	4b7a      	ldr	r3, [pc, #488]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 8003ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff8:	22f8      	movs	r2, #248	; 0xf8
 8003ffa:	4393      	bics	r3, r2
 8003ffc:	0019      	movs	r1, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	00da      	lsls	r2, r3, #3
 8004004:	4b76      	ldr	r3, [pc, #472]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 8004006:	430a      	orrs	r2, r1
 8004008:	635a      	str	r2, [r3, #52]	; 0x34
 800400a:	e01e      	b.n	800404a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800400c:	4b74      	ldr	r3, [pc, #464]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 800400e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004010:	4b73      	ldr	r3, [pc, #460]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 8004012:	2104      	movs	r1, #4
 8004014:	430a      	orrs	r2, r1
 8004016:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004018:	4b71      	ldr	r3, [pc, #452]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 800401a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800401c:	4b70      	ldr	r3, [pc, #448]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 800401e:	2101      	movs	r1, #1
 8004020:	438a      	bics	r2, r1
 8004022:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004024:	f7fe fc9c 	bl	8002960 <HAL_GetTick>
 8004028:	0003      	movs	r3, r0
 800402a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800402c:	e008      	b.n	8004040 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800402e:	f7fe fc97 	bl	8002960 <HAL_GetTick>
 8004032:	0002      	movs	r2, r0
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d901      	bls.n	8004040 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e111      	b.n	8004264 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004040:	4b67      	ldr	r3, [pc, #412]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 8004042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004044:	2202      	movs	r2, #2
 8004046:	4013      	ands	r3, r2
 8004048:	d1f1      	bne.n	800402e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2220      	movs	r2, #32
 8004050:	4013      	ands	r3, r2
 8004052:	d05c      	beq.n	800410e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004054:	4b62      	ldr	r3, [pc, #392]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	220c      	movs	r2, #12
 800405a:	4013      	ands	r3, r2
 800405c:	2b0c      	cmp	r3, #12
 800405e:	d00e      	beq.n	800407e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004060:	4b5f      	ldr	r3, [pc, #380]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	220c      	movs	r2, #12
 8004066:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004068:	2b08      	cmp	r3, #8
 800406a:	d114      	bne.n	8004096 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800406c:	4b5c      	ldr	r3, [pc, #368]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	23c0      	movs	r3, #192	; 0xc0
 8004072:	025b      	lsls	r3, r3, #9
 8004074:	401a      	ands	r2, r3
 8004076:	23c0      	movs	r3, #192	; 0xc0
 8004078:	025b      	lsls	r3, r3, #9
 800407a:	429a      	cmp	r2, r3
 800407c:	d10b      	bne.n	8004096 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800407e:	4b58      	ldr	r3, [pc, #352]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 8004080:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004082:	2380      	movs	r3, #128	; 0x80
 8004084:	029b      	lsls	r3, r3, #10
 8004086:	4013      	ands	r3, r2
 8004088:	d040      	beq.n	800410c <HAL_RCC_OscConfig+0x5a8>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d03c      	beq.n	800410c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e0e6      	b.n	8004264 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d01b      	beq.n	80040d6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800409e:	4b50      	ldr	r3, [pc, #320]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 80040a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040a2:	4b4f      	ldr	r3, [pc, #316]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 80040a4:	2180      	movs	r1, #128	; 0x80
 80040a6:	0249      	lsls	r1, r1, #9
 80040a8:	430a      	orrs	r2, r1
 80040aa:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ac:	f7fe fc58 	bl	8002960 <HAL_GetTick>
 80040b0:	0003      	movs	r3, r0
 80040b2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80040b4:	e008      	b.n	80040c8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040b6:	f7fe fc53 	bl	8002960 <HAL_GetTick>
 80040ba:	0002      	movs	r2, r0
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d901      	bls.n	80040c8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e0cd      	b.n	8004264 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80040c8:	4b45      	ldr	r3, [pc, #276]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 80040ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040cc:	2380      	movs	r3, #128	; 0x80
 80040ce:	029b      	lsls	r3, r3, #10
 80040d0:	4013      	ands	r3, r2
 80040d2:	d0f0      	beq.n	80040b6 <HAL_RCC_OscConfig+0x552>
 80040d4:	e01b      	b.n	800410e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80040d6:	4b42      	ldr	r3, [pc, #264]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 80040d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040da:	4b41      	ldr	r3, [pc, #260]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 80040dc:	4943      	ldr	r1, [pc, #268]	; (80041ec <HAL_RCC_OscConfig+0x688>)
 80040de:	400a      	ands	r2, r1
 80040e0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e2:	f7fe fc3d 	bl	8002960 <HAL_GetTick>
 80040e6:	0003      	movs	r3, r0
 80040e8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040ec:	f7fe fc38 	bl	8002960 <HAL_GetTick>
 80040f0:	0002      	movs	r2, r0
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e0b2      	b.n	8004264 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80040fe:	4b38      	ldr	r3, [pc, #224]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 8004100:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004102:	2380      	movs	r3, #128	; 0x80
 8004104:	029b      	lsls	r3, r3, #10
 8004106:	4013      	ands	r3, r2
 8004108:	d1f0      	bne.n	80040ec <HAL_RCC_OscConfig+0x588>
 800410a:	e000      	b.n	800410e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800410c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004112:	2b00      	cmp	r3, #0
 8004114:	d100      	bne.n	8004118 <HAL_RCC_OscConfig+0x5b4>
 8004116:	e0a4      	b.n	8004262 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004118:	4b31      	ldr	r3, [pc, #196]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	220c      	movs	r2, #12
 800411e:	4013      	ands	r3, r2
 8004120:	2b08      	cmp	r3, #8
 8004122:	d100      	bne.n	8004126 <HAL_RCC_OscConfig+0x5c2>
 8004124:	e078      	b.n	8004218 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412a:	2b02      	cmp	r3, #2
 800412c:	d14c      	bne.n	80041c8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800412e:	4b2c      	ldr	r3, [pc, #176]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	4b2b      	ldr	r3, [pc, #172]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 8004134:	492e      	ldr	r1, [pc, #184]	; (80041f0 <HAL_RCC_OscConfig+0x68c>)
 8004136:	400a      	ands	r2, r1
 8004138:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800413a:	f7fe fc11 	bl	8002960 <HAL_GetTick>
 800413e:	0003      	movs	r3, r0
 8004140:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004144:	f7fe fc0c 	bl	8002960 <HAL_GetTick>
 8004148:	0002      	movs	r2, r0
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e086      	b.n	8004264 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004156:	4b22      	ldr	r3, [pc, #136]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	2380      	movs	r3, #128	; 0x80
 800415c:	049b      	lsls	r3, r3, #18
 800415e:	4013      	ands	r3, r2
 8004160:	d1f0      	bne.n	8004144 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004162:	4b1f      	ldr	r3, [pc, #124]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 8004164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004166:	220f      	movs	r2, #15
 8004168:	4393      	bics	r3, r2
 800416a:	0019      	movs	r1, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004170:	4b1b      	ldr	r3, [pc, #108]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 8004172:	430a      	orrs	r2, r1
 8004174:	62da      	str	r2, [r3, #44]	; 0x2c
 8004176:	4b1a      	ldr	r3, [pc, #104]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	4a1e      	ldr	r2, [pc, #120]	; (80041f4 <HAL_RCC_OscConfig+0x690>)
 800417c:	4013      	ands	r3, r2
 800417e:	0019      	movs	r1, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004188:	431a      	orrs	r2, r3
 800418a:	4b15      	ldr	r3, [pc, #84]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 800418c:	430a      	orrs	r2, r1
 800418e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004190:	4b13      	ldr	r3, [pc, #76]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	4b12      	ldr	r3, [pc, #72]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 8004196:	2180      	movs	r1, #128	; 0x80
 8004198:	0449      	lsls	r1, r1, #17
 800419a:	430a      	orrs	r2, r1
 800419c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800419e:	f7fe fbdf 	bl	8002960 <HAL_GetTick>
 80041a2:	0003      	movs	r3, r0
 80041a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041a6:	e008      	b.n	80041ba <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041a8:	f7fe fbda 	bl	8002960 <HAL_GetTick>
 80041ac:	0002      	movs	r2, r0
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e054      	b.n	8004264 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041ba:	4b09      	ldr	r3, [pc, #36]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	2380      	movs	r3, #128	; 0x80
 80041c0:	049b      	lsls	r3, r3, #18
 80041c2:	4013      	ands	r3, r2
 80041c4:	d0f0      	beq.n	80041a8 <HAL_RCC_OscConfig+0x644>
 80041c6:	e04c      	b.n	8004262 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041c8:	4b05      	ldr	r3, [pc, #20]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	4b04      	ldr	r3, [pc, #16]	; (80041e0 <HAL_RCC_OscConfig+0x67c>)
 80041ce:	4908      	ldr	r1, [pc, #32]	; (80041f0 <HAL_RCC_OscConfig+0x68c>)
 80041d0:	400a      	ands	r2, r1
 80041d2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d4:	f7fe fbc4 	bl	8002960 <HAL_GetTick>
 80041d8:	0003      	movs	r3, r0
 80041da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041dc:	e015      	b.n	800420a <HAL_RCC_OscConfig+0x6a6>
 80041de:	46c0      	nop			; (mov r8, r8)
 80041e0:	40021000 	.word	0x40021000
 80041e4:	00001388 	.word	0x00001388
 80041e8:	efffffff 	.word	0xefffffff
 80041ec:	fffeffff 	.word	0xfffeffff
 80041f0:	feffffff 	.word	0xfeffffff
 80041f4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041f8:	f7fe fbb2 	bl	8002960 <HAL_GetTick>
 80041fc:	0002      	movs	r2, r0
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e02c      	b.n	8004264 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800420a:	4b18      	ldr	r3, [pc, #96]	; (800426c <HAL_RCC_OscConfig+0x708>)
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	2380      	movs	r3, #128	; 0x80
 8004210:	049b      	lsls	r3, r3, #18
 8004212:	4013      	ands	r3, r2
 8004214:	d1f0      	bne.n	80041f8 <HAL_RCC_OscConfig+0x694>
 8004216:	e024      	b.n	8004262 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	2b01      	cmp	r3, #1
 800421e:	d101      	bne.n	8004224 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e01f      	b.n	8004264 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004224:	4b11      	ldr	r3, [pc, #68]	; (800426c <HAL_RCC_OscConfig+0x708>)
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800422a:	4b10      	ldr	r3, [pc, #64]	; (800426c <HAL_RCC_OscConfig+0x708>)
 800422c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	23c0      	movs	r3, #192	; 0xc0
 8004234:	025b      	lsls	r3, r3, #9
 8004236:	401a      	ands	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423c:	429a      	cmp	r2, r3
 800423e:	d10e      	bne.n	800425e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	220f      	movs	r2, #15
 8004244:	401a      	ands	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800424a:	429a      	cmp	r2, r3
 800424c:	d107      	bne.n	800425e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	23f0      	movs	r3, #240	; 0xf0
 8004252:	039b      	lsls	r3, r3, #14
 8004254:	401a      	ands	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800425a:	429a      	cmp	r2, r3
 800425c:	d001      	beq.n	8004262 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e000      	b.n	8004264 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	0018      	movs	r0, r3
 8004266:	46bd      	mov	sp, r7
 8004268:	b008      	add	sp, #32
 800426a:	bd80      	pop	{r7, pc}
 800426c:	40021000 	.word	0x40021000

08004270 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e0bf      	b.n	8004404 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004284:	4b61      	ldr	r3, [pc, #388]	; (800440c <HAL_RCC_ClockConfig+0x19c>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2201      	movs	r2, #1
 800428a:	4013      	ands	r3, r2
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	429a      	cmp	r2, r3
 8004290:	d911      	bls.n	80042b6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004292:	4b5e      	ldr	r3, [pc, #376]	; (800440c <HAL_RCC_ClockConfig+0x19c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2201      	movs	r2, #1
 8004298:	4393      	bics	r3, r2
 800429a:	0019      	movs	r1, r3
 800429c:	4b5b      	ldr	r3, [pc, #364]	; (800440c <HAL_RCC_ClockConfig+0x19c>)
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042a4:	4b59      	ldr	r3, [pc, #356]	; (800440c <HAL_RCC_ClockConfig+0x19c>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2201      	movs	r2, #1
 80042aa:	4013      	ands	r3, r2
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d001      	beq.n	80042b6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e0a6      	b.n	8004404 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2202      	movs	r2, #2
 80042bc:	4013      	ands	r3, r2
 80042be:	d015      	beq.n	80042ec <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2204      	movs	r2, #4
 80042c6:	4013      	ands	r3, r2
 80042c8:	d006      	beq.n	80042d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80042ca:	4b51      	ldr	r3, [pc, #324]	; (8004410 <HAL_RCC_ClockConfig+0x1a0>)
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	4b50      	ldr	r3, [pc, #320]	; (8004410 <HAL_RCC_ClockConfig+0x1a0>)
 80042d0:	21e0      	movs	r1, #224	; 0xe0
 80042d2:	00c9      	lsls	r1, r1, #3
 80042d4:	430a      	orrs	r2, r1
 80042d6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042d8:	4b4d      	ldr	r3, [pc, #308]	; (8004410 <HAL_RCC_ClockConfig+0x1a0>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	22f0      	movs	r2, #240	; 0xf0
 80042de:	4393      	bics	r3, r2
 80042e0:	0019      	movs	r1, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689a      	ldr	r2, [r3, #8]
 80042e6:	4b4a      	ldr	r3, [pc, #296]	; (8004410 <HAL_RCC_ClockConfig+0x1a0>)
 80042e8:	430a      	orrs	r2, r1
 80042ea:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2201      	movs	r2, #1
 80042f2:	4013      	ands	r3, r2
 80042f4:	d04c      	beq.n	8004390 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d107      	bne.n	800430e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042fe:	4b44      	ldr	r3, [pc, #272]	; (8004410 <HAL_RCC_ClockConfig+0x1a0>)
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	2380      	movs	r3, #128	; 0x80
 8004304:	029b      	lsls	r3, r3, #10
 8004306:	4013      	ands	r3, r2
 8004308:	d120      	bne.n	800434c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e07a      	b.n	8004404 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b02      	cmp	r3, #2
 8004314:	d107      	bne.n	8004326 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004316:	4b3e      	ldr	r3, [pc, #248]	; (8004410 <HAL_RCC_ClockConfig+0x1a0>)
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	2380      	movs	r3, #128	; 0x80
 800431c:	049b      	lsls	r3, r3, #18
 800431e:	4013      	ands	r3, r2
 8004320:	d114      	bne.n	800434c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e06e      	b.n	8004404 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2b03      	cmp	r3, #3
 800432c:	d107      	bne.n	800433e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800432e:	4b38      	ldr	r3, [pc, #224]	; (8004410 <HAL_RCC_ClockConfig+0x1a0>)
 8004330:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004332:	2380      	movs	r3, #128	; 0x80
 8004334:	029b      	lsls	r3, r3, #10
 8004336:	4013      	ands	r3, r2
 8004338:	d108      	bne.n	800434c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e062      	b.n	8004404 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800433e:	4b34      	ldr	r3, [pc, #208]	; (8004410 <HAL_RCC_ClockConfig+0x1a0>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2202      	movs	r2, #2
 8004344:	4013      	ands	r3, r2
 8004346:	d101      	bne.n	800434c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e05b      	b.n	8004404 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800434c:	4b30      	ldr	r3, [pc, #192]	; (8004410 <HAL_RCC_ClockConfig+0x1a0>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	2203      	movs	r2, #3
 8004352:	4393      	bics	r3, r2
 8004354:	0019      	movs	r1, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	4b2d      	ldr	r3, [pc, #180]	; (8004410 <HAL_RCC_ClockConfig+0x1a0>)
 800435c:	430a      	orrs	r2, r1
 800435e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004360:	f7fe fafe 	bl	8002960 <HAL_GetTick>
 8004364:	0003      	movs	r3, r0
 8004366:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004368:	e009      	b.n	800437e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800436a:	f7fe faf9 	bl	8002960 <HAL_GetTick>
 800436e:	0002      	movs	r2, r0
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	4a27      	ldr	r2, [pc, #156]	; (8004414 <HAL_RCC_ClockConfig+0x1a4>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d901      	bls.n	800437e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e042      	b.n	8004404 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800437e:	4b24      	ldr	r3, [pc, #144]	; (8004410 <HAL_RCC_ClockConfig+0x1a0>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	220c      	movs	r2, #12
 8004384:	401a      	ands	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	429a      	cmp	r2, r3
 800438e:	d1ec      	bne.n	800436a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004390:	4b1e      	ldr	r3, [pc, #120]	; (800440c <HAL_RCC_ClockConfig+0x19c>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2201      	movs	r2, #1
 8004396:	4013      	ands	r3, r2
 8004398:	683a      	ldr	r2, [r7, #0]
 800439a:	429a      	cmp	r2, r3
 800439c:	d211      	bcs.n	80043c2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800439e:	4b1b      	ldr	r3, [pc, #108]	; (800440c <HAL_RCC_ClockConfig+0x19c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2201      	movs	r2, #1
 80043a4:	4393      	bics	r3, r2
 80043a6:	0019      	movs	r1, r3
 80043a8:	4b18      	ldr	r3, [pc, #96]	; (800440c <HAL_RCC_ClockConfig+0x19c>)
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	430a      	orrs	r2, r1
 80043ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043b0:	4b16      	ldr	r3, [pc, #88]	; (800440c <HAL_RCC_ClockConfig+0x19c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2201      	movs	r2, #1
 80043b6:	4013      	ands	r3, r2
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d001      	beq.n	80043c2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e020      	b.n	8004404 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2204      	movs	r2, #4
 80043c8:	4013      	ands	r3, r2
 80043ca:	d009      	beq.n	80043e0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80043cc:	4b10      	ldr	r3, [pc, #64]	; (8004410 <HAL_RCC_ClockConfig+0x1a0>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	4a11      	ldr	r2, [pc, #68]	; (8004418 <HAL_RCC_ClockConfig+0x1a8>)
 80043d2:	4013      	ands	r3, r2
 80043d4:	0019      	movs	r1, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	4b0d      	ldr	r3, [pc, #52]	; (8004410 <HAL_RCC_ClockConfig+0x1a0>)
 80043dc:	430a      	orrs	r2, r1
 80043de:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80043e0:	f000 f820 	bl	8004424 <HAL_RCC_GetSysClockFreq>
 80043e4:	0001      	movs	r1, r0
 80043e6:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <HAL_RCC_ClockConfig+0x1a0>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	091b      	lsrs	r3, r3, #4
 80043ec:	220f      	movs	r2, #15
 80043ee:	4013      	ands	r3, r2
 80043f0:	4a0a      	ldr	r2, [pc, #40]	; (800441c <HAL_RCC_ClockConfig+0x1ac>)
 80043f2:	5cd3      	ldrb	r3, [r2, r3]
 80043f4:	000a      	movs	r2, r1
 80043f6:	40da      	lsrs	r2, r3
 80043f8:	4b09      	ldr	r3, [pc, #36]	; (8004420 <HAL_RCC_ClockConfig+0x1b0>)
 80043fa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80043fc:	2003      	movs	r0, #3
 80043fe:	f7fe f95b 	bl	80026b8 <HAL_InitTick>
  
  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	0018      	movs	r0, r3
 8004406:	46bd      	mov	sp, r7
 8004408:	b004      	add	sp, #16
 800440a:	bd80      	pop	{r7, pc}
 800440c:	40022000 	.word	0x40022000
 8004410:	40021000 	.word	0x40021000
 8004414:	00001388 	.word	0x00001388
 8004418:	fffff8ff 	.word	0xfffff8ff
 800441c:	08007e88 	.word	0x08007e88
 8004420:	20000000 	.word	0x20000000

08004424 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800442a:	2300      	movs	r3, #0
 800442c:	60fb      	str	r3, [r7, #12]
 800442e:	2300      	movs	r3, #0
 8004430:	60bb      	str	r3, [r7, #8]
 8004432:	2300      	movs	r3, #0
 8004434:	617b      	str	r3, [r7, #20]
 8004436:	2300      	movs	r3, #0
 8004438:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800443a:	2300      	movs	r3, #0
 800443c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800443e:	4b2d      	ldr	r3, [pc, #180]	; (80044f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	220c      	movs	r2, #12
 8004448:	4013      	ands	r3, r2
 800444a:	2b0c      	cmp	r3, #12
 800444c:	d046      	beq.n	80044dc <HAL_RCC_GetSysClockFreq+0xb8>
 800444e:	d848      	bhi.n	80044e2 <HAL_RCC_GetSysClockFreq+0xbe>
 8004450:	2b04      	cmp	r3, #4
 8004452:	d002      	beq.n	800445a <HAL_RCC_GetSysClockFreq+0x36>
 8004454:	2b08      	cmp	r3, #8
 8004456:	d003      	beq.n	8004460 <HAL_RCC_GetSysClockFreq+0x3c>
 8004458:	e043      	b.n	80044e2 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800445a:	4b27      	ldr	r3, [pc, #156]	; (80044f8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800445c:	613b      	str	r3, [r7, #16]
      break;
 800445e:	e043      	b.n	80044e8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	0c9b      	lsrs	r3, r3, #18
 8004464:	220f      	movs	r2, #15
 8004466:	4013      	ands	r3, r2
 8004468:	4a24      	ldr	r2, [pc, #144]	; (80044fc <HAL_RCC_GetSysClockFreq+0xd8>)
 800446a:	5cd3      	ldrb	r3, [r2, r3]
 800446c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800446e:	4b21      	ldr	r3, [pc, #132]	; (80044f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004472:	220f      	movs	r2, #15
 8004474:	4013      	ands	r3, r2
 8004476:	4a22      	ldr	r2, [pc, #136]	; (8004500 <HAL_RCC_GetSysClockFreq+0xdc>)
 8004478:	5cd3      	ldrb	r3, [r2, r3]
 800447a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	23c0      	movs	r3, #192	; 0xc0
 8004480:	025b      	lsls	r3, r3, #9
 8004482:	401a      	ands	r2, r3
 8004484:	2380      	movs	r3, #128	; 0x80
 8004486:	025b      	lsls	r3, r3, #9
 8004488:	429a      	cmp	r2, r3
 800448a:	d109      	bne.n	80044a0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800448c:	68b9      	ldr	r1, [r7, #8]
 800448e:	481a      	ldr	r0, [pc, #104]	; (80044f8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004490:	f7fb fe44 	bl	800011c <__udivsi3>
 8004494:	0003      	movs	r3, r0
 8004496:	001a      	movs	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4353      	muls	r3, r2
 800449c:	617b      	str	r3, [r7, #20]
 800449e:	e01a      	b.n	80044d6 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	23c0      	movs	r3, #192	; 0xc0
 80044a4:	025b      	lsls	r3, r3, #9
 80044a6:	401a      	ands	r2, r3
 80044a8:	23c0      	movs	r3, #192	; 0xc0
 80044aa:	025b      	lsls	r3, r3, #9
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d109      	bne.n	80044c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80044b0:	68b9      	ldr	r1, [r7, #8]
 80044b2:	4814      	ldr	r0, [pc, #80]	; (8004504 <HAL_RCC_GetSysClockFreq+0xe0>)
 80044b4:	f7fb fe32 	bl	800011c <__udivsi3>
 80044b8:	0003      	movs	r3, r0
 80044ba:	001a      	movs	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4353      	muls	r3, r2
 80044c0:	617b      	str	r3, [r7, #20]
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80044c4:	68b9      	ldr	r1, [r7, #8]
 80044c6:	480c      	ldr	r0, [pc, #48]	; (80044f8 <HAL_RCC_GetSysClockFreq+0xd4>)
 80044c8:	f7fb fe28 	bl	800011c <__udivsi3>
 80044cc:	0003      	movs	r3, r0
 80044ce:	001a      	movs	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4353      	muls	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	613b      	str	r3, [r7, #16]
      break;
 80044da:	e005      	b.n	80044e8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80044dc:	4b09      	ldr	r3, [pc, #36]	; (8004504 <HAL_RCC_GetSysClockFreq+0xe0>)
 80044de:	613b      	str	r3, [r7, #16]
      break;
 80044e0:	e002      	b.n	80044e8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044e2:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <HAL_RCC_GetSysClockFreq+0xd4>)
 80044e4:	613b      	str	r3, [r7, #16]
      break;
 80044e6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80044e8:	693b      	ldr	r3, [r7, #16]
}
 80044ea:	0018      	movs	r0, r3
 80044ec:	46bd      	mov	sp, r7
 80044ee:	b006      	add	sp, #24
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	46c0      	nop			; (mov r8, r8)
 80044f4:	40021000 	.word	0x40021000
 80044f8:	007a1200 	.word	0x007a1200
 80044fc:	08007ea0 	.word	0x08007ea0
 8004500:	08007eb0 	.word	0x08007eb0
 8004504:	02dc6c00 	.word	0x02dc6c00

08004508 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800450c:	4b02      	ldr	r3, [pc, #8]	; (8004518 <HAL_RCC_GetHCLKFreq+0x10>)
 800450e:	681b      	ldr	r3, [r3, #0]
}
 8004510:	0018      	movs	r0, r3
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	46c0      	nop			; (mov r8, r8)
 8004518:	20000000 	.word	0x20000000

0800451c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004520:	f7ff fff2 	bl	8004508 <HAL_RCC_GetHCLKFreq>
 8004524:	0001      	movs	r1, r0
 8004526:	4b06      	ldr	r3, [pc, #24]	; (8004540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	0a1b      	lsrs	r3, r3, #8
 800452c:	2207      	movs	r2, #7
 800452e:	4013      	ands	r3, r2
 8004530:	4a04      	ldr	r2, [pc, #16]	; (8004544 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004532:	5cd3      	ldrb	r3, [r2, r3]
 8004534:	40d9      	lsrs	r1, r3
 8004536:	000b      	movs	r3, r1
}    
 8004538:	0018      	movs	r0, r3
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	46c0      	nop			; (mov r8, r8)
 8004540:	40021000 	.word	0x40021000
 8004544:	08007e98 	.word	0x08007e98

08004548 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2207      	movs	r2, #7
 8004556:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004558:	4b0e      	ldr	r3, [pc, #56]	; (8004594 <HAL_RCC_GetClockConfig+0x4c>)
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	2203      	movs	r2, #3
 800455e:	401a      	ands	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004564:	4b0b      	ldr	r3, [pc, #44]	; (8004594 <HAL_RCC_GetClockConfig+0x4c>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	22f0      	movs	r2, #240	; 0xf0
 800456a:	401a      	ands	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8004570:	4b08      	ldr	r3, [pc, #32]	; (8004594 <HAL_RCC_GetClockConfig+0x4c>)
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	23e0      	movs	r3, #224	; 0xe0
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	401a      	ands	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 800457e:	4b06      	ldr	r3, [pc, #24]	; (8004598 <HAL_RCC_GetClockConfig+0x50>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2201      	movs	r2, #1
 8004584:	401a      	ands	r2, r3
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	601a      	str	r2, [r3, #0]
}
 800458a:	46c0      	nop			; (mov r8, r8)
 800458c:	46bd      	mov	sp, r7
 800458e:	b002      	add	sp, #8
 8004590:	bd80      	pop	{r7, pc}
 8004592:	46c0      	nop			; (mov r8, r8)
 8004594:	40021000 	.word	0x40021000
 8004598:	40022000 	.word	0x40022000

0800459c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	2380      	movs	r3, #128	; 0x80
 80045b2:	025b      	lsls	r3, r3, #9
 80045b4:	4013      	ands	r3, r2
 80045b6:	d100      	bne.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80045b8:	e08e      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80045ba:	2017      	movs	r0, #23
 80045bc:	183b      	adds	r3, r7, r0
 80045be:	2200      	movs	r2, #0
 80045c0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045c2:	4b67      	ldr	r3, [pc, #412]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80045c4:	69da      	ldr	r2, [r3, #28]
 80045c6:	2380      	movs	r3, #128	; 0x80
 80045c8:	055b      	lsls	r3, r3, #21
 80045ca:	4013      	ands	r3, r2
 80045cc:	d110      	bne.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80045ce:	4b64      	ldr	r3, [pc, #400]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80045d0:	69da      	ldr	r2, [r3, #28]
 80045d2:	4b63      	ldr	r3, [pc, #396]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80045d4:	2180      	movs	r1, #128	; 0x80
 80045d6:	0549      	lsls	r1, r1, #21
 80045d8:	430a      	orrs	r2, r1
 80045da:	61da      	str	r2, [r3, #28]
 80045dc:	4b60      	ldr	r3, [pc, #384]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80045de:	69da      	ldr	r2, [r3, #28]
 80045e0:	2380      	movs	r3, #128	; 0x80
 80045e2:	055b      	lsls	r3, r3, #21
 80045e4:	4013      	ands	r3, r2
 80045e6:	60bb      	str	r3, [r7, #8]
 80045e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ea:	183b      	adds	r3, r7, r0
 80045ec:	2201      	movs	r2, #1
 80045ee:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f0:	4b5c      	ldr	r3, [pc, #368]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	2380      	movs	r3, #128	; 0x80
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	4013      	ands	r3, r2
 80045fa:	d11a      	bne.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045fc:	4b59      	ldr	r3, [pc, #356]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	4b58      	ldr	r3, [pc, #352]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004602:	2180      	movs	r1, #128	; 0x80
 8004604:	0049      	lsls	r1, r1, #1
 8004606:	430a      	orrs	r2, r1
 8004608:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800460a:	f7fe f9a9 	bl	8002960 <HAL_GetTick>
 800460e:	0003      	movs	r3, r0
 8004610:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004612:	e008      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004614:	f7fe f9a4 	bl	8002960 <HAL_GetTick>
 8004618:	0002      	movs	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b64      	cmp	r3, #100	; 0x64
 8004620:	d901      	bls.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e097      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004626:	4b4f      	ldr	r3, [pc, #316]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	2380      	movs	r3, #128	; 0x80
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	4013      	ands	r3, r2
 8004630:	d0f0      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004632:	4b4b      	ldr	r3, [pc, #300]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004634:	6a1a      	ldr	r2, [r3, #32]
 8004636:	23c0      	movs	r3, #192	; 0xc0
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4013      	ands	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d034      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	23c0      	movs	r3, #192	; 0xc0
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4013      	ands	r3, r2
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	429a      	cmp	r2, r3
 8004652:	d02c      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004654:	4b42      	ldr	r3, [pc, #264]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	4a43      	ldr	r2, [pc, #268]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800465a:	4013      	ands	r3, r2
 800465c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800465e:	4b40      	ldr	r3, [pc, #256]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004660:	6a1a      	ldr	r2, [r3, #32]
 8004662:	4b3f      	ldr	r3, [pc, #252]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004664:	2180      	movs	r1, #128	; 0x80
 8004666:	0249      	lsls	r1, r1, #9
 8004668:	430a      	orrs	r2, r1
 800466a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800466c:	4b3c      	ldr	r3, [pc, #240]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800466e:	6a1a      	ldr	r2, [r3, #32]
 8004670:	4b3b      	ldr	r3, [pc, #236]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004672:	493e      	ldr	r1, [pc, #248]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004674:	400a      	ands	r2, r1
 8004676:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004678:	4b39      	ldr	r3, [pc, #228]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2201      	movs	r2, #1
 8004682:	4013      	ands	r3, r2
 8004684:	d013      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004686:	f7fe f96b 	bl	8002960 <HAL_GetTick>
 800468a:	0003      	movs	r3, r0
 800468c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800468e:	e009      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004690:	f7fe f966 	bl	8002960 <HAL_GetTick>
 8004694:	0002      	movs	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	4a35      	ldr	r2, [pc, #212]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d901      	bls.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e058      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a4:	4b2e      	ldr	r3, [pc, #184]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	2202      	movs	r2, #2
 80046aa:	4013      	ands	r3, r2
 80046ac:	d0f0      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046ae:	4b2c      	ldr	r3, [pc, #176]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	4a2d      	ldr	r2, [pc, #180]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80046b4:	4013      	ands	r3, r2
 80046b6:	0019      	movs	r1, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	4b28      	ldr	r3, [pc, #160]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80046be:	430a      	orrs	r2, r1
 80046c0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80046c2:	2317      	movs	r3, #23
 80046c4:	18fb      	adds	r3, r7, r3
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d105      	bne.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046cc:	4b24      	ldr	r3, [pc, #144]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80046ce:	69da      	ldr	r2, [r3, #28]
 80046d0:	4b23      	ldr	r3, [pc, #140]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80046d2:	4928      	ldr	r1, [pc, #160]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80046d4:	400a      	ands	r2, r1
 80046d6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2201      	movs	r2, #1
 80046de:	4013      	ands	r3, r2
 80046e0:	d009      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046e2:	4b1f      	ldr	r3, [pc, #124]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80046e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e6:	2203      	movs	r2, #3
 80046e8:	4393      	bics	r3, r2
 80046ea:	0019      	movs	r1, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689a      	ldr	r2, [r3, #8]
 80046f0:	4b1b      	ldr	r3, [pc, #108]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80046f2:	430a      	orrs	r2, r1
 80046f4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2220      	movs	r2, #32
 80046fc:	4013      	ands	r3, r2
 80046fe:	d009      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004700:	4b17      	ldr	r3, [pc, #92]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004704:	2210      	movs	r2, #16
 8004706:	4393      	bics	r3, r2
 8004708:	0019      	movs	r1, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68da      	ldr	r2, [r3, #12]
 800470e:	4b14      	ldr	r3, [pc, #80]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004710:	430a      	orrs	r2, r1
 8004712:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	2380      	movs	r3, #128	; 0x80
 800471a:	029b      	lsls	r3, r3, #10
 800471c:	4013      	ands	r3, r2
 800471e:	d009      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004720:	4b0f      	ldr	r3, [pc, #60]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004724:	2280      	movs	r2, #128	; 0x80
 8004726:	4393      	bics	r3, r2
 8004728:	0019      	movs	r1, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	695a      	ldr	r2, [r3, #20]
 800472e:	4b0c      	ldr	r3, [pc, #48]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004730:	430a      	orrs	r2, r1
 8004732:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	2380      	movs	r3, #128	; 0x80
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	4013      	ands	r3, r2
 800473e:	d009      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004740:	4b07      	ldr	r3, [pc, #28]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004744:	2240      	movs	r2, #64	; 0x40
 8004746:	4393      	bics	r3, r2
 8004748:	0019      	movs	r1, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691a      	ldr	r2, [r3, #16]
 800474e:	4b04      	ldr	r3, [pc, #16]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004750:	430a      	orrs	r2, r1
 8004752:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	0018      	movs	r0, r3
 8004758:	46bd      	mov	sp, r7
 800475a:	b006      	add	sp, #24
 800475c:	bd80      	pop	{r7, pc}
 800475e:	46c0      	nop			; (mov r8, r8)
 8004760:	40021000 	.word	0x40021000
 8004764:	40007000 	.word	0x40007000
 8004768:	fffffcff 	.word	0xfffffcff
 800476c:	fffeffff 	.word	0xfffeffff
 8004770:	00001388 	.word	0x00001388
 8004774:	efffffff 	.word	0xefffffff

08004778 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e042      	b.n	8004810 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	223d      	movs	r2, #61	; 0x3d
 800478e:	5c9b      	ldrb	r3, [r3, r2]
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d107      	bne.n	80047a6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	223c      	movs	r2, #60	; 0x3c
 800479a:	2100      	movs	r1, #0
 800479c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	0018      	movs	r0, r3
 80047a2:	f000 f839 	bl	8004818 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	223d      	movs	r2, #61	; 0x3d
 80047aa:	2102      	movs	r1, #2
 80047ac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	3304      	adds	r3, #4
 80047b6:	0019      	movs	r1, r3
 80047b8:	0010      	movs	r0, r2
 80047ba:	f000 f98f 	bl	8004adc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2246      	movs	r2, #70	; 0x46
 80047c2:	2101      	movs	r1, #1
 80047c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	223e      	movs	r2, #62	; 0x3e
 80047ca:	2101      	movs	r1, #1
 80047cc:	5499      	strb	r1, [r3, r2]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	223f      	movs	r2, #63	; 0x3f
 80047d2:	2101      	movs	r1, #1
 80047d4:	5499      	strb	r1, [r3, r2]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2240      	movs	r2, #64	; 0x40
 80047da:	2101      	movs	r1, #1
 80047dc:	5499      	strb	r1, [r3, r2]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2241      	movs	r2, #65	; 0x41
 80047e2:	2101      	movs	r1, #1
 80047e4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2242      	movs	r2, #66	; 0x42
 80047ea:	2101      	movs	r1, #1
 80047ec:	5499      	strb	r1, [r3, r2]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2243      	movs	r2, #67	; 0x43
 80047f2:	2101      	movs	r1, #1
 80047f4:	5499      	strb	r1, [r3, r2]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2244      	movs	r2, #68	; 0x44
 80047fa:	2101      	movs	r1, #1
 80047fc:	5499      	strb	r1, [r3, r2]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2245      	movs	r2, #69	; 0x45
 8004802:	2101      	movs	r1, #1
 8004804:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	223d      	movs	r2, #61	; 0x3d
 800480a:	2101      	movs	r1, #1
 800480c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	0018      	movs	r0, r3
 8004812:	46bd      	mov	sp, r7
 8004814:	b002      	add	sp, #8
 8004816:	bd80      	pop	{r7, pc}

08004818 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004820:	46c0      	nop			; (mov r8, r8)
 8004822:	46bd      	mov	sp, r7
 8004824:	b002      	add	sp, #8
 8004826:	bd80      	pop	{r7, pc}

08004828 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	223d      	movs	r2, #61	; 0x3d
 8004834:	5c9b      	ldrb	r3, [r3, r2]
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b01      	cmp	r3, #1
 800483a:	d001      	beq.n	8004840 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e036      	b.n	80048ae <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	223d      	movs	r2, #61	; 0x3d
 8004844:	2102      	movs	r1, #2
 8004846:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68da      	ldr	r2, [r3, #12]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2101      	movs	r1, #1
 8004854:	430a      	orrs	r2, r1
 8004856:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a16      	ldr	r2, [pc, #88]	; (80048b8 <HAL_TIM_Base_Start_IT+0x90>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d00a      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0x50>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	2380      	movs	r3, #128	; 0x80
 8004868:	05db      	lsls	r3, r3, #23
 800486a:	429a      	cmp	r2, r3
 800486c:	d004      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0x50>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a12      	ldr	r2, [pc, #72]	; (80048bc <HAL_TIM_Base_Start_IT+0x94>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d111      	bne.n	800489c <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	2207      	movs	r2, #7
 8004880:	4013      	ands	r3, r2
 8004882:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2b06      	cmp	r3, #6
 8004888:	d010      	beq.n	80048ac <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2101      	movs	r1, #1
 8004896:	430a      	orrs	r2, r1
 8004898:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800489a:	e007      	b.n	80048ac <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2101      	movs	r1, #1
 80048a8:	430a      	orrs	r2, r1
 80048aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	0018      	movs	r0, r3
 80048b0:	46bd      	mov	sp, r7
 80048b2:	b004      	add	sp, #16
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	46c0      	nop			; (mov r8, r8)
 80048b8:	40012c00 	.word	0x40012c00
 80048bc:	40000400 	.word	0x40000400

080048c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	2202      	movs	r2, #2
 80048dc:	4013      	ands	r3, r2
 80048de:	d021      	beq.n	8004924 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2202      	movs	r2, #2
 80048e4:	4013      	ands	r3, r2
 80048e6:	d01d      	beq.n	8004924 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2203      	movs	r2, #3
 80048ee:	4252      	negs	r2, r2
 80048f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	2203      	movs	r2, #3
 8004900:	4013      	ands	r3, r2
 8004902:	d004      	beq.n	800490e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	0018      	movs	r0, r3
 8004908:	f000 f8d0 	bl	8004aac <HAL_TIM_IC_CaptureCallback>
 800490c:	e007      	b.n	800491e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	0018      	movs	r0, r3
 8004912:	f000 f8c3 	bl	8004a9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	0018      	movs	r0, r3
 800491a:	f000 f8cf 	bl	8004abc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2204      	movs	r2, #4
 8004928:	4013      	ands	r3, r2
 800492a:	d022      	beq.n	8004972 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2204      	movs	r2, #4
 8004930:	4013      	ands	r3, r2
 8004932:	d01e      	beq.n	8004972 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2205      	movs	r2, #5
 800493a:	4252      	negs	r2, r2
 800493c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2202      	movs	r2, #2
 8004942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	699a      	ldr	r2, [r3, #24]
 800494a:	23c0      	movs	r3, #192	; 0xc0
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4013      	ands	r3, r2
 8004950:	d004      	beq.n	800495c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	0018      	movs	r0, r3
 8004956:	f000 f8a9 	bl	8004aac <HAL_TIM_IC_CaptureCallback>
 800495a:	e007      	b.n	800496c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	0018      	movs	r0, r3
 8004960:	f000 f89c 	bl	8004a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	0018      	movs	r0, r3
 8004968:	f000 f8a8 	bl	8004abc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	2208      	movs	r2, #8
 8004976:	4013      	ands	r3, r2
 8004978:	d021      	beq.n	80049be <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2208      	movs	r2, #8
 800497e:	4013      	ands	r3, r2
 8004980:	d01d      	beq.n	80049be <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2209      	movs	r2, #9
 8004988:	4252      	negs	r2, r2
 800498a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2204      	movs	r2, #4
 8004990:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	69db      	ldr	r3, [r3, #28]
 8004998:	2203      	movs	r2, #3
 800499a:	4013      	ands	r3, r2
 800499c:	d004      	beq.n	80049a8 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	0018      	movs	r0, r3
 80049a2:	f000 f883 	bl	8004aac <HAL_TIM_IC_CaptureCallback>
 80049a6:	e007      	b.n	80049b8 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	0018      	movs	r0, r3
 80049ac:	f000 f876 	bl	8004a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	0018      	movs	r0, r3
 80049b4:	f000 f882 	bl	8004abc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	2210      	movs	r2, #16
 80049c2:	4013      	ands	r3, r2
 80049c4:	d022      	beq.n	8004a0c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2210      	movs	r2, #16
 80049ca:	4013      	ands	r3, r2
 80049cc:	d01e      	beq.n	8004a0c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2211      	movs	r2, #17
 80049d4:	4252      	negs	r2, r2
 80049d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2208      	movs	r2, #8
 80049dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	69da      	ldr	r2, [r3, #28]
 80049e4:	23c0      	movs	r3, #192	; 0xc0
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4013      	ands	r3, r2
 80049ea:	d004      	beq.n	80049f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	0018      	movs	r0, r3
 80049f0:	f000 f85c 	bl	8004aac <HAL_TIM_IC_CaptureCallback>
 80049f4:	e007      	b.n	8004a06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	0018      	movs	r0, r3
 80049fa:	f000 f84f 	bl	8004a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	0018      	movs	r0, r3
 8004a02:	f000 f85b 	bl	8004abc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	4013      	ands	r3, r2
 8004a12:	d00c      	beq.n	8004a2e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2201      	movs	r2, #1
 8004a18:	4013      	ands	r3, r2
 8004a1a:	d008      	beq.n	8004a2e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2202      	movs	r2, #2
 8004a22:	4252      	negs	r2, r2
 8004a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	0018      	movs	r0, r3
 8004a2a:	f7fd fd85 	bl	8002538 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	2280      	movs	r2, #128	; 0x80
 8004a32:	4013      	ands	r3, r2
 8004a34:	d00c      	beq.n	8004a50 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2280      	movs	r2, #128	; 0x80
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	d008      	beq.n	8004a50 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2281      	movs	r2, #129	; 0x81
 8004a44:	4252      	negs	r2, r2
 8004a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	0018      	movs	r0, r3
 8004a4c:	f000 f8d2 	bl	8004bf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	2240      	movs	r2, #64	; 0x40
 8004a54:	4013      	ands	r3, r2
 8004a56:	d00c      	beq.n	8004a72 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2240      	movs	r2, #64	; 0x40
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	d008      	beq.n	8004a72 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2241      	movs	r2, #65	; 0x41
 8004a66:	4252      	negs	r2, r2
 8004a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	f000 f82d 	bl	8004acc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2220      	movs	r2, #32
 8004a76:	4013      	ands	r3, r2
 8004a78:	d00c      	beq.n	8004a94 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	4013      	ands	r3, r2
 8004a80:	d008      	beq.n	8004a94 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2221      	movs	r2, #33	; 0x21
 8004a88:	4252      	negs	r2, r2
 8004a8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	0018      	movs	r0, r3
 8004a90:	f000 f8a8 	bl	8004be4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a94:	46c0      	nop			; (mov r8, r8)
 8004a96:	46bd      	mov	sp, r7
 8004a98:	b004      	add	sp, #16
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004aa4:	46c0      	nop			; (mov r8, r8)
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	b002      	add	sp, #8
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ab4:	46c0      	nop			; (mov r8, r8)
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	b002      	add	sp, #8
 8004aba:	bd80      	pop	{r7, pc}

08004abc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ac4:	46c0      	nop			; (mov r8, r8)
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	b002      	add	sp, #8
 8004aca:	bd80      	pop	{r7, pc}

08004acc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ad4:	46c0      	nop			; (mov r8, r8)
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	b002      	add	sp, #8
 8004ada:	bd80      	pop	{r7, pc}

08004adc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a37      	ldr	r2, [pc, #220]	; (8004bcc <TIM_Base_SetConfig+0xf0>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d008      	beq.n	8004b06 <TIM_Base_SetConfig+0x2a>
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	2380      	movs	r3, #128	; 0x80
 8004af8:	05db      	lsls	r3, r3, #23
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d003      	beq.n	8004b06 <TIM_Base_SetConfig+0x2a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a33      	ldr	r2, [pc, #204]	; (8004bd0 <TIM_Base_SetConfig+0xf4>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d108      	bne.n	8004b18 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2270      	movs	r2, #112	; 0x70
 8004b0a:	4393      	bics	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a2c      	ldr	r2, [pc, #176]	; (8004bcc <TIM_Base_SetConfig+0xf0>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d014      	beq.n	8004b4a <TIM_Base_SetConfig+0x6e>
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	2380      	movs	r3, #128	; 0x80
 8004b24:	05db      	lsls	r3, r3, #23
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d00f      	beq.n	8004b4a <TIM_Base_SetConfig+0x6e>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a28      	ldr	r2, [pc, #160]	; (8004bd0 <TIM_Base_SetConfig+0xf4>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d00b      	beq.n	8004b4a <TIM_Base_SetConfig+0x6e>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a27      	ldr	r2, [pc, #156]	; (8004bd4 <TIM_Base_SetConfig+0xf8>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d007      	beq.n	8004b4a <TIM_Base_SetConfig+0x6e>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a26      	ldr	r2, [pc, #152]	; (8004bd8 <TIM_Base_SetConfig+0xfc>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d003      	beq.n	8004b4a <TIM_Base_SetConfig+0x6e>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a25      	ldr	r2, [pc, #148]	; (8004bdc <TIM_Base_SetConfig+0x100>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d108      	bne.n	8004b5c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	4a24      	ldr	r2, [pc, #144]	; (8004be0 <TIM_Base_SetConfig+0x104>)
 8004b4e:	4013      	ands	r3, r2
 8004b50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2280      	movs	r2, #128	; 0x80
 8004b60:	4393      	bics	r3, r2
 8004b62:	001a      	movs	r2, r3
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	689a      	ldr	r2, [r3, #8]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a11      	ldr	r2, [pc, #68]	; (8004bcc <TIM_Base_SetConfig+0xf0>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d007      	beq.n	8004b9a <TIM_Base_SetConfig+0xbe>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a12      	ldr	r2, [pc, #72]	; (8004bd8 <TIM_Base_SetConfig+0xfc>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d003      	beq.n	8004b9a <TIM_Base_SetConfig+0xbe>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a11      	ldr	r2, [pc, #68]	; (8004bdc <TIM_Base_SetConfig+0x100>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d103      	bne.n	8004ba2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	691a      	ldr	r2, [r3, #16]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	2201      	movs	r2, #1
 8004bae:	4013      	ands	r3, r2
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d106      	bne.n	8004bc2 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	4393      	bics	r3, r2
 8004bbc:	001a      	movs	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	611a      	str	r2, [r3, #16]
  }
}
 8004bc2:	46c0      	nop			; (mov r8, r8)
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	b004      	add	sp, #16
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	46c0      	nop			; (mov r8, r8)
 8004bcc:	40012c00 	.word	0x40012c00
 8004bd0:	40000400 	.word	0x40000400
 8004bd4:	40002000 	.word	0x40002000
 8004bd8:	40014400 	.word	0x40014400
 8004bdc:	40014800 	.word	0x40014800
 8004be0:	fffffcff 	.word	0xfffffcff

08004be4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bec:	46c0      	nop			; (mov r8, r8)
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	b002      	add	sp, #8
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bfc:	46c0      	nop			; (mov r8, r8)
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	b002      	add	sp, #8
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e044      	b.n	8004ca0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d107      	bne.n	8004c2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2278      	movs	r2, #120	; 0x78
 8004c22:	2100      	movs	r1, #0
 8004c24:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f7fd fcef 	bl	800260c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2224      	movs	r2, #36	; 0x24
 8004c32:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2101      	movs	r1, #1
 8004c40:	438a      	bics	r2, r1
 8004c42:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d003      	beq.n	8004c54 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	0018      	movs	r0, r3
 8004c50:	f000 fd60 	bl	8005714 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	0018      	movs	r0, r3
 8004c58:	f000 fc1c 	bl	8005494 <UART_SetConfig>
 8004c5c:	0003      	movs	r3, r0
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d101      	bne.n	8004c66 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e01c      	b.n	8004ca0 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	490d      	ldr	r1, [pc, #52]	; (8004ca8 <HAL_UART_Init+0xa4>)
 8004c72:	400a      	ands	r2, r1
 8004c74:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	689a      	ldr	r2, [r3, #8]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	212a      	movs	r1, #42	; 0x2a
 8004c82:	438a      	bics	r2, r1
 8004c84:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2101      	movs	r1, #1
 8004c92:	430a      	orrs	r2, r1
 8004c94:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	0018      	movs	r0, r3
 8004c9a:	f000 fdef 	bl	800587c <UART_CheckIdleState>
 8004c9e:	0003      	movs	r3, r0
}
 8004ca0:	0018      	movs	r0, r3
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	b002      	add	sp, #8
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	ffffb7ff 	.word	0xffffb7ff

08004cac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b08a      	sub	sp, #40	; 0x28
 8004cb0:	af02      	add	r7, sp, #8
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	603b      	str	r3, [r7, #0]
 8004cb8:	1dbb      	adds	r3, r7, #6
 8004cba:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cc0:	2b20      	cmp	r3, #32
 8004cc2:	d000      	beq.n	8004cc6 <HAL_UART_Transmit+0x1a>
 8004cc4:	e08d      	b.n	8004de2 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d003      	beq.n	8004cd4 <HAL_UART_Transmit+0x28>
 8004ccc:	1dbb      	adds	r3, r7, #6
 8004cce:	881b      	ldrh	r3, [r3, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d101      	bne.n	8004cd8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e085      	b.n	8004de4 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	2380      	movs	r3, #128	; 0x80
 8004cde:	015b      	lsls	r3, r3, #5
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d109      	bne.n	8004cf8 <HAL_UART_Transmit+0x4c>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d105      	bne.n	8004cf8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	d001      	beq.n	8004cf8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e075      	b.n	8004de4 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2284      	movs	r2, #132	; 0x84
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2221      	movs	r2, #33	; 0x21
 8004d04:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d06:	f7fd fe2b 	bl	8002960 <HAL_GetTick>
 8004d0a:	0003      	movs	r3, r0
 8004d0c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	1dba      	adds	r2, r7, #6
 8004d12:	2150      	movs	r1, #80	; 0x50
 8004d14:	8812      	ldrh	r2, [r2, #0]
 8004d16:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	1dba      	adds	r2, r7, #6
 8004d1c:	2152      	movs	r1, #82	; 0x52
 8004d1e:	8812      	ldrh	r2, [r2, #0]
 8004d20:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	689a      	ldr	r2, [r3, #8]
 8004d26:	2380      	movs	r3, #128	; 0x80
 8004d28:	015b      	lsls	r3, r3, #5
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d108      	bne.n	8004d40 <HAL_UART_Transmit+0x94>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d104      	bne.n	8004d40 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8004d36:	2300      	movs	r3, #0
 8004d38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	61bb      	str	r3, [r7, #24]
 8004d3e:	e003      	b.n	8004d48 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d44:	2300      	movs	r3, #0
 8004d46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d48:	e030      	b.n	8004dac <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	0013      	movs	r3, r2
 8004d54:	2200      	movs	r2, #0
 8004d56:	2180      	movs	r1, #128	; 0x80
 8004d58:	f000 fe38 	bl	80059cc <UART_WaitOnFlagUntilTimeout>
 8004d5c:	1e03      	subs	r3, r0, #0
 8004d5e:	d004      	beq.n	8004d6a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2220      	movs	r2, #32
 8004d64:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e03c      	b.n	8004de4 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10b      	bne.n	8004d88 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	881a      	ldrh	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	05d2      	lsls	r2, r2, #23
 8004d7a:	0dd2      	lsrs	r2, r2, #23
 8004d7c:	b292      	uxth	r2, r2
 8004d7e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	3302      	adds	r3, #2
 8004d84:	61bb      	str	r3, [r7, #24]
 8004d86:	e008      	b.n	8004d9a <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	781a      	ldrb	r2, [r3, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	b292      	uxth	r2, r2
 8004d92:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	3301      	adds	r3, #1
 8004d98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2252      	movs	r2, #82	; 0x52
 8004d9e:	5a9b      	ldrh	r3, [r3, r2]
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	3b01      	subs	r3, #1
 8004da4:	b299      	uxth	r1, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2252      	movs	r2, #82	; 0x52
 8004daa:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2252      	movs	r2, #82	; 0x52
 8004db0:	5a9b      	ldrh	r3, [r3, r2]
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1c8      	bne.n	8004d4a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	0013      	movs	r3, r2
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	2140      	movs	r1, #64	; 0x40
 8004dc6:	f000 fe01 	bl	80059cc <UART_WaitOnFlagUntilTimeout>
 8004dca:	1e03      	subs	r3, r0, #0
 8004dcc:	d004      	beq.n	8004dd8 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e005      	b.n	8004de4 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2220      	movs	r2, #32
 8004ddc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004dde:	2300      	movs	r3, #0
 8004de0:	e000      	b.n	8004de4 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8004de2:	2302      	movs	r3, #2
  }
}
 8004de4:	0018      	movs	r0, r3
 8004de6:	46bd      	mov	sp, r7
 8004de8:	b008      	add	sp, #32
 8004dea:	bd80      	pop	{r7, pc}

08004dec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b088      	sub	sp, #32
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	1dbb      	adds	r3, r7, #6
 8004df8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2280      	movs	r2, #128	; 0x80
 8004dfe:	589b      	ldr	r3, [r3, r2]
 8004e00:	2b20      	cmp	r3, #32
 8004e02:	d145      	bne.n	8004e90 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d003      	beq.n	8004e12 <HAL_UART_Receive_IT+0x26>
 8004e0a:	1dbb      	adds	r3, r7, #6
 8004e0c:	881b      	ldrh	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e03d      	b.n	8004e92 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	689a      	ldr	r2, [r3, #8]
 8004e1a:	2380      	movs	r3, #128	; 0x80
 8004e1c:	015b      	lsls	r3, r3, #5
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d109      	bne.n	8004e36 <HAL_UART_Receive_IT+0x4a>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d105      	bne.n	8004e36 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	4013      	ands	r3, r2
 8004e30:	d001      	beq.n	8004e36 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e02d      	b.n	8004e92 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	2380      	movs	r3, #128	; 0x80
 8004e44:	041b      	lsls	r3, r3, #16
 8004e46:	4013      	ands	r3, r2
 8004e48:	d019      	beq.n	8004e7e <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e4a:	f3ef 8310 	mrs	r3, PRIMASK
 8004e4e:	613b      	str	r3, [r7, #16]
  return(result);
 8004e50:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e52:	61fb      	str	r3, [r7, #28]
 8004e54:	2301      	movs	r3, #1
 8004e56:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f383 8810 	msr	PRIMASK, r3
}
 8004e5e:	46c0      	nop			; (mov r8, r8)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2180      	movs	r1, #128	; 0x80
 8004e6c:	04c9      	lsls	r1, r1, #19
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	601a      	str	r2, [r3, #0]
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	f383 8810 	msr	PRIMASK, r3
}
 8004e7c:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004e7e:	1dbb      	adds	r3, r7, #6
 8004e80:	881a      	ldrh	r2, [r3, #0]
 8004e82:	68b9      	ldr	r1, [r7, #8]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	0018      	movs	r0, r3
 8004e88:	f000 fe10 	bl	8005aac <UART_Start_Receive_IT>
 8004e8c:	0003      	movs	r3, r0
 8004e8e:	e000      	b.n	8004e92 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8004e90:	2302      	movs	r3, #2
  }
}
 8004e92:	0018      	movs	r0, r3
 8004e94:	46bd      	mov	sp, r7
 8004e96:	b008      	add	sp, #32
 8004e98:	bd80      	pop	{r7, pc}
	...

08004e9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e9c:	b590      	push	{r4, r7, lr}
 8004e9e:	b0ab      	sub	sp, #172	; 0xac
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	22a4      	movs	r2, #164	; 0xa4
 8004eac:	18b9      	adds	r1, r7, r2
 8004eae:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	20a0      	movs	r0, #160	; 0xa0
 8004eb8:	1839      	adds	r1, r7, r0
 8004eba:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	219c      	movs	r1, #156	; 0x9c
 8004ec4:	1879      	adds	r1, r7, r1
 8004ec6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004ec8:	0011      	movs	r1, r2
 8004eca:	18bb      	adds	r3, r7, r2
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a99      	ldr	r2, [pc, #612]	; (8005134 <HAL_UART_IRQHandler+0x298>)
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	2298      	movs	r2, #152	; 0x98
 8004ed4:	18bc      	adds	r4, r7, r2
 8004ed6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004ed8:	18bb      	adds	r3, r7, r2
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d114      	bne.n	8004f0a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ee0:	187b      	adds	r3, r7, r1
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2220      	movs	r2, #32
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	d00f      	beq.n	8004f0a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004eea:	183b      	adds	r3, r7, r0
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2220      	movs	r2, #32
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	d00a      	beq.n	8004f0a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d100      	bne.n	8004efe <HAL_UART_IRQHandler+0x62>
 8004efc:	e29e      	b.n	800543c <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	0010      	movs	r0, r2
 8004f06:	4798      	blx	r3
      }
      return;
 8004f08:	e298      	b.n	800543c <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004f0a:	2398      	movs	r3, #152	; 0x98
 8004f0c:	18fb      	adds	r3, r7, r3
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d100      	bne.n	8004f16 <HAL_UART_IRQHandler+0x7a>
 8004f14:	e114      	b.n	8005140 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004f16:	239c      	movs	r3, #156	; 0x9c
 8004f18:	18fb      	adds	r3, r7, r3
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	4013      	ands	r3, r2
 8004f20:	d106      	bne.n	8004f30 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004f22:	23a0      	movs	r3, #160	; 0xa0
 8004f24:	18fb      	adds	r3, r7, r3
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a83      	ldr	r2, [pc, #524]	; (8005138 <HAL_UART_IRQHandler+0x29c>)
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	d100      	bne.n	8004f30 <HAL_UART_IRQHandler+0x94>
 8004f2e:	e107      	b.n	8005140 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f30:	23a4      	movs	r3, #164	; 0xa4
 8004f32:	18fb      	adds	r3, r7, r3
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2201      	movs	r2, #1
 8004f38:	4013      	ands	r3, r2
 8004f3a:	d012      	beq.n	8004f62 <HAL_UART_IRQHandler+0xc6>
 8004f3c:	23a0      	movs	r3, #160	; 0xa0
 8004f3e:	18fb      	adds	r3, r7, r3
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	2380      	movs	r3, #128	; 0x80
 8004f44:	005b      	lsls	r3, r3, #1
 8004f46:	4013      	ands	r3, r2
 8004f48:	d00b      	beq.n	8004f62 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2284      	movs	r2, #132	; 0x84
 8004f56:	589b      	ldr	r3, [r3, r2]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2184      	movs	r1, #132	; 0x84
 8004f60:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f62:	23a4      	movs	r3, #164	; 0xa4
 8004f64:	18fb      	adds	r3, r7, r3
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2202      	movs	r2, #2
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	d011      	beq.n	8004f92 <HAL_UART_IRQHandler+0xf6>
 8004f6e:	239c      	movs	r3, #156	; 0x9c
 8004f70:	18fb      	adds	r3, r7, r3
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2201      	movs	r2, #1
 8004f76:	4013      	ands	r3, r2
 8004f78:	d00b      	beq.n	8004f92 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2202      	movs	r2, #2
 8004f80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2284      	movs	r2, #132	; 0x84
 8004f86:	589b      	ldr	r3, [r3, r2]
 8004f88:	2204      	movs	r2, #4
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2184      	movs	r1, #132	; 0x84
 8004f90:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f92:	23a4      	movs	r3, #164	; 0xa4
 8004f94:	18fb      	adds	r3, r7, r3
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2204      	movs	r2, #4
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	d011      	beq.n	8004fc2 <HAL_UART_IRQHandler+0x126>
 8004f9e:	239c      	movs	r3, #156	; 0x9c
 8004fa0:	18fb      	adds	r3, r7, r3
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	d00b      	beq.n	8004fc2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2204      	movs	r2, #4
 8004fb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2284      	movs	r2, #132	; 0x84
 8004fb6:	589b      	ldr	r3, [r3, r2]
 8004fb8:	2202      	movs	r2, #2
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2184      	movs	r1, #132	; 0x84
 8004fc0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004fc2:	23a4      	movs	r3, #164	; 0xa4
 8004fc4:	18fb      	adds	r3, r7, r3
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2208      	movs	r2, #8
 8004fca:	4013      	ands	r3, r2
 8004fcc:	d017      	beq.n	8004ffe <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004fce:	23a0      	movs	r3, #160	; 0xa0
 8004fd0:	18fb      	adds	r3, r7, r3
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2220      	movs	r2, #32
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	d105      	bne.n	8004fe6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004fda:	239c      	movs	r3, #156	; 0x9c
 8004fdc:	18fb      	adds	r3, r7, r3
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004fe4:	d00b      	beq.n	8004ffe <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2208      	movs	r2, #8
 8004fec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2284      	movs	r2, #132	; 0x84
 8004ff2:	589b      	ldr	r3, [r3, r2]
 8004ff4:	2208      	movs	r2, #8
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2184      	movs	r1, #132	; 0x84
 8004ffc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004ffe:	23a4      	movs	r3, #164	; 0xa4
 8005000:	18fb      	adds	r3, r7, r3
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	2380      	movs	r3, #128	; 0x80
 8005006:	011b      	lsls	r3, r3, #4
 8005008:	4013      	ands	r3, r2
 800500a:	d013      	beq.n	8005034 <HAL_UART_IRQHandler+0x198>
 800500c:	23a0      	movs	r3, #160	; 0xa0
 800500e:	18fb      	adds	r3, r7, r3
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	2380      	movs	r3, #128	; 0x80
 8005014:	04db      	lsls	r3, r3, #19
 8005016:	4013      	ands	r3, r2
 8005018:	d00c      	beq.n	8005034 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2280      	movs	r2, #128	; 0x80
 8005020:	0112      	lsls	r2, r2, #4
 8005022:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2284      	movs	r2, #132	; 0x84
 8005028:	589b      	ldr	r3, [r3, r2]
 800502a:	2220      	movs	r2, #32
 800502c:	431a      	orrs	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2184      	movs	r1, #132	; 0x84
 8005032:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2284      	movs	r2, #132	; 0x84
 8005038:	589b      	ldr	r3, [r3, r2]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d100      	bne.n	8005040 <HAL_UART_IRQHandler+0x1a4>
 800503e:	e1ff      	b.n	8005440 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005040:	23a4      	movs	r3, #164	; 0xa4
 8005042:	18fb      	adds	r3, r7, r3
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2220      	movs	r2, #32
 8005048:	4013      	ands	r3, r2
 800504a:	d00e      	beq.n	800506a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800504c:	23a0      	movs	r3, #160	; 0xa0
 800504e:	18fb      	adds	r3, r7, r3
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2220      	movs	r2, #32
 8005054:	4013      	ands	r3, r2
 8005056:	d008      	beq.n	800506a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800505c:	2b00      	cmp	r3, #0
 800505e:	d004      	beq.n	800506a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	0010      	movs	r0, r2
 8005068:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2284      	movs	r2, #132	; 0x84
 800506e:	589b      	ldr	r3, [r3, r2]
 8005070:	2194      	movs	r1, #148	; 0x94
 8005072:	187a      	adds	r2, r7, r1
 8005074:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	2240      	movs	r2, #64	; 0x40
 800507e:	4013      	ands	r3, r2
 8005080:	2b40      	cmp	r3, #64	; 0x40
 8005082:	d004      	beq.n	800508e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005084:	187b      	adds	r3, r7, r1
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2228      	movs	r2, #40	; 0x28
 800508a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800508c:	d047      	beq.n	800511e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	0018      	movs	r0, r3
 8005092:	f000 fdd5 	bl	8005c40 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	2240      	movs	r2, #64	; 0x40
 800509e:	4013      	ands	r3, r2
 80050a0:	2b40      	cmp	r3, #64	; 0x40
 80050a2:	d137      	bne.n	8005114 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050a4:	f3ef 8310 	mrs	r3, PRIMASK
 80050a8:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80050aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050ac:	2090      	movs	r0, #144	; 0x90
 80050ae:	183a      	adds	r2, r7, r0
 80050b0:	6013      	str	r3, [r2, #0]
 80050b2:	2301      	movs	r3, #1
 80050b4:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050b8:	f383 8810 	msr	PRIMASK, r3
}
 80050bc:	46c0      	nop			; (mov r8, r8)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	689a      	ldr	r2, [r3, #8]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2140      	movs	r1, #64	; 0x40
 80050ca:	438a      	bics	r2, r1
 80050cc:	609a      	str	r2, [r3, #8]
 80050ce:	183b      	adds	r3, r7, r0
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050d6:	f383 8810 	msr	PRIMASK, r3
}
 80050da:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d012      	beq.n	800510a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050e8:	4a14      	ldr	r2, [pc, #80]	; (800513c <HAL_UART_IRQHandler+0x2a0>)
 80050ea:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050f0:	0018      	movs	r0, r3
 80050f2:	f7fe fb50 	bl	8003796 <HAL_DMA_Abort_IT>
 80050f6:	1e03      	subs	r3, r0, #0
 80050f8:	d01a      	beq.n	8005130 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005104:	0018      	movs	r0, r3
 8005106:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005108:	e012      	b.n	8005130 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	0018      	movs	r0, r3
 800510e:	f000 f9ad 	bl	800546c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005112:	e00d      	b.n	8005130 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	0018      	movs	r0, r3
 8005118:	f000 f9a8 	bl	800546c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800511c:	e008      	b.n	8005130 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	0018      	movs	r0, r3
 8005122:	f000 f9a3 	bl	800546c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2284      	movs	r2, #132	; 0x84
 800512a:	2100      	movs	r1, #0
 800512c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800512e:	e187      	b.n	8005440 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005130:	46c0      	nop			; (mov r8, r8)
    return;
 8005132:	e185      	b.n	8005440 <HAL_UART_IRQHandler+0x5a4>
 8005134:	0000080f 	.word	0x0000080f
 8005138:	04000120 	.word	0x04000120
 800513c:	08005d09 	.word	0x08005d09

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005144:	2b01      	cmp	r3, #1
 8005146:	d000      	beq.n	800514a <HAL_UART_IRQHandler+0x2ae>
 8005148:	e139      	b.n	80053be <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800514a:	23a4      	movs	r3, #164	; 0xa4
 800514c:	18fb      	adds	r3, r7, r3
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2210      	movs	r2, #16
 8005152:	4013      	ands	r3, r2
 8005154:	d100      	bne.n	8005158 <HAL_UART_IRQHandler+0x2bc>
 8005156:	e132      	b.n	80053be <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005158:	23a0      	movs	r3, #160	; 0xa0
 800515a:	18fb      	adds	r3, r7, r3
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2210      	movs	r2, #16
 8005160:	4013      	ands	r3, r2
 8005162:	d100      	bne.n	8005166 <HAL_UART_IRQHandler+0x2ca>
 8005164:	e12b      	b.n	80053be <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2210      	movs	r2, #16
 800516c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	2240      	movs	r2, #64	; 0x40
 8005176:	4013      	ands	r3, r2
 8005178:	2b40      	cmp	r3, #64	; 0x40
 800517a:	d000      	beq.n	800517e <HAL_UART_IRQHandler+0x2e2>
 800517c:	e09f      	b.n	80052be <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	217e      	movs	r1, #126	; 0x7e
 8005188:	187b      	adds	r3, r7, r1
 800518a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800518c:	187b      	adds	r3, r7, r1
 800518e:	881b      	ldrh	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d100      	bne.n	8005196 <HAL_UART_IRQHandler+0x2fa>
 8005194:	e156      	b.n	8005444 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2258      	movs	r2, #88	; 0x58
 800519a:	5a9b      	ldrh	r3, [r3, r2]
 800519c:	187a      	adds	r2, r7, r1
 800519e:	8812      	ldrh	r2, [r2, #0]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d300      	bcc.n	80051a6 <HAL_UART_IRQHandler+0x30a>
 80051a4:	e14e      	b.n	8005444 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	187a      	adds	r2, r7, r1
 80051aa:	215a      	movs	r1, #90	; 0x5a
 80051ac:	8812      	ldrh	r2, [r2, #0]
 80051ae:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	2b20      	cmp	r3, #32
 80051b8:	d06f      	beq.n	800529a <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051ba:	f3ef 8310 	mrs	r3, PRIMASK
 80051be:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80051c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80051c4:	2301      	movs	r3, #1
 80051c6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ca:	f383 8810 	msr	PRIMASK, r3
}
 80051ce:	46c0      	nop			; (mov r8, r8)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	499e      	ldr	r1, [pc, #632]	; (8005454 <HAL_UART_IRQHandler+0x5b8>)
 80051dc:	400a      	ands	r2, r1
 80051de:	601a      	str	r2, [r3, #0]
 80051e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051e2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e6:	f383 8810 	msr	PRIMASK, r3
}
 80051ea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051ec:	f3ef 8310 	mrs	r3, PRIMASK
 80051f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80051f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051f4:	677b      	str	r3, [r7, #116]	; 0x74
 80051f6:	2301      	movs	r3, #1
 80051f8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051fc:	f383 8810 	msr	PRIMASK, r3
}
 8005200:	46c0      	nop			; (mov r8, r8)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	689a      	ldr	r2, [r3, #8]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2101      	movs	r1, #1
 800520e:	438a      	bics	r2, r1
 8005210:	609a      	str	r2, [r3, #8]
 8005212:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005214:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005218:	f383 8810 	msr	PRIMASK, r3
}
 800521c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800521e:	f3ef 8310 	mrs	r3, PRIMASK
 8005222:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005224:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005226:	673b      	str	r3, [r7, #112]	; 0x70
 8005228:	2301      	movs	r3, #1
 800522a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800522c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800522e:	f383 8810 	msr	PRIMASK, r3
}
 8005232:	46c0      	nop			; (mov r8, r8)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	689a      	ldr	r2, [r3, #8]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2140      	movs	r1, #64	; 0x40
 8005240:	438a      	bics	r2, r1
 8005242:	609a      	str	r2, [r3, #8]
 8005244:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005246:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800524a:	f383 8810 	msr	PRIMASK, r3
}
 800524e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2280      	movs	r2, #128	; 0x80
 8005254:	2120      	movs	r1, #32
 8005256:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800525e:	f3ef 8310 	mrs	r3, PRIMASK
 8005262:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005264:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005266:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005268:	2301      	movs	r3, #1
 800526a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800526c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800526e:	f383 8810 	msr	PRIMASK, r3
}
 8005272:	46c0      	nop			; (mov r8, r8)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2110      	movs	r1, #16
 8005280:	438a      	bics	r2, r1
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005286:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005288:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800528a:	f383 8810 	msr	PRIMASK, r3
}
 800528e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005294:	0018      	movs	r0, r3
 8005296:	f7fe fa46 	bl	8003726 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2202      	movs	r2, #2
 800529e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2258      	movs	r2, #88	; 0x58
 80052a4:	5a9a      	ldrh	r2, [r3, r2]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	215a      	movs	r1, #90	; 0x5a
 80052aa:	5a5b      	ldrh	r3, [r3, r1]
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	0011      	movs	r1, r2
 80052b6:	0018      	movs	r0, r3
 80052b8:	f000 f8e0 	bl	800547c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80052bc:	e0c2      	b.n	8005444 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2258      	movs	r2, #88	; 0x58
 80052c2:	5a99      	ldrh	r1, [r3, r2]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	225a      	movs	r2, #90	; 0x5a
 80052c8:	5a9b      	ldrh	r3, [r3, r2]
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	208e      	movs	r0, #142	; 0x8e
 80052ce:	183b      	adds	r3, r7, r0
 80052d0:	1a8a      	subs	r2, r1, r2
 80052d2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	225a      	movs	r2, #90	; 0x5a
 80052d8:	5a9b      	ldrh	r3, [r3, r2]
 80052da:	b29b      	uxth	r3, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d100      	bne.n	80052e2 <HAL_UART_IRQHandler+0x446>
 80052e0:	e0b2      	b.n	8005448 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 80052e2:	183b      	adds	r3, r7, r0
 80052e4:	881b      	ldrh	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d100      	bne.n	80052ec <HAL_UART_IRQHandler+0x450>
 80052ea:	e0ad      	b.n	8005448 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ec:	f3ef 8310 	mrs	r3, PRIMASK
 80052f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80052f2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052f4:	2488      	movs	r4, #136	; 0x88
 80052f6:	193a      	adds	r2, r7, r4
 80052f8:	6013      	str	r3, [r2, #0]
 80052fa:	2301      	movs	r3, #1
 80052fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f383 8810 	msr	PRIMASK, r3
}
 8005304:	46c0      	nop			; (mov r8, r8)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4951      	ldr	r1, [pc, #324]	; (8005458 <HAL_UART_IRQHandler+0x5bc>)
 8005312:	400a      	ands	r2, r1
 8005314:	601a      	str	r2, [r3, #0]
 8005316:	193b      	adds	r3, r7, r4
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f383 8810 	msr	PRIMASK, r3
}
 8005322:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005324:	f3ef 8310 	mrs	r3, PRIMASK
 8005328:	61bb      	str	r3, [r7, #24]
  return(result);
 800532a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800532c:	2484      	movs	r4, #132	; 0x84
 800532e:	193a      	adds	r2, r7, r4
 8005330:	6013      	str	r3, [r2, #0]
 8005332:	2301      	movs	r3, #1
 8005334:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	f383 8810 	msr	PRIMASK, r3
}
 800533c:	46c0      	nop			; (mov r8, r8)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	689a      	ldr	r2, [r3, #8]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2101      	movs	r1, #1
 800534a:	438a      	bics	r2, r1
 800534c:	609a      	str	r2, [r3, #8]
 800534e:	193b      	adds	r3, r7, r4
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005354:	6a3b      	ldr	r3, [r7, #32]
 8005356:	f383 8810 	msr	PRIMASK, r3
}
 800535a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2280      	movs	r2, #128	; 0x80
 8005360:	2120      	movs	r1, #32
 8005362:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005370:	f3ef 8310 	mrs	r3, PRIMASK
 8005374:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005376:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005378:	2480      	movs	r4, #128	; 0x80
 800537a:	193a      	adds	r2, r7, r4
 800537c:	6013      	str	r3, [r2, #0]
 800537e:	2301      	movs	r3, #1
 8005380:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005384:	f383 8810 	msr	PRIMASK, r3
}
 8005388:	46c0      	nop			; (mov r8, r8)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2110      	movs	r1, #16
 8005396:	438a      	bics	r2, r1
 8005398:	601a      	str	r2, [r3, #0]
 800539a:	193b      	adds	r3, r7, r4
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a2:	f383 8810 	msr	PRIMASK, r3
}
 80053a6:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2202      	movs	r2, #2
 80053ac:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053ae:	183b      	adds	r3, r7, r0
 80053b0:	881a      	ldrh	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	0011      	movs	r1, r2
 80053b6:	0018      	movs	r0, r3
 80053b8:	f000 f860 	bl	800547c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80053bc:	e044      	b.n	8005448 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80053be:	23a4      	movs	r3, #164	; 0xa4
 80053c0:	18fb      	adds	r3, r7, r3
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	2380      	movs	r3, #128	; 0x80
 80053c6:	035b      	lsls	r3, r3, #13
 80053c8:	4013      	ands	r3, r2
 80053ca:	d010      	beq.n	80053ee <HAL_UART_IRQHandler+0x552>
 80053cc:	239c      	movs	r3, #156	; 0x9c
 80053ce:	18fb      	adds	r3, r7, r3
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	2380      	movs	r3, #128	; 0x80
 80053d4:	03db      	lsls	r3, r3, #15
 80053d6:	4013      	ands	r3, r2
 80053d8:	d009      	beq.n	80053ee <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2280      	movs	r2, #128	; 0x80
 80053e0:	0352      	lsls	r2, r2, #13
 80053e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	0018      	movs	r0, r3
 80053e8:	f000 fe88 	bl	80060fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053ec:	e02f      	b.n	800544e <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80053ee:	23a4      	movs	r3, #164	; 0xa4
 80053f0:	18fb      	adds	r3, r7, r3
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2280      	movs	r2, #128	; 0x80
 80053f6:	4013      	ands	r3, r2
 80053f8:	d00f      	beq.n	800541a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80053fa:	23a0      	movs	r3, #160	; 0xa0
 80053fc:	18fb      	adds	r3, r7, r3
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2280      	movs	r2, #128	; 0x80
 8005402:	4013      	ands	r3, r2
 8005404:	d009      	beq.n	800541a <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800540a:	2b00      	cmp	r3, #0
 800540c:	d01e      	beq.n	800544c <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	0010      	movs	r0, r2
 8005416:	4798      	blx	r3
    }
    return;
 8005418:	e018      	b.n	800544c <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800541a:	23a4      	movs	r3, #164	; 0xa4
 800541c:	18fb      	adds	r3, r7, r3
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2240      	movs	r2, #64	; 0x40
 8005422:	4013      	ands	r3, r2
 8005424:	d013      	beq.n	800544e <HAL_UART_IRQHandler+0x5b2>
 8005426:	23a0      	movs	r3, #160	; 0xa0
 8005428:	18fb      	adds	r3, r7, r3
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2240      	movs	r2, #64	; 0x40
 800542e:	4013      	ands	r3, r2
 8005430:	d00d      	beq.n	800544e <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	0018      	movs	r0, r3
 8005436:	f000 fc7e 	bl	8005d36 <UART_EndTransmit_IT>
    return;
 800543a:	e008      	b.n	800544e <HAL_UART_IRQHandler+0x5b2>
      return;
 800543c:	46c0      	nop			; (mov r8, r8)
 800543e:	e006      	b.n	800544e <HAL_UART_IRQHandler+0x5b2>
    return;
 8005440:	46c0      	nop			; (mov r8, r8)
 8005442:	e004      	b.n	800544e <HAL_UART_IRQHandler+0x5b2>
      return;
 8005444:	46c0      	nop			; (mov r8, r8)
 8005446:	e002      	b.n	800544e <HAL_UART_IRQHandler+0x5b2>
      return;
 8005448:	46c0      	nop			; (mov r8, r8)
 800544a:	e000      	b.n	800544e <HAL_UART_IRQHandler+0x5b2>
    return;
 800544c:	46c0      	nop			; (mov r8, r8)
  }

}
 800544e:	46bd      	mov	sp, r7
 8005450:	b02b      	add	sp, #172	; 0xac
 8005452:	bd90      	pop	{r4, r7, pc}
 8005454:	fffffeff 	.word	0xfffffeff
 8005458:	fffffedf 	.word	0xfffffedf

0800545c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005464:	46c0      	nop			; (mov r8, r8)
 8005466:	46bd      	mov	sp, r7
 8005468:	b002      	add	sp, #8
 800546a:	bd80      	pop	{r7, pc}

0800546c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005474:	46c0      	nop			; (mov r8, r8)
 8005476:	46bd      	mov	sp, r7
 8005478:	b002      	add	sp, #8
 800547a:	bd80      	pop	{r7, pc}

0800547c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	000a      	movs	r2, r1
 8005486:	1cbb      	adds	r3, r7, #2
 8005488:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800548a:	46c0      	nop			; (mov r8, r8)
 800548c:	46bd      	mov	sp, r7
 800548e:	b002      	add	sp, #8
 8005490:	bd80      	pop	{r7, pc}
	...

08005494 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b088      	sub	sp, #32
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800549c:	231e      	movs	r3, #30
 800549e:	18fb      	adds	r3, r7, r3
 80054a0:	2200      	movs	r2, #0
 80054a2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689a      	ldr	r2, [r3, #8]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	431a      	orrs	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	431a      	orrs	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	69db      	ldr	r3, [r3, #28]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a8d      	ldr	r2, [pc, #564]	; (80056f8 <UART_SetConfig+0x264>)
 80054c4:	4013      	ands	r3, r2
 80054c6:	0019      	movs	r1, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	4a88      	ldr	r2, [pc, #544]	; (80056fc <UART_SetConfig+0x268>)
 80054da:	4013      	ands	r3, r2
 80054dc:	0019      	movs	r1, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68da      	ldr	r2, [r3, #12]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	697a      	ldr	r2, [r7, #20]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	4a7f      	ldr	r2, [pc, #508]	; (8005700 <UART_SetConfig+0x26c>)
 8005502:	4013      	ands	r3, r2
 8005504:	0019      	movs	r1, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	430a      	orrs	r2, r1
 800550e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a7b      	ldr	r2, [pc, #492]	; (8005704 <UART_SetConfig+0x270>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d127      	bne.n	800556a <UART_SetConfig+0xd6>
 800551a:	4b7b      	ldr	r3, [pc, #492]	; (8005708 <UART_SetConfig+0x274>)
 800551c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551e:	2203      	movs	r2, #3
 8005520:	4013      	ands	r3, r2
 8005522:	2b03      	cmp	r3, #3
 8005524:	d00d      	beq.n	8005542 <UART_SetConfig+0xae>
 8005526:	d81b      	bhi.n	8005560 <UART_SetConfig+0xcc>
 8005528:	2b02      	cmp	r3, #2
 800552a:	d014      	beq.n	8005556 <UART_SetConfig+0xc2>
 800552c:	d818      	bhi.n	8005560 <UART_SetConfig+0xcc>
 800552e:	2b00      	cmp	r3, #0
 8005530:	d002      	beq.n	8005538 <UART_SetConfig+0xa4>
 8005532:	2b01      	cmp	r3, #1
 8005534:	d00a      	beq.n	800554c <UART_SetConfig+0xb8>
 8005536:	e013      	b.n	8005560 <UART_SetConfig+0xcc>
 8005538:	231f      	movs	r3, #31
 800553a:	18fb      	adds	r3, r7, r3
 800553c:	2200      	movs	r2, #0
 800553e:	701a      	strb	r2, [r3, #0]
 8005540:	e021      	b.n	8005586 <UART_SetConfig+0xf2>
 8005542:	231f      	movs	r3, #31
 8005544:	18fb      	adds	r3, r7, r3
 8005546:	2202      	movs	r2, #2
 8005548:	701a      	strb	r2, [r3, #0]
 800554a:	e01c      	b.n	8005586 <UART_SetConfig+0xf2>
 800554c:	231f      	movs	r3, #31
 800554e:	18fb      	adds	r3, r7, r3
 8005550:	2204      	movs	r2, #4
 8005552:	701a      	strb	r2, [r3, #0]
 8005554:	e017      	b.n	8005586 <UART_SetConfig+0xf2>
 8005556:	231f      	movs	r3, #31
 8005558:	18fb      	adds	r3, r7, r3
 800555a:	2208      	movs	r2, #8
 800555c:	701a      	strb	r2, [r3, #0]
 800555e:	e012      	b.n	8005586 <UART_SetConfig+0xf2>
 8005560:	231f      	movs	r3, #31
 8005562:	18fb      	adds	r3, r7, r3
 8005564:	2210      	movs	r2, #16
 8005566:	701a      	strb	r2, [r3, #0]
 8005568:	e00d      	b.n	8005586 <UART_SetConfig+0xf2>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a67      	ldr	r2, [pc, #412]	; (800570c <UART_SetConfig+0x278>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d104      	bne.n	800557e <UART_SetConfig+0xea>
 8005574:	231f      	movs	r3, #31
 8005576:	18fb      	adds	r3, r7, r3
 8005578:	2200      	movs	r2, #0
 800557a:	701a      	strb	r2, [r3, #0]
 800557c:	e003      	b.n	8005586 <UART_SetConfig+0xf2>
 800557e:	231f      	movs	r3, #31
 8005580:	18fb      	adds	r3, r7, r3
 8005582:	2210      	movs	r2, #16
 8005584:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	69da      	ldr	r2, [r3, #28]
 800558a:	2380      	movs	r3, #128	; 0x80
 800558c:	021b      	lsls	r3, r3, #8
 800558e:	429a      	cmp	r2, r3
 8005590:	d15c      	bne.n	800564c <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8005592:	231f      	movs	r3, #31
 8005594:	18fb      	adds	r3, r7, r3
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	2b08      	cmp	r3, #8
 800559a:	d015      	beq.n	80055c8 <UART_SetConfig+0x134>
 800559c:	dc18      	bgt.n	80055d0 <UART_SetConfig+0x13c>
 800559e:	2b04      	cmp	r3, #4
 80055a0:	d00d      	beq.n	80055be <UART_SetConfig+0x12a>
 80055a2:	dc15      	bgt.n	80055d0 <UART_SetConfig+0x13c>
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d002      	beq.n	80055ae <UART_SetConfig+0x11a>
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d005      	beq.n	80055b8 <UART_SetConfig+0x124>
 80055ac:	e010      	b.n	80055d0 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055ae:	f7fe ffb5 	bl	800451c <HAL_RCC_GetPCLK1Freq>
 80055b2:	0003      	movs	r3, r0
 80055b4:	61bb      	str	r3, [r7, #24]
        break;
 80055b6:	e012      	b.n	80055de <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055b8:	4b55      	ldr	r3, [pc, #340]	; (8005710 <UART_SetConfig+0x27c>)
 80055ba:	61bb      	str	r3, [r7, #24]
        break;
 80055bc:	e00f      	b.n	80055de <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055be:	f7fe ff31 	bl	8004424 <HAL_RCC_GetSysClockFreq>
 80055c2:	0003      	movs	r3, r0
 80055c4:	61bb      	str	r3, [r7, #24]
        break;
 80055c6:	e00a      	b.n	80055de <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055c8:	2380      	movs	r3, #128	; 0x80
 80055ca:	021b      	lsls	r3, r3, #8
 80055cc:	61bb      	str	r3, [r7, #24]
        break;
 80055ce:	e006      	b.n	80055de <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80055d0:	2300      	movs	r3, #0
 80055d2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80055d4:	231e      	movs	r3, #30
 80055d6:	18fb      	adds	r3, r7, r3
 80055d8:	2201      	movs	r2, #1
 80055da:	701a      	strb	r2, [r3, #0]
        break;
 80055dc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d100      	bne.n	80055e6 <UART_SetConfig+0x152>
 80055e4:	e07a      	b.n	80056dc <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	005a      	lsls	r2, r3, #1
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	085b      	lsrs	r3, r3, #1
 80055f0:	18d2      	adds	r2, r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	0019      	movs	r1, r3
 80055f8:	0010      	movs	r0, r2
 80055fa:	f7fa fd8f 	bl	800011c <__udivsi3>
 80055fe:	0003      	movs	r3, r0
 8005600:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	2b0f      	cmp	r3, #15
 8005606:	d91c      	bls.n	8005642 <UART_SetConfig+0x1ae>
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	2380      	movs	r3, #128	; 0x80
 800560c:	025b      	lsls	r3, r3, #9
 800560e:	429a      	cmp	r2, r3
 8005610:	d217      	bcs.n	8005642 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	b29a      	uxth	r2, r3
 8005616:	200e      	movs	r0, #14
 8005618:	183b      	adds	r3, r7, r0
 800561a:	210f      	movs	r1, #15
 800561c:	438a      	bics	r2, r1
 800561e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	085b      	lsrs	r3, r3, #1
 8005624:	b29b      	uxth	r3, r3
 8005626:	2207      	movs	r2, #7
 8005628:	4013      	ands	r3, r2
 800562a:	b299      	uxth	r1, r3
 800562c:	183b      	adds	r3, r7, r0
 800562e:	183a      	adds	r2, r7, r0
 8005630:	8812      	ldrh	r2, [r2, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	183a      	adds	r2, r7, r0
 800563c:	8812      	ldrh	r2, [r2, #0]
 800563e:	60da      	str	r2, [r3, #12]
 8005640:	e04c      	b.n	80056dc <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8005642:	231e      	movs	r3, #30
 8005644:	18fb      	adds	r3, r7, r3
 8005646:	2201      	movs	r2, #1
 8005648:	701a      	strb	r2, [r3, #0]
 800564a:	e047      	b.n	80056dc <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 800564c:	231f      	movs	r3, #31
 800564e:	18fb      	adds	r3, r7, r3
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	2b08      	cmp	r3, #8
 8005654:	d015      	beq.n	8005682 <UART_SetConfig+0x1ee>
 8005656:	dc18      	bgt.n	800568a <UART_SetConfig+0x1f6>
 8005658:	2b04      	cmp	r3, #4
 800565a:	d00d      	beq.n	8005678 <UART_SetConfig+0x1e4>
 800565c:	dc15      	bgt.n	800568a <UART_SetConfig+0x1f6>
 800565e:	2b00      	cmp	r3, #0
 8005660:	d002      	beq.n	8005668 <UART_SetConfig+0x1d4>
 8005662:	2b02      	cmp	r3, #2
 8005664:	d005      	beq.n	8005672 <UART_SetConfig+0x1de>
 8005666:	e010      	b.n	800568a <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005668:	f7fe ff58 	bl	800451c <HAL_RCC_GetPCLK1Freq>
 800566c:	0003      	movs	r3, r0
 800566e:	61bb      	str	r3, [r7, #24]
        break;
 8005670:	e012      	b.n	8005698 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005672:	4b27      	ldr	r3, [pc, #156]	; (8005710 <UART_SetConfig+0x27c>)
 8005674:	61bb      	str	r3, [r7, #24]
        break;
 8005676:	e00f      	b.n	8005698 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005678:	f7fe fed4 	bl	8004424 <HAL_RCC_GetSysClockFreq>
 800567c:	0003      	movs	r3, r0
 800567e:	61bb      	str	r3, [r7, #24]
        break;
 8005680:	e00a      	b.n	8005698 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005682:	2380      	movs	r3, #128	; 0x80
 8005684:	021b      	lsls	r3, r3, #8
 8005686:	61bb      	str	r3, [r7, #24]
        break;
 8005688:	e006      	b.n	8005698 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800568a:	2300      	movs	r3, #0
 800568c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800568e:	231e      	movs	r3, #30
 8005690:	18fb      	adds	r3, r7, r3
 8005692:	2201      	movs	r2, #1
 8005694:	701a      	strb	r2, [r3, #0]
        break;
 8005696:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d01e      	beq.n	80056dc <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	085a      	lsrs	r2, r3, #1
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	18d2      	adds	r2, r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	0019      	movs	r1, r3
 80056ae:	0010      	movs	r0, r2
 80056b0:	f7fa fd34 	bl	800011c <__udivsi3>
 80056b4:	0003      	movs	r3, r0
 80056b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	2b0f      	cmp	r3, #15
 80056bc:	d90a      	bls.n	80056d4 <UART_SetConfig+0x240>
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	2380      	movs	r3, #128	; 0x80
 80056c2:	025b      	lsls	r3, r3, #9
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d205      	bcs.n	80056d4 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	60da      	str	r2, [r3, #12]
 80056d2:	e003      	b.n	80056dc <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80056d4:	231e      	movs	r3, #30
 80056d6:	18fb      	adds	r3, r7, r3
 80056d8:	2201      	movs	r2, #1
 80056da:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80056e8:	231e      	movs	r3, #30
 80056ea:	18fb      	adds	r3, r7, r3
 80056ec:	781b      	ldrb	r3, [r3, #0]
}
 80056ee:	0018      	movs	r0, r3
 80056f0:	46bd      	mov	sp, r7
 80056f2:	b008      	add	sp, #32
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	46c0      	nop			; (mov r8, r8)
 80056f8:	efff69f3 	.word	0xefff69f3
 80056fc:	ffffcfff 	.word	0xffffcfff
 8005700:	fffff4ff 	.word	0xfffff4ff
 8005704:	40013800 	.word	0x40013800
 8005708:	40021000 	.word	0x40021000
 800570c:	40004400 	.word	0x40004400
 8005710:	007a1200 	.word	0x007a1200

08005714 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005720:	2208      	movs	r2, #8
 8005722:	4013      	ands	r3, r2
 8005724:	d00b      	beq.n	800573e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	4a4a      	ldr	r2, [pc, #296]	; (8005858 <UART_AdvFeatureConfig+0x144>)
 800572e:	4013      	ands	r3, r2
 8005730:	0019      	movs	r1, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005742:	2201      	movs	r2, #1
 8005744:	4013      	ands	r3, r2
 8005746:	d00b      	beq.n	8005760 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	4a43      	ldr	r2, [pc, #268]	; (800585c <UART_AdvFeatureConfig+0x148>)
 8005750:	4013      	ands	r3, r2
 8005752:	0019      	movs	r1, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	430a      	orrs	r2, r1
 800575e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	2202      	movs	r2, #2
 8005766:	4013      	ands	r3, r2
 8005768:	d00b      	beq.n	8005782 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	4a3b      	ldr	r2, [pc, #236]	; (8005860 <UART_AdvFeatureConfig+0x14c>)
 8005772:	4013      	ands	r3, r2
 8005774:	0019      	movs	r1, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	430a      	orrs	r2, r1
 8005780:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005786:	2204      	movs	r2, #4
 8005788:	4013      	ands	r3, r2
 800578a:	d00b      	beq.n	80057a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	4a34      	ldr	r2, [pc, #208]	; (8005864 <UART_AdvFeatureConfig+0x150>)
 8005794:	4013      	ands	r3, r2
 8005796:	0019      	movs	r1, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	430a      	orrs	r2, r1
 80057a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	2210      	movs	r2, #16
 80057aa:	4013      	ands	r3, r2
 80057ac:	d00b      	beq.n	80057c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	4a2c      	ldr	r2, [pc, #176]	; (8005868 <UART_AdvFeatureConfig+0x154>)
 80057b6:	4013      	ands	r3, r2
 80057b8:	0019      	movs	r1, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ca:	2220      	movs	r2, #32
 80057cc:	4013      	ands	r3, r2
 80057ce:	d00b      	beq.n	80057e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	4a25      	ldr	r2, [pc, #148]	; (800586c <UART_AdvFeatureConfig+0x158>)
 80057d8:	4013      	ands	r3, r2
 80057da:	0019      	movs	r1, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ec:	2240      	movs	r2, #64	; 0x40
 80057ee:	4013      	ands	r3, r2
 80057f0:	d01d      	beq.n	800582e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	4a1d      	ldr	r2, [pc, #116]	; (8005870 <UART_AdvFeatureConfig+0x15c>)
 80057fa:	4013      	ands	r3, r2
 80057fc:	0019      	movs	r1, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	430a      	orrs	r2, r1
 8005808:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800580e:	2380      	movs	r3, #128	; 0x80
 8005810:	035b      	lsls	r3, r3, #13
 8005812:	429a      	cmp	r2, r3
 8005814:	d10b      	bne.n	800582e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	4a15      	ldr	r2, [pc, #84]	; (8005874 <UART_AdvFeatureConfig+0x160>)
 800581e:	4013      	ands	r3, r2
 8005820:	0019      	movs	r1, r3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	430a      	orrs	r2, r1
 800582c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005832:	2280      	movs	r2, #128	; 0x80
 8005834:	4013      	ands	r3, r2
 8005836:	d00b      	beq.n	8005850 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	4a0e      	ldr	r2, [pc, #56]	; (8005878 <UART_AdvFeatureConfig+0x164>)
 8005840:	4013      	ands	r3, r2
 8005842:	0019      	movs	r1, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	430a      	orrs	r2, r1
 800584e:	605a      	str	r2, [r3, #4]
  }
}
 8005850:	46c0      	nop			; (mov r8, r8)
 8005852:	46bd      	mov	sp, r7
 8005854:	b002      	add	sp, #8
 8005856:	bd80      	pop	{r7, pc}
 8005858:	ffff7fff 	.word	0xffff7fff
 800585c:	fffdffff 	.word	0xfffdffff
 8005860:	fffeffff 	.word	0xfffeffff
 8005864:	fffbffff 	.word	0xfffbffff
 8005868:	ffffefff 	.word	0xffffefff
 800586c:	ffffdfff 	.word	0xffffdfff
 8005870:	ffefffff 	.word	0xffefffff
 8005874:	ff9fffff 	.word	0xff9fffff
 8005878:	fff7ffff 	.word	0xfff7ffff

0800587c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b092      	sub	sp, #72	; 0x48
 8005880:	af02      	add	r7, sp, #8
 8005882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2284      	movs	r2, #132	; 0x84
 8005888:	2100      	movs	r1, #0
 800588a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800588c:	f7fd f868 	bl	8002960 <HAL_GetTick>
 8005890:	0003      	movs	r3, r0
 8005892:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2208      	movs	r2, #8
 800589c:	4013      	ands	r3, r2
 800589e:	2b08      	cmp	r3, #8
 80058a0:	d12c      	bne.n	80058fc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058a4:	2280      	movs	r2, #128	; 0x80
 80058a6:	0391      	lsls	r1, r2, #14
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	4a46      	ldr	r2, [pc, #280]	; (80059c4 <UART_CheckIdleState+0x148>)
 80058ac:	9200      	str	r2, [sp, #0]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f000 f88c 	bl	80059cc <UART_WaitOnFlagUntilTimeout>
 80058b4:	1e03      	subs	r3, r0, #0
 80058b6:	d021      	beq.n	80058fc <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058b8:	f3ef 8310 	mrs	r3, PRIMASK
 80058bc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80058c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80058c2:	2301      	movs	r3, #1
 80058c4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c8:	f383 8810 	msr	PRIMASK, r3
}
 80058cc:	46c0      	nop			; (mov r8, r8)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2180      	movs	r1, #128	; 0x80
 80058da:	438a      	bics	r2, r1
 80058dc:	601a      	str	r2, [r3, #0]
 80058de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e4:	f383 8810 	msr	PRIMASK, r3
}
 80058e8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2220      	movs	r2, #32
 80058ee:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2278      	movs	r2, #120	; 0x78
 80058f4:	2100      	movs	r1, #0
 80058f6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e05f      	b.n	80059bc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2204      	movs	r2, #4
 8005904:	4013      	ands	r3, r2
 8005906:	2b04      	cmp	r3, #4
 8005908:	d146      	bne.n	8005998 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800590a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800590c:	2280      	movs	r2, #128	; 0x80
 800590e:	03d1      	lsls	r1, r2, #15
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	4a2c      	ldr	r2, [pc, #176]	; (80059c4 <UART_CheckIdleState+0x148>)
 8005914:	9200      	str	r2, [sp, #0]
 8005916:	2200      	movs	r2, #0
 8005918:	f000 f858 	bl	80059cc <UART_WaitOnFlagUntilTimeout>
 800591c:	1e03      	subs	r3, r0, #0
 800591e:	d03b      	beq.n	8005998 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005920:	f3ef 8310 	mrs	r3, PRIMASK
 8005924:	60fb      	str	r3, [r7, #12]
  return(result);
 8005926:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005928:	637b      	str	r3, [r7, #52]	; 0x34
 800592a:	2301      	movs	r3, #1
 800592c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	f383 8810 	msr	PRIMASK, r3
}
 8005934:	46c0      	nop			; (mov r8, r8)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4921      	ldr	r1, [pc, #132]	; (80059c8 <UART_CheckIdleState+0x14c>)
 8005942:	400a      	ands	r2, r1
 8005944:	601a      	str	r2, [r3, #0]
 8005946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005948:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f383 8810 	msr	PRIMASK, r3
}
 8005950:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005952:	f3ef 8310 	mrs	r3, PRIMASK
 8005956:	61bb      	str	r3, [r7, #24]
  return(result);
 8005958:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800595a:	633b      	str	r3, [r7, #48]	; 0x30
 800595c:	2301      	movs	r3, #1
 800595e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	f383 8810 	msr	PRIMASK, r3
}
 8005966:	46c0      	nop			; (mov r8, r8)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689a      	ldr	r2, [r3, #8]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2101      	movs	r1, #1
 8005974:	438a      	bics	r2, r1
 8005976:	609a      	str	r2, [r3, #8]
 8005978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800597c:	6a3b      	ldr	r3, [r7, #32]
 800597e:	f383 8810 	msr	PRIMASK, r3
}
 8005982:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2280      	movs	r2, #128	; 0x80
 8005988:	2120      	movs	r1, #32
 800598a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2278      	movs	r2, #120	; 0x78
 8005990:	2100      	movs	r1, #0
 8005992:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e011      	b.n	80059bc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2220      	movs	r2, #32
 800599c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2280      	movs	r2, #128	; 0x80
 80059a2:	2120      	movs	r1, #32
 80059a4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2278      	movs	r2, #120	; 0x78
 80059b6:	2100      	movs	r1, #0
 80059b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	0018      	movs	r0, r3
 80059be:	46bd      	mov	sp, r7
 80059c0:	b010      	add	sp, #64	; 0x40
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	01ffffff 	.word	0x01ffffff
 80059c8:	fffffedf 	.word	0xfffffedf

080059cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	603b      	str	r3, [r7, #0]
 80059d8:	1dfb      	adds	r3, r7, #7
 80059da:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059dc:	e051      	b.n	8005a82 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	3301      	adds	r3, #1
 80059e2:	d04e      	beq.n	8005a82 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059e4:	f7fc ffbc 	bl	8002960 <HAL_GetTick>
 80059e8:	0002      	movs	r2, r0
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d302      	bcc.n	80059fa <UART_WaitOnFlagUntilTimeout+0x2e>
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e051      	b.n	8005aa2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2204      	movs	r2, #4
 8005a06:	4013      	ands	r3, r2
 8005a08:	d03b      	beq.n	8005a82 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	2b80      	cmp	r3, #128	; 0x80
 8005a0e:	d038      	beq.n	8005a82 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	2b40      	cmp	r3, #64	; 0x40
 8005a14:	d035      	beq.n	8005a82 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	69db      	ldr	r3, [r3, #28]
 8005a1c:	2208      	movs	r2, #8
 8005a1e:	4013      	ands	r3, r2
 8005a20:	2b08      	cmp	r3, #8
 8005a22:	d111      	bne.n	8005a48 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2208      	movs	r2, #8
 8005a2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	0018      	movs	r0, r3
 8005a30:	f000 f906 	bl	8005c40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2284      	movs	r2, #132	; 0x84
 8005a38:	2108      	movs	r1, #8
 8005a3a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2278      	movs	r2, #120	; 0x78
 8005a40:	2100      	movs	r1, #0
 8005a42:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e02c      	b.n	8005aa2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	69da      	ldr	r2, [r3, #28]
 8005a4e:	2380      	movs	r3, #128	; 0x80
 8005a50:	011b      	lsls	r3, r3, #4
 8005a52:	401a      	ands	r2, r3
 8005a54:	2380      	movs	r3, #128	; 0x80
 8005a56:	011b      	lsls	r3, r3, #4
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d112      	bne.n	8005a82 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2280      	movs	r2, #128	; 0x80
 8005a62:	0112      	lsls	r2, r2, #4
 8005a64:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	0018      	movs	r0, r3
 8005a6a:	f000 f8e9 	bl	8005c40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2284      	movs	r2, #132	; 0x84
 8005a72:	2120      	movs	r1, #32
 8005a74:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2278      	movs	r2, #120	; 0x78
 8005a7a:	2100      	movs	r1, #0
 8005a7c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e00f      	b.n	8005aa2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	69db      	ldr	r3, [r3, #28]
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	425a      	negs	r2, r3
 8005a92:	4153      	adcs	r3, r2
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	001a      	movs	r2, r3
 8005a98:	1dfb      	adds	r3, r7, #7
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d09e      	beq.n	80059de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	0018      	movs	r0, r3
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	b004      	add	sp, #16
 8005aa8:	bd80      	pop	{r7, pc}
	...

08005aac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b090      	sub	sp, #64	; 0x40
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	1dbb      	adds	r3, r7, #6
 8005ab8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	1dba      	adds	r2, r7, #6
 8005ac4:	2158      	movs	r1, #88	; 0x58
 8005ac6:	8812      	ldrh	r2, [r2, #0]
 8005ac8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	1dba      	adds	r2, r7, #6
 8005ace:	215a      	movs	r1, #90	; 0x5a
 8005ad0:	8812      	ldrh	r2, [r2, #0]
 8005ad2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	689a      	ldr	r2, [r3, #8]
 8005ade:	2380      	movs	r3, #128	; 0x80
 8005ae0:	015b      	lsls	r3, r3, #5
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d10d      	bne.n	8005b02 <UART_Start_Receive_IT+0x56>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d104      	bne.n	8005af8 <UART_Start_Receive_IT+0x4c>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	225c      	movs	r2, #92	; 0x5c
 8005af2:	4950      	ldr	r1, [pc, #320]	; (8005c34 <UART_Start_Receive_IT+0x188>)
 8005af4:	5299      	strh	r1, [r3, r2]
 8005af6:	e02e      	b.n	8005b56 <UART_Start_Receive_IT+0xaa>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	225c      	movs	r2, #92	; 0x5c
 8005afc:	21ff      	movs	r1, #255	; 0xff
 8005afe:	5299      	strh	r1, [r3, r2]
 8005b00:	e029      	b.n	8005b56 <UART_Start_Receive_IT+0xaa>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d10d      	bne.n	8005b26 <UART_Start_Receive_IT+0x7a>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d104      	bne.n	8005b1c <UART_Start_Receive_IT+0x70>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	225c      	movs	r2, #92	; 0x5c
 8005b16:	21ff      	movs	r1, #255	; 0xff
 8005b18:	5299      	strh	r1, [r3, r2]
 8005b1a:	e01c      	b.n	8005b56 <UART_Start_Receive_IT+0xaa>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	225c      	movs	r2, #92	; 0x5c
 8005b20:	217f      	movs	r1, #127	; 0x7f
 8005b22:	5299      	strh	r1, [r3, r2]
 8005b24:	e017      	b.n	8005b56 <UART_Start_Receive_IT+0xaa>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	689a      	ldr	r2, [r3, #8]
 8005b2a:	2380      	movs	r3, #128	; 0x80
 8005b2c:	055b      	lsls	r3, r3, #21
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d10d      	bne.n	8005b4e <UART_Start_Receive_IT+0xa2>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d104      	bne.n	8005b44 <UART_Start_Receive_IT+0x98>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	225c      	movs	r2, #92	; 0x5c
 8005b3e:	217f      	movs	r1, #127	; 0x7f
 8005b40:	5299      	strh	r1, [r3, r2]
 8005b42:	e008      	b.n	8005b56 <UART_Start_Receive_IT+0xaa>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	225c      	movs	r2, #92	; 0x5c
 8005b48:	213f      	movs	r1, #63	; 0x3f
 8005b4a:	5299      	strh	r1, [r3, r2]
 8005b4c:	e003      	b.n	8005b56 <UART_Start_Receive_IT+0xaa>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	225c      	movs	r2, #92	; 0x5c
 8005b52:	2100      	movs	r1, #0
 8005b54:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2284      	movs	r2, #132	; 0x84
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2280      	movs	r2, #128	; 0x80
 8005b62:	2122      	movs	r1, #34	; 0x22
 8005b64:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b66:	f3ef 8310 	mrs	r3, PRIMASK
 8005b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b70:	2301      	movs	r3, #1
 8005b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b76:	f383 8810 	msr	PRIMASK, r3
}
 8005b7a:	46c0      	nop			; (mov r8, r8)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689a      	ldr	r2, [r3, #8]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2101      	movs	r1, #1
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	609a      	str	r2, [r3, #8]
 8005b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b8e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b92:	f383 8810 	msr	PRIMASK, r3
}
 8005b96:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	689a      	ldr	r2, [r3, #8]
 8005b9c:	2380      	movs	r3, #128	; 0x80
 8005b9e:	015b      	lsls	r3, r3, #5
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d107      	bne.n	8005bb4 <UART_Start_Receive_IT+0x108>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d103      	bne.n	8005bb4 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	4a22      	ldr	r2, [pc, #136]	; (8005c38 <UART_Start_Receive_IT+0x18c>)
 8005bb0:	669a      	str	r2, [r3, #104]	; 0x68
 8005bb2:	e002      	b.n	8005bba <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	4a21      	ldr	r2, [pc, #132]	; (8005c3c <UART_Start_Receive_IT+0x190>)
 8005bb8:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d019      	beq.n	8005bf6 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bc2:	f3ef 8310 	mrs	r3, PRIMASK
 8005bc6:	61fb      	str	r3, [r7, #28]
  return(result);
 8005bc8:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005bca:	637b      	str	r3, [r7, #52]	; 0x34
 8005bcc:	2301      	movs	r3, #1
 8005bce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	f383 8810 	msr	PRIMASK, r3
}
 8005bd6:	46c0      	nop			; (mov r8, r8)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2190      	movs	r1, #144	; 0x90
 8005be4:	0049      	lsls	r1, r1, #1
 8005be6:	430a      	orrs	r2, r1
 8005be8:	601a      	str	r2, [r3, #0]
 8005bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bec:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf0:	f383 8810 	msr	PRIMASK, r3
}
 8005bf4:	e018      	b.n	8005c28 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bf6:	f3ef 8310 	mrs	r3, PRIMASK
 8005bfa:	613b      	str	r3, [r7, #16]
  return(result);
 8005bfc:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005bfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c00:	2301      	movs	r3, #1
 8005c02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	f383 8810 	msr	PRIMASK, r3
}
 8005c0a:	46c0      	nop			; (mov r8, r8)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2120      	movs	r1, #32
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	601a      	str	r2, [r3, #0]
 8005c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	f383 8810 	msr	PRIMASK, r3
}
 8005c26:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	0018      	movs	r0, r3
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	b010      	add	sp, #64	; 0x40
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	46c0      	nop			; (mov r8, r8)
 8005c34:	000001ff 	.word	0x000001ff
 8005c38:	08005f45 	.word	0x08005f45
 8005c3c:	08005d8d 	.word	0x08005d8d

08005c40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b08e      	sub	sp, #56	; 0x38
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c48:	f3ef 8310 	mrs	r3, PRIMASK
 8005c4c:	617b      	str	r3, [r7, #20]
  return(result);
 8005c4e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c50:	637b      	str	r3, [r7, #52]	; 0x34
 8005c52:	2301      	movs	r3, #1
 8005c54:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	f383 8810 	msr	PRIMASK, r3
}
 8005c5c:	46c0      	nop			; (mov r8, r8)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4926      	ldr	r1, [pc, #152]	; (8005d04 <UART_EndRxTransfer+0xc4>)
 8005c6a:	400a      	ands	r2, r1
 8005c6c:	601a      	str	r2, [r3, #0]
 8005c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	f383 8810 	msr	PRIMASK, r3
}
 8005c78:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c7a:	f3ef 8310 	mrs	r3, PRIMASK
 8005c7e:	623b      	str	r3, [r7, #32]
  return(result);
 8005c80:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c82:	633b      	str	r3, [r7, #48]	; 0x30
 8005c84:	2301      	movs	r3, #1
 8005c86:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8a:	f383 8810 	msr	PRIMASK, r3
}
 8005c8e:	46c0      	nop			; (mov r8, r8)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689a      	ldr	r2, [r3, #8]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2101      	movs	r1, #1
 8005c9c:	438a      	bics	r2, r1
 8005c9e:	609a      	str	r2, [r3, #8]
 8005ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca6:	f383 8810 	msr	PRIMASK, r3
}
 8005caa:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d118      	bne.n	8005ce6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cb4:	f3ef 8310 	mrs	r3, PRIMASK
 8005cb8:	60bb      	str	r3, [r7, #8]
  return(result);
 8005cba:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f383 8810 	msr	PRIMASK, r3
}
 8005cc8:	46c0      	nop			; (mov r8, r8)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2110      	movs	r1, #16
 8005cd6:	438a      	bics	r2, r1
 8005cd8:	601a      	str	r2, [r3, #0]
 8005cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cdc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	f383 8810 	msr	PRIMASK, r3
}
 8005ce4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2280      	movs	r2, #128	; 0x80
 8005cea:	2120      	movs	r1, #32
 8005cec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005cfa:	46c0      	nop			; (mov r8, r8)
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	b00e      	add	sp, #56	; 0x38
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	46c0      	nop			; (mov r8, r8)
 8005d04:	fffffedf 	.word	0xfffffedf

08005d08 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	225a      	movs	r2, #90	; 0x5a
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2252      	movs	r2, #82	; 0x52
 8005d22:	2100      	movs	r1, #0
 8005d24:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	0018      	movs	r0, r3
 8005d2a:	f7ff fb9f 	bl	800546c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d2e:	46c0      	nop			; (mov r8, r8)
 8005d30:	46bd      	mov	sp, r7
 8005d32:	b004      	add	sp, #16
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b086      	sub	sp, #24
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d3e:	f3ef 8310 	mrs	r3, PRIMASK
 8005d42:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d44:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d46:	617b      	str	r3, [r7, #20]
 8005d48:	2301      	movs	r3, #1
 8005d4a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f383 8810 	msr	PRIMASK, r3
}
 8005d52:	46c0      	nop			; (mov r8, r8)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2140      	movs	r1, #64	; 0x40
 8005d60:	438a      	bics	r2, r1
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	f383 8810 	msr	PRIMASK, r3
}
 8005d6e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2220      	movs	r2, #32
 8005d74:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	0018      	movs	r0, r3
 8005d80:	f7ff fb6c 	bl	800545c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d84:	46c0      	nop			; (mov r8, r8)
 8005d86:	46bd      	mov	sp, r7
 8005d88:	b006      	add	sp, #24
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b094      	sub	sp, #80	; 0x50
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005d94:	204e      	movs	r0, #78	; 0x4e
 8005d96:	183b      	adds	r3, r7, r0
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	215c      	movs	r1, #92	; 0x5c
 8005d9c:	5a52      	ldrh	r2, [r2, r1]
 8005d9e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2280      	movs	r2, #128	; 0x80
 8005da4:	589b      	ldr	r3, [r3, r2]
 8005da6:	2b22      	cmp	r3, #34	; 0x22
 8005da8:	d000      	beq.n	8005dac <UART_RxISR_8BIT+0x20>
 8005daa:	e0ba      	b.n	8005f22 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	214c      	movs	r1, #76	; 0x4c
 8005db2:	187b      	adds	r3, r7, r1
 8005db4:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8005db6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005db8:	187b      	adds	r3, r7, r1
 8005dba:	881b      	ldrh	r3, [r3, #0]
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	183b      	adds	r3, r7, r0
 8005dc0:	881b      	ldrh	r3, [r3, #0]
 8005dc2:	b2d9      	uxtb	r1, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc8:	400a      	ands	r2, r1
 8005dca:	b2d2      	uxtb	r2, r2
 8005dcc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dd2:	1c5a      	adds	r2, r3, #1
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	225a      	movs	r2, #90	; 0x5a
 8005ddc:	5a9b      	ldrh	r3, [r3, r2]
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	3b01      	subs	r3, #1
 8005de2:	b299      	uxth	r1, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	225a      	movs	r2, #90	; 0x5a
 8005de8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	225a      	movs	r2, #90	; 0x5a
 8005dee:	5a9b      	ldrh	r3, [r3, r2]
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d000      	beq.n	8005df8 <UART_RxISR_8BIT+0x6c>
 8005df6:	e09c      	b.n	8005f32 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005df8:	f3ef 8310 	mrs	r3, PRIMASK
 8005dfc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e00:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e02:	2301      	movs	r3, #1
 8005e04:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e08:	f383 8810 	msr	PRIMASK, r3
}
 8005e0c:	46c0      	nop			; (mov r8, r8)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4948      	ldr	r1, [pc, #288]	; (8005f3c <UART_RxISR_8BIT+0x1b0>)
 8005e1a:	400a      	ands	r2, r1
 8005e1c:	601a      	str	r2, [r3, #0]
 8005e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e24:	f383 8810 	msr	PRIMASK, r3
}
 8005e28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e2a:	f3ef 8310 	mrs	r3, PRIMASK
 8005e2e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e32:	647b      	str	r3, [r7, #68]	; 0x44
 8005e34:	2301      	movs	r3, #1
 8005e36:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e3a:	f383 8810 	msr	PRIMASK, r3
}
 8005e3e:	46c0      	nop			; (mov r8, r8)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	689a      	ldr	r2, [r3, #8]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2101      	movs	r1, #1
 8005e4c:	438a      	bics	r2, r1
 8005e4e:	609a      	str	r2, [r3, #8]
 8005e50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e52:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e56:	f383 8810 	msr	PRIMASK, r3
}
 8005e5a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2280      	movs	r2, #128	; 0x80
 8005e60:	2120      	movs	r1, #32
 8005e62:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	685a      	ldr	r2, [r3, #4]
 8005e76:	2380      	movs	r3, #128	; 0x80
 8005e78:	041b      	lsls	r3, r3, #16
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	d018      	beq.n	8005eb0 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e7e:	f3ef 8310 	mrs	r3, PRIMASK
 8005e82:	61bb      	str	r3, [r7, #24]
  return(result);
 8005e84:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e86:	643b      	str	r3, [r7, #64]	; 0x40
 8005e88:	2301      	movs	r3, #1
 8005e8a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	f383 8810 	msr	PRIMASK, r3
}
 8005e92:	46c0      	nop			; (mov r8, r8)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4928      	ldr	r1, [pc, #160]	; (8005f40 <UART_RxISR_8BIT+0x1b4>)
 8005ea0:	400a      	ands	r2, r1
 8005ea2:	601a      	str	r2, [r3, #0]
 8005ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ea6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ea8:	6a3b      	ldr	r3, [r7, #32]
 8005eaa:	f383 8810 	msr	PRIMASK, r3
}
 8005eae:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d12f      	bne.n	8005f18 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ebe:	f3ef 8310 	mrs	r3, PRIMASK
 8005ec2:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ec4:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ec8:	2301      	movs	r3, #1
 8005eca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	f383 8810 	msr	PRIMASK, r3
}
 8005ed2:	46c0      	nop			; (mov r8, r8)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2110      	movs	r1, #16
 8005ee0:	438a      	bics	r2, r1
 8005ee2:	601a      	str	r2, [r3, #0]
 8005ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ee6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f383 8810 	msr	PRIMASK, r3
}
 8005eee:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	2210      	movs	r2, #16
 8005ef8:	4013      	ands	r3, r2
 8005efa:	2b10      	cmp	r3, #16
 8005efc:	d103      	bne.n	8005f06 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2210      	movs	r2, #16
 8005f04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2258      	movs	r2, #88	; 0x58
 8005f0a:	5a9a      	ldrh	r2, [r3, r2]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	0011      	movs	r1, r2
 8005f10:	0018      	movs	r0, r3
 8005f12:	f7ff fab3 	bl	800547c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005f16:	e00c      	b.n	8005f32 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	0018      	movs	r0, r3
 8005f1c:	f7fc f8ac 	bl	8002078 <HAL_UART_RxCpltCallback>
}
 8005f20:	e007      	b.n	8005f32 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	699a      	ldr	r2, [r3, #24]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2108      	movs	r1, #8
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	619a      	str	r2, [r3, #24]
}
 8005f32:	46c0      	nop			; (mov r8, r8)
 8005f34:	46bd      	mov	sp, r7
 8005f36:	b014      	add	sp, #80	; 0x50
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	46c0      	nop			; (mov r8, r8)
 8005f3c:	fffffedf 	.word	0xfffffedf
 8005f40:	fbffffff 	.word	0xfbffffff

08005f44 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b094      	sub	sp, #80	; 0x50
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005f4c:	204e      	movs	r0, #78	; 0x4e
 8005f4e:	183b      	adds	r3, r7, r0
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	215c      	movs	r1, #92	; 0x5c
 8005f54:	5a52      	ldrh	r2, [r2, r1]
 8005f56:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2280      	movs	r2, #128	; 0x80
 8005f5c:	589b      	ldr	r3, [r3, r2]
 8005f5e:	2b22      	cmp	r3, #34	; 0x22
 8005f60:	d000      	beq.n	8005f64 <UART_RxISR_16BIT+0x20>
 8005f62:	e0ba      	b.n	80060da <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	214c      	movs	r1, #76	; 0x4c
 8005f6a:	187b      	adds	r3, r7, r1
 8005f6c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8005f6e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f74:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8005f76:	187b      	adds	r3, r7, r1
 8005f78:	183a      	adds	r2, r7, r0
 8005f7a:	881b      	ldrh	r3, [r3, #0]
 8005f7c:	8812      	ldrh	r2, [r2, #0]
 8005f7e:	4013      	ands	r3, r2
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f84:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f8a:	1c9a      	adds	r2, r3, #2
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	225a      	movs	r2, #90	; 0x5a
 8005f94:	5a9b      	ldrh	r3, [r3, r2]
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	b299      	uxth	r1, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	225a      	movs	r2, #90	; 0x5a
 8005fa0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	225a      	movs	r2, #90	; 0x5a
 8005fa6:	5a9b      	ldrh	r3, [r3, r2]
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d000      	beq.n	8005fb0 <UART_RxISR_16BIT+0x6c>
 8005fae:	e09c      	b.n	80060ea <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fb0:	f3ef 8310 	mrs	r3, PRIMASK
 8005fb4:	623b      	str	r3, [r7, #32]
  return(result);
 8005fb6:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fb8:	647b      	str	r3, [r7, #68]	; 0x44
 8005fba:	2301      	movs	r3, #1
 8005fbc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	f383 8810 	msr	PRIMASK, r3
}
 8005fc4:	46c0      	nop			; (mov r8, r8)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4948      	ldr	r1, [pc, #288]	; (80060f4 <UART_RxISR_16BIT+0x1b0>)
 8005fd2:	400a      	ands	r2, r1
 8005fd4:	601a      	str	r2, [r3, #0]
 8005fd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fdc:	f383 8810 	msr	PRIMASK, r3
}
 8005fe0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fe2:	f3ef 8310 	mrs	r3, PRIMASK
 8005fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8005fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fea:	643b      	str	r3, [r7, #64]	; 0x40
 8005fec:	2301      	movs	r3, #1
 8005fee:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff2:	f383 8810 	msr	PRIMASK, r3
}
 8005ff6:	46c0      	nop			; (mov r8, r8)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	689a      	ldr	r2, [r3, #8]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2101      	movs	r1, #1
 8006004:	438a      	bics	r2, r1
 8006006:	609a      	str	r2, [r3, #8]
 8006008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800600a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800600c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800600e:	f383 8810 	msr	PRIMASK, r3
}
 8006012:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2280      	movs	r2, #128	; 0x80
 8006018:	2120      	movs	r1, #32
 800601a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	685a      	ldr	r2, [r3, #4]
 800602e:	2380      	movs	r3, #128	; 0x80
 8006030:	041b      	lsls	r3, r3, #16
 8006032:	4013      	ands	r3, r2
 8006034:	d018      	beq.n	8006068 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006036:	f3ef 8310 	mrs	r3, PRIMASK
 800603a:	617b      	str	r3, [r7, #20]
  return(result);
 800603c:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800603e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006040:	2301      	movs	r3, #1
 8006042:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	f383 8810 	msr	PRIMASK, r3
}
 800604a:	46c0      	nop			; (mov r8, r8)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4928      	ldr	r1, [pc, #160]	; (80060f8 <UART_RxISR_16BIT+0x1b4>)
 8006058:	400a      	ands	r2, r1
 800605a:	601a      	str	r2, [r3, #0]
 800605c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800605e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	f383 8810 	msr	PRIMASK, r3
}
 8006066:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800606c:	2b01      	cmp	r3, #1
 800606e:	d12f      	bne.n	80060d0 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006076:	f3ef 8310 	mrs	r3, PRIMASK
 800607a:	60bb      	str	r3, [r7, #8]
  return(result);
 800607c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800607e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006080:	2301      	movs	r3, #1
 8006082:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f383 8810 	msr	PRIMASK, r3
}
 800608a:	46c0      	nop			; (mov r8, r8)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2110      	movs	r1, #16
 8006098:	438a      	bics	r2, r1
 800609a:	601a      	str	r2, [r3, #0]
 800609c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	f383 8810 	msr	PRIMASK, r3
}
 80060a6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	69db      	ldr	r3, [r3, #28]
 80060ae:	2210      	movs	r2, #16
 80060b0:	4013      	ands	r3, r2
 80060b2:	2b10      	cmp	r3, #16
 80060b4:	d103      	bne.n	80060be <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2210      	movs	r2, #16
 80060bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2258      	movs	r2, #88	; 0x58
 80060c2:	5a9a      	ldrh	r2, [r3, r2]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	0011      	movs	r1, r2
 80060c8:	0018      	movs	r0, r3
 80060ca:	f7ff f9d7 	bl	800547c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80060ce:	e00c      	b.n	80060ea <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	0018      	movs	r0, r3
 80060d4:	f7fb ffd0 	bl	8002078 <HAL_UART_RxCpltCallback>
}
 80060d8:	e007      	b.n	80060ea <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	699a      	ldr	r2, [r3, #24]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2108      	movs	r1, #8
 80060e6:	430a      	orrs	r2, r1
 80060e8:	619a      	str	r2, [r3, #24]
}
 80060ea:	46c0      	nop			; (mov r8, r8)
 80060ec:	46bd      	mov	sp, r7
 80060ee:	b014      	add	sp, #80	; 0x50
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	46c0      	nop			; (mov r8, r8)
 80060f4:	fffffedf 	.word	0xfffffedf
 80060f8:	fbffffff 	.word	0xfbffffff

080060fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006104:	46c0      	nop			; (mov r8, r8)
 8006106:	46bd      	mov	sp, r7
 8006108:	b002      	add	sp, #8
 800610a:	bd80      	pop	{r7, pc}

0800610c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	0002      	movs	r2, r0
 8006114:	1dbb      	adds	r3, r7, #6
 8006116:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006118:	2300      	movs	r3, #0
 800611a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800611c:	1dbb      	adds	r3, r7, #6
 800611e:	2200      	movs	r2, #0
 8006120:	5e9b      	ldrsh	r3, [r3, r2]
 8006122:	2b84      	cmp	r3, #132	; 0x84
 8006124:	d006      	beq.n	8006134 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8006126:	1dbb      	adds	r3, r7, #6
 8006128:	2200      	movs	r2, #0
 800612a:	5e9a      	ldrsh	r2, [r3, r2]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	18d3      	adds	r3, r2, r3
 8006130:	3303      	adds	r3, #3
 8006132:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006134:	68fb      	ldr	r3, [r7, #12]
}
 8006136:	0018      	movs	r0, r3
 8006138:	46bd      	mov	sp, r7
 800613a:	b004      	add	sp, #16
 800613c:	bd80      	pop	{r7, pc}

0800613e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800613e:	b580      	push	{r7, lr}
 8006140:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006142:	f000 fab7 	bl	80066b4 <vTaskStartScheduler>
  
  return osOK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	0018      	movs	r0, r3
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800614e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006150:	b089      	sub	sp, #36	; 0x24
 8006152:	af04      	add	r7, sp, #16
 8006154:	6078      	str	r0, [r7, #4]
 8006156:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	695b      	ldr	r3, [r3, #20]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d020      	beq.n	80061a2 <osThreadCreate+0x54>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d01c      	beq.n	80061a2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685c      	ldr	r4, [r3, #4]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681d      	ldr	r5, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	691e      	ldr	r6, [r3, #16]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2208      	movs	r2, #8
 8006178:	5e9b      	ldrsh	r3, [r3, r2]
 800617a:	0018      	movs	r0, r3
 800617c:	f7ff ffc6 	bl	800610c <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	695a      	ldr	r2, [r3, #20]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006188:	6839      	ldr	r1, [r7, #0]
 800618a:	9302      	str	r3, [sp, #8]
 800618c:	9201      	str	r2, [sp, #4]
 800618e:	9000      	str	r0, [sp, #0]
 8006190:	000b      	movs	r3, r1
 8006192:	0032      	movs	r2, r6
 8006194:	0029      	movs	r1, r5
 8006196:	0020      	movs	r0, r4
 8006198:	f000 f8e3 	bl	8006362 <xTaskCreateStatic>
 800619c:	0003      	movs	r3, r0
 800619e:	60fb      	str	r3, [r7, #12]
 80061a0:	e01d      	b.n	80061de <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685c      	ldr	r4, [r3, #4]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80061ae:	b29e      	uxth	r6, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2208      	movs	r2, #8
 80061b4:	5e9b      	ldrsh	r3, [r3, r2]
 80061b6:	0018      	movs	r0, r3
 80061b8:	f7ff ffa8 	bl	800610c <makeFreeRtosPriority>
 80061bc:	0001      	movs	r1, r0
 80061be:	683a      	ldr	r2, [r7, #0]
 80061c0:	230c      	movs	r3, #12
 80061c2:	18fb      	adds	r3, r7, r3
 80061c4:	9301      	str	r3, [sp, #4]
 80061c6:	9100      	str	r1, [sp, #0]
 80061c8:	0013      	movs	r3, r2
 80061ca:	0032      	movs	r2, r6
 80061cc:	0029      	movs	r1, r5
 80061ce:	0020      	movs	r0, r4
 80061d0:	f000 f90a 	bl	80063e8 <xTaskCreate>
 80061d4:	0003      	movs	r3, r0
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d001      	beq.n	80061de <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 80061da:	2300      	movs	r3, #0
 80061dc:	e000      	b.n	80061e0 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80061de:	68fb      	ldr	r3, [r7, #12]
}
 80061e0:	0018      	movs	r0, r3
 80061e2:	46bd      	mov	sp, r7
 80061e4:	b005      	add	sp, #20
 80061e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080061e8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d001      	beq.n	80061fe <osDelay+0x16>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	e000      	b.n	8006200 <osDelay+0x18>
 80061fe:	2301      	movs	r3, #1
 8006200:	0018      	movs	r0, r3
 8006202:	f000 fa31 	bl	8006668 <vTaskDelay>
  
  return osOK;
 8006206:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006208:	0018      	movs	r0, r3
 800620a:	46bd      	mov	sp, r7
 800620c:	b004      	add	sp, #16
 800620e:	bd80      	pop	{r7, pc}

08006210 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	3308      	adds	r3, #8
 800621c:	001a      	movs	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2201      	movs	r2, #1
 8006226:	4252      	negs	r2, r2
 8006228:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	3308      	adds	r3, #8
 800622e:	001a      	movs	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	3308      	adds	r3, #8
 8006238:	001a      	movs	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006244:	46c0      	nop			; (mov r8, r8)
 8006246:	46bd      	mov	sp, r7
 8006248:	b002      	add	sp, #8
 800624a:	bd80      	pop	{r7, pc}

0800624c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800625a:	46c0      	nop			; (mov r8, r8)
 800625c:	46bd      	mov	sp, r7
 800625e:	b002      	add	sp, #8
 8006260:	bd80      	pop	{r7, pc}

08006262 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b084      	sub	sp, #16
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
 800626a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	689a      	ldr	r2, [r3, #8]
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	683a      	ldr	r2, [r7, #0]
 8006286:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	683a      	ldr	r2, [r7, #0]
 800628c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	1c5a      	adds	r2, r3, #1
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	601a      	str	r2, [r3, #0]
}
 800629e:	46c0      	nop			; (mov r8, r8)
 80062a0:	46bd      	mov	sp, r7
 80062a2:	b004      	add	sp, #16
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b084      	sub	sp, #16
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
 80062ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	3301      	adds	r3, #1
 80062ba:	d103      	bne.n	80062c4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	60fb      	str	r3, [r7, #12]
 80062c2:	e00c      	b.n	80062de <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	3308      	adds	r3, #8
 80062c8:	60fb      	str	r3, [r7, #12]
 80062ca:	e002      	b.n	80062d2 <vListInsert+0x2c>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	60fb      	str	r3, [r7, #12]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d2f6      	bcs.n	80062cc <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	685a      	ldr	r2, [r3, #4]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	683a      	ldr	r2, [r7, #0]
 80062ec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	683a      	ldr	r2, [r7, #0]
 80062f8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	1c5a      	adds	r2, r3, #1
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	601a      	str	r2, [r3, #0]
}
 800630a:	46c0      	nop			; (mov r8, r8)
 800630c:	46bd      	mov	sp, r7
 800630e:	b004      	add	sp, #16
 8006310:	bd80      	pop	{r7, pc}

08006312 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b084      	sub	sp, #16
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	6892      	ldr	r2, [r2, #8]
 8006328:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	6852      	ldr	r2, [r2, #4]
 8006332:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	429a      	cmp	r2, r3
 800633c:	d103      	bne.n	8006346 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	689a      	ldr	r2, [r3, #8]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	1e5a      	subs	r2, r3, #1
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
}
 800635a:	0018      	movs	r0, r3
 800635c:	46bd      	mov	sp, r7
 800635e:	b004      	add	sp, #16
 8006360:	bd80      	pop	{r7, pc}

08006362 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006362:	b590      	push	{r4, r7, lr}
 8006364:	b08d      	sub	sp, #52	; 0x34
 8006366:	af04      	add	r7, sp, #16
 8006368:	60f8      	str	r0, [r7, #12]
 800636a:	60b9      	str	r1, [r7, #8]
 800636c:	607a      	str	r2, [r7, #4]
 800636e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <xTaskCreateStatic+0x18>
 8006376:	b672      	cpsid	i
 8006378:	e7fe      	b.n	8006378 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800637a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <xTaskCreateStatic+0x22>
 8006380:	b672      	cpsid	i
 8006382:	e7fe      	b.n	8006382 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006384:	23b4      	movs	r3, #180	; 0xb4
 8006386:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	2bb4      	cmp	r3, #180	; 0xb4
 800638c:	d001      	beq.n	8006392 <xTaskCreateStatic+0x30>
 800638e:	b672      	cpsid	i
 8006390:	e7fe      	b.n	8006390 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006394:	2b00      	cmp	r3, #0
 8006396:	d020      	beq.n	80063da <xTaskCreateStatic+0x78>
 8006398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800639a:	2b00      	cmp	r3, #0
 800639c:	d01d      	beq.n	80063da <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800639e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a0:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063a6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	22b1      	movs	r2, #177	; 0xb1
 80063ac:	2102      	movs	r1, #2
 80063ae:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80063b0:	683c      	ldr	r4, [r7, #0]
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	68b9      	ldr	r1, [r7, #8]
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	2300      	movs	r3, #0
 80063ba:	9303      	str	r3, [sp, #12]
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	9302      	str	r3, [sp, #8]
 80063c0:	2318      	movs	r3, #24
 80063c2:	18fb      	adds	r3, r7, r3
 80063c4:	9301      	str	r3, [sp, #4]
 80063c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c8:	9300      	str	r3, [sp, #0]
 80063ca:	0023      	movs	r3, r4
 80063cc:	f000 f858 	bl	8006480 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	0018      	movs	r0, r3
 80063d4:	f000 f8e4 	bl	80065a0 <prvAddNewTaskToReadyList>
 80063d8:	e001      	b.n	80063de <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 80063da:	2300      	movs	r3, #0
 80063dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80063de:	69bb      	ldr	r3, [r7, #24]
	}
 80063e0:	0018      	movs	r0, r3
 80063e2:	46bd      	mov	sp, r7
 80063e4:	b009      	add	sp, #36	; 0x24
 80063e6:	bd90      	pop	{r4, r7, pc}

080063e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80063e8:	b590      	push	{r4, r7, lr}
 80063ea:	b08d      	sub	sp, #52	; 0x34
 80063ec:	af04      	add	r7, sp, #16
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	603b      	str	r3, [r7, #0]
 80063f4:	1dbb      	adds	r3, r7, #6
 80063f6:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063f8:	1dbb      	adds	r3, r7, #6
 80063fa:	881b      	ldrh	r3, [r3, #0]
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	0018      	movs	r0, r3
 8006400:	f000 fdae 	bl	8006f60 <pvPortMalloc>
 8006404:	0003      	movs	r3, r0
 8006406:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d010      	beq.n	8006430 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800640e:	20b4      	movs	r0, #180	; 0xb4
 8006410:	f000 fda6 	bl	8006f60 <pvPortMalloc>
 8006414:	0003      	movs	r3, r0
 8006416:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d003      	beq.n	8006426 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	631a      	str	r2, [r3, #48]	; 0x30
 8006424:	e006      	b.n	8006434 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	0018      	movs	r0, r3
 800642a:	f000 fe3f 	bl	80070ac <vPortFree>
 800642e:	e001      	b.n	8006434 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006430:	2300      	movs	r3, #0
 8006432:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d01a      	beq.n	8006470 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	22b1      	movs	r2, #177	; 0xb1
 800643e:	2100      	movs	r1, #0
 8006440:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006442:	1dbb      	adds	r3, r7, #6
 8006444:	881a      	ldrh	r2, [r3, #0]
 8006446:	683c      	ldr	r4, [r7, #0]
 8006448:	68b9      	ldr	r1, [r7, #8]
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	2300      	movs	r3, #0
 800644e:	9303      	str	r3, [sp, #12]
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	9302      	str	r3, [sp, #8]
 8006454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006456:	9301      	str	r3, [sp, #4]
 8006458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645a:	9300      	str	r3, [sp, #0]
 800645c:	0023      	movs	r3, r4
 800645e:	f000 f80f 	bl	8006480 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	0018      	movs	r0, r3
 8006466:	f000 f89b 	bl	80065a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800646a:	2301      	movs	r3, #1
 800646c:	61bb      	str	r3, [r7, #24]
 800646e:	e002      	b.n	8006476 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006470:	2301      	movs	r3, #1
 8006472:	425b      	negs	r3, r3
 8006474:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006476:	69bb      	ldr	r3, [r7, #24]
	}
 8006478:	0018      	movs	r0, r3
 800647a:	46bd      	mov	sp, r7
 800647c:	b009      	add	sp, #36	; 0x24
 800647e:	bd90      	pop	{r4, r7, pc}

08006480 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
 800648c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800648e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	493e      	ldr	r1, [pc, #248]	; (8006590 <prvInitialiseNewTask+0x110>)
 8006496:	468c      	mov	ip, r1
 8006498:	4463      	add	r3, ip
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	18d3      	adds	r3, r2, r3
 800649e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	2207      	movs	r2, #7
 80064a4:	4393      	bics	r3, r2
 80064a6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	2207      	movs	r2, #7
 80064ac:	4013      	ands	r3, r2
 80064ae:	d001      	beq.n	80064b4 <prvInitialiseNewTask+0x34>
 80064b0:	b672      	cpsid	i
 80064b2:	e7fe      	b.n	80064b2 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064b4:	2300      	movs	r3, #0
 80064b6:	617b      	str	r3, [r7, #20]
 80064b8:	e013      	b.n	80064e2 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064ba:	68ba      	ldr	r2, [r7, #8]
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	18d3      	adds	r3, r2, r3
 80064c0:	7818      	ldrb	r0, [r3, #0]
 80064c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064c4:	2134      	movs	r1, #52	; 0x34
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	18d3      	adds	r3, r2, r3
 80064ca:	185b      	adds	r3, r3, r1
 80064cc:	1c02      	adds	r2, r0, #0
 80064ce:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	18d3      	adds	r3, r2, r3
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d006      	beq.n	80064ea <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	3301      	adds	r3, #1
 80064e0:	617b      	str	r3, [r7, #20]
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	2b0f      	cmp	r3, #15
 80064e6:	d9e8      	bls.n	80064ba <prvInitialiseNewTask+0x3a>
 80064e8:	e000      	b.n	80064ec <prvInitialiseNewTask+0x6c>
		{
			break;
 80064ea:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80064ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ee:	2243      	movs	r2, #67	; 0x43
 80064f0:	2100      	movs	r1, #0
 80064f2:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80064f4:	6a3b      	ldr	r3, [r7, #32]
 80064f6:	2b06      	cmp	r3, #6
 80064f8:	d901      	bls.n	80064fe <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80064fa:	2306      	movs	r3, #6
 80064fc:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80064fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006500:	6a3a      	ldr	r2, [r7, #32]
 8006502:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006506:	6a3a      	ldr	r2, [r7, #32]
 8006508:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800650a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650c:	2200      	movs	r2, #0
 800650e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006512:	3304      	adds	r3, #4
 8006514:	0018      	movs	r0, r3
 8006516:	f7ff fe99 	bl	800624c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800651a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651c:	3318      	adds	r3, #24
 800651e:	0018      	movs	r0, r3
 8006520:	f7ff fe94 	bl	800624c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006526:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006528:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800652a:	6a3b      	ldr	r3, [r7, #32]
 800652c:	2207      	movs	r2, #7
 800652e:	1ad2      	subs	r2, r2, r3
 8006530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006532:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006538:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800653a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653c:	22ac      	movs	r2, #172	; 0xac
 800653e:	2100      	movs	r1, #0
 8006540:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006544:	22b0      	movs	r2, #176	; 0xb0
 8006546:	2100      	movs	r1, #0
 8006548:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800654a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654c:	334c      	adds	r3, #76	; 0x4c
 800654e:	2260      	movs	r2, #96	; 0x60
 8006550:	2100      	movs	r1, #0
 8006552:	0018      	movs	r0, r3
 8006554:	f000 fedf 	bl	8007316 <memset>
 8006558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655a:	4a0e      	ldr	r2, [pc, #56]	; (8006594 <prvInitialiseNewTask+0x114>)
 800655c:	651a      	str	r2, [r3, #80]	; 0x50
 800655e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006560:	4a0d      	ldr	r2, [pc, #52]	; (8006598 <prvInitialiseNewTask+0x118>)
 8006562:	655a      	str	r2, [r3, #84]	; 0x54
 8006564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006566:	4a0d      	ldr	r2, [pc, #52]	; (800659c <prvInitialiseNewTask+0x11c>)
 8006568:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800656a:	683a      	ldr	r2, [r7, #0]
 800656c:	68f9      	ldr	r1, [r7, #12]
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	0018      	movs	r0, r3
 8006572:	f000 fbc5 	bl	8006d00 <pxPortInitialiseStack>
 8006576:	0002      	movs	r2, r0
 8006578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800657c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657e:	2b00      	cmp	r3, #0
 8006580:	d002      	beq.n	8006588 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006584:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006586:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006588:	46c0      	nop			; (mov r8, r8)
 800658a:	46bd      	mov	sp, r7
 800658c:	b006      	add	sp, #24
 800658e:	bd80      	pop	{r7, pc}
 8006590:	3fffffff 	.word	0x3fffffff
 8006594:	08007ee0 	.word	0x08007ee0
 8006598:	08007f00 	.word	0x08007f00
 800659c:	08007ec0 	.word	0x08007ec0

080065a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80065a8:	f000 fc42 	bl	8006e30 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80065ac:	4b28      	ldr	r3, [pc, #160]	; (8006650 <prvAddNewTaskToReadyList+0xb0>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	1c5a      	adds	r2, r3, #1
 80065b2:	4b27      	ldr	r3, [pc, #156]	; (8006650 <prvAddNewTaskToReadyList+0xb0>)
 80065b4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80065b6:	4b27      	ldr	r3, [pc, #156]	; (8006654 <prvAddNewTaskToReadyList+0xb4>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d109      	bne.n	80065d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80065be:	4b25      	ldr	r3, [pc, #148]	; (8006654 <prvAddNewTaskToReadyList+0xb4>)
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80065c4:	4b22      	ldr	r3, [pc, #136]	; (8006650 <prvAddNewTaskToReadyList+0xb0>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d110      	bne.n	80065ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80065cc:	f000 fa80 	bl	8006ad0 <prvInitialiseTaskLists>
 80065d0:	e00d      	b.n	80065ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80065d2:	4b21      	ldr	r3, [pc, #132]	; (8006658 <prvAddNewTaskToReadyList+0xb8>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d109      	bne.n	80065ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80065da:	4b1e      	ldr	r3, [pc, #120]	; (8006654 <prvAddNewTaskToReadyList+0xb4>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d802      	bhi.n	80065ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80065e8:	4b1a      	ldr	r3, [pc, #104]	; (8006654 <prvAddNewTaskToReadyList+0xb4>)
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80065ee:	4b1b      	ldr	r3, [pc, #108]	; (800665c <prvAddNewTaskToReadyList+0xbc>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	1c5a      	adds	r2, r3, #1
 80065f4:	4b19      	ldr	r3, [pc, #100]	; (800665c <prvAddNewTaskToReadyList+0xbc>)
 80065f6:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065fc:	4b18      	ldr	r3, [pc, #96]	; (8006660 <prvAddNewTaskToReadyList+0xc0>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	429a      	cmp	r2, r3
 8006602:	d903      	bls.n	800660c <prvAddNewTaskToReadyList+0x6c>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006608:	4b15      	ldr	r3, [pc, #84]	; (8006660 <prvAddNewTaskToReadyList+0xc0>)
 800660a:	601a      	str	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006610:	0013      	movs	r3, r2
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	189b      	adds	r3, r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4a12      	ldr	r2, [pc, #72]	; (8006664 <prvAddNewTaskToReadyList+0xc4>)
 800661a:	189a      	adds	r2, r3, r2
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	3304      	adds	r3, #4
 8006620:	0019      	movs	r1, r3
 8006622:	0010      	movs	r0, r2
 8006624:	f7ff fe1d 	bl	8006262 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006628:	f000 fc14 	bl	8006e54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800662c:	4b0a      	ldr	r3, [pc, #40]	; (8006658 <prvAddNewTaskToReadyList+0xb8>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d008      	beq.n	8006646 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006634:	4b07      	ldr	r3, [pc, #28]	; (8006654 <prvAddNewTaskToReadyList+0xb4>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663e:	429a      	cmp	r2, r3
 8006640:	d201      	bcs.n	8006646 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006642:	f000 fbe5 	bl	8006e10 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006646:	46c0      	nop			; (mov r8, r8)
 8006648:	46bd      	mov	sp, r7
 800664a:	b002      	add	sp, #8
 800664c:	bd80      	pop	{r7, pc}
 800664e:	46c0      	nop			; (mov r8, r8)
 8006650:	200005a8 	.word	0x200005a8
 8006654:	200004a8 	.word	0x200004a8
 8006658:	200005b4 	.word	0x200005b4
 800665c:	200005c4 	.word	0x200005c4
 8006660:	200005b0 	.word	0x200005b0
 8006664:	200004ac 	.word	0x200004ac

08006668 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006670:	2300      	movs	r3, #0
 8006672:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d010      	beq.n	800669c <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800667a:	4b0d      	ldr	r3, [pc, #52]	; (80066b0 <vTaskDelay+0x48>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d001      	beq.n	8006686 <vTaskDelay+0x1e>
 8006682:	b672      	cpsid	i
 8006684:	e7fe      	b.n	8006684 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8006686:	f000 f86d 	bl	8006764 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2100      	movs	r1, #0
 800668e:	0018      	movs	r0, r3
 8006690:	f000 fae2 	bl	8006c58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006694:	f000 f872 	bl	800677c <xTaskResumeAll>
 8006698:	0003      	movs	r3, r0
 800669a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80066a2:	f000 fbb5 	bl	8006e10 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80066a6:	46c0      	nop			; (mov r8, r8)
 80066a8:	46bd      	mov	sp, r7
 80066aa:	b004      	add	sp, #16
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	46c0      	nop			; (mov r8, r8)
 80066b0:	200005d0 	.word	0x200005d0

080066b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80066b4:	b590      	push	{r4, r7, lr}
 80066b6:	b089      	sub	sp, #36	; 0x24
 80066b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80066ba:	2300      	movs	r3, #0
 80066bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80066be:	2300      	movs	r3, #0
 80066c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80066c2:	003a      	movs	r2, r7
 80066c4:	1d39      	adds	r1, r7, #4
 80066c6:	2308      	movs	r3, #8
 80066c8:	18fb      	adds	r3, r7, r3
 80066ca:	0018      	movs	r0, r3
 80066cc:	f7fb fb00 	bl	8001cd0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80066d0:	683c      	ldr	r4, [r7, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	491b      	ldr	r1, [pc, #108]	; (8006744 <vTaskStartScheduler+0x90>)
 80066d8:	481b      	ldr	r0, [pc, #108]	; (8006748 <vTaskStartScheduler+0x94>)
 80066da:	9202      	str	r2, [sp, #8]
 80066dc:	9301      	str	r3, [sp, #4]
 80066de:	2300      	movs	r3, #0
 80066e0:	9300      	str	r3, [sp, #0]
 80066e2:	2300      	movs	r3, #0
 80066e4:	0022      	movs	r2, r4
 80066e6:	f7ff fe3c 	bl	8006362 <xTaskCreateStatic>
 80066ea:	0002      	movs	r2, r0
 80066ec:	4b17      	ldr	r3, [pc, #92]	; (800674c <vTaskStartScheduler+0x98>)
 80066ee:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80066f0:	4b16      	ldr	r3, [pc, #88]	; (800674c <vTaskStartScheduler+0x98>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d002      	beq.n	80066fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80066f8:	2301      	movs	r3, #1
 80066fa:	60fb      	str	r3, [r7, #12]
 80066fc:	e001      	b.n	8006702 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80066fe:	2300      	movs	r3, #0
 8006700:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d113      	bne.n	8006730 <vTaskStartScheduler+0x7c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8006708:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800670a:	4b11      	ldr	r3, [pc, #68]	; (8006750 <vTaskStartScheduler+0x9c>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	334c      	adds	r3, #76	; 0x4c
 8006710:	001a      	movs	r2, r3
 8006712:	4b10      	ldr	r3, [pc, #64]	; (8006754 <vTaskStartScheduler+0xa0>)
 8006714:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006716:	4b10      	ldr	r3, [pc, #64]	; (8006758 <vTaskStartScheduler+0xa4>)
 8006718:	2201      	movs	r2, #1
 800671a:	4252      	negs	r2, r2
 800671c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800671e:	4b0f      	ldr	r3, [pc, #60]	; (800675c <vTaskStartScheduler+0xa8>)
 8006720:	2201      	movs	r2, #1
 8006722:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006724:	4b0e      	ldr	r3, [pc, #56]	; (8006760 <vTaskStartScheduler+0xac>)
 8006726:	2200      	movs	r2, #0
 8006728:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800672a:	f000 fb4d 	bl	8006dc8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800672e:	e004      	b.n	800673a <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	3301      	adds	r3, #1
 8006734:	d101      	bne.n	800673a <vTaskStartScheduler+0x86>
 8006736:	b672      	cpsid	i
 8006738:	e7fe      	b.n	8006738 <vTaskStartScheduler+0x84>
}
 800673a:	46c0      	nop			; (mov r8, r8)
 800673c:	46bd      	mov	sp, r7
 800673e:	b005      	add	sp, #20
 8006740:	bd90      	pop	{r4, r7, pc}
 8006742:	46c0      	nop			; (mov r8, r8)
 8006744:	08007e00 	.word	0x08007e00
 8006748:	08006ab1 	.word	0x08006ab1
 800674c:	200005cc 	.word	0x200005cc
 8006750:	200004a8 	.word	0x200004a8
 8006754:	20000010 	.word	0x20000010
 8006758:	200005c8 	.word	0x200005c8
 800675c:	200005b4 	.word	0x200005b4
 8006760:	200005ac 	.word	0x200005ac

08006764 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006764:	b580      	push	{r7, lr}
 8006766:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006768:	4b03      	ldr	r3, [pc, #12]	; (8006778 <vTaskSuspendAll+0x14>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	1c5a      	adds	r2, r3, #1
 800676e:	4b02      	ldr	r3, [pc, #8]	; (8006778 <vTaskSuspendAll+0x14>)
 8006770:	601a      	str	r2, [r3, #0]
}
 8006772:	46c0      	nop			; (mov r8, r8)
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	200005d0 	.word	0x200005d0

0800677c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006782:	2300      	movs	r3, #0
 8006784:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006786:	2300      	movs	r3, #0
 8006788:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800678a:	4b3a      	ldr	r3, [pc, #232]	; (8006874 <xTaskResumeAll+0xf8>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d101      	bne.n	8006796 <xTaskResumeAll+0x1a>
 8006792:	b672      	cpsid	i
 8006794:	e7fe      	b.n	8006794 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006796:	f000 fb4b 	bl	8006e30 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800679a:	4b36      	ldr	r3, [pc, #216]	; (8006874 <xTaskResumeAll+0xf8>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	1e5a      	subs	r2, r3, #1
 80067a0:	4b34      	ldr	r3, [pc, #208]	; (8006874 <xTaskResumeAll+0xf8>)
 80067a2:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067a4:	4b33      	ldr	r3, [pc, #204]	; (8006874 <xTaskResumeAll+0xf8>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d15b      	bne.n	8006864 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80067ac:	4b32      	ldr	r3, [pc, #200]	; (8006878 <xTaskResumeAll+0xfc>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d057      	beq.n	8006864 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80067b4:	e02f      	b.n	8006816 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80067b6:	4b31      	ldr	r3, [pc, #196]	; (800687c <xTaskResumeAll+0x100>)
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	3318      	adds	r3, #24
 80067c2:	0018      	movs	r0, r3
 80067c4:	f7ff fda5 	bl	8006312 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	3304      	adds	r3, #4
 80067cc:	0018      	movs	r0, r3
 80067ce:	f7ff fda0 	bl	8006312 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067d6:	4b2a      	ldr	r3, [pc, #168]	; (8006880 <xTaskResumeAll+0x104>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d903      	bls.n	80067e6 <xTaskResumeAll+0x6a>
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067e2:	4b27      	ldr	r3, [pc, #156]	; (8006880 <xTaskResumeAll+0x104>)
 80067e4:	601a      	str	r2, [r3, #0]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ea:	0013      	movs	r3, r2
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	189b      	adds	r3, r3, r2
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	4a24      	ldr	r2, [pc, #144]	; (8006884 <xTaskResumeAll+0x108>)
 80067f4:	189a      	adds	r2, r3, r2
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	3304      	adds	r3, #4
 80067fa:	0019      	movs	r1, r3
 80067fc:	0010      	movs	r0, r2
 80067fe:	f7ff fd30 	bl	8006262 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006806:	4b20      	ldr	r3, [pc, #128]	; (8006888 <xTaskResumeAll+0x10c>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680c:	429a      	cmp	r2, r3
 800680e:	d302      	bcc.n	8006816 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8006810:	4b1e      	ldr	r3, [pc, #120]	; (800688c <xTaskResumeAll+0x110>)
 8006812:	2201      	movs	r2, #1
 8006814:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006816:	4b19      	ldr	r3, [pc, #100]	; (800687c <xTaskResumeAll+0x100>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1cb      	bne.n	80067b6 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d001      	beq.n	8006828 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006824:	f000 f9f4 	bl	8006c10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006828:	4b19      	ldr	r3, [pc, #100]	; (8006890 <xTaskResumeAll+0x114>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00f      	beq.n	8006854 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006834:	f000 f82e 	bl	8006894 <xTaskIncrementTick>
 8006838:	1e03      	subs	r3, r0, #0
 800683a:	d002      	beq.n	8006842 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 800683c:	4b13      	ldr	r3, [pc, #76]	; (800688c <xTaskResumeAll+0x110>)
 800683e:	2201      	movs	r2, #1
 8006840:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	3b01      	subs	r3, #1
 8006846:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1f2      	bne.n	8006834 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 800684e:	4b10      	ldr	r3, [pc, #64]	; (8006890 <xTaskResumeAll+0x114>)
 8006850:	2200      	movs	r2, #0
 8006852:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006854:	4b0d      	ldr	r3, [pc, #52]	; (800688c <xTaskResumeAll+0x110>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d003      	beq.n	8006864 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800685c:	2301      	movs	r3, #1
 800685e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006860:	f000 fad6 	bl	8006e10 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006864:	f000 faf6 	bl	8006e54 <vPortExitCritical>

	return xAlreadyYielded;
 8006868:	68bb      	ldr	r3, [r7, #8]
}
 800686a:	0018      	movs	r0, r3
 800686c:	46bd      	mov	sp, r7
 800686e:	b004      	add	sp, #16
 8006870:	bd80      	pop	{r7, pc}
 8006872:	46c0      	nop			; (mov r8, r8)
 8006874:	200005d0 	.word	0x200005d0
 8006878:	200005a8 	.word	0x200005a8
 800687c:	20000568 	.word	0x20000568
 8006880:	200005b0 	.word	0x200005b0
 8006884:	200004ac 	.word	0x200004ac
 8006888:	200004a8 	.word	0x200004a8
 800688c:	200005bc 	.word	0x200005bc
 8006890:	200005b8 	.word	0x200005b8

08006894 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b086      	sub	sp, #24
 8006898:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800689a:	2300      	movs	r3, #0
 800689c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800689e:	4b4c      	ldr	r3, [pc, #304]	; (80069d0 <xTaskIncrementTick+0x13c>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d000      	beq.n	80068a8 <xTaskIncrementTick+0x14>
 80068a6:	e083      	b.n	80069b0 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80068a8:	4b4a      	ldr	r3, [pc, #296]	; (80069d4 <xTaskIncrementTick+0x140>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	3301      	adds	r3, #1
 80068ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80068b0:	4b48      	ldr	r3, [pc, #288]	; (80069d4 <xTaskIncrementTick+0x140>)
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d117      	bne.n	80068ec <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80068bc:	4b46      	ldr	r3, [pc, #280]	; (80069d8 <xTaskIncrementTick+0x144>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d001      	beq.n	80068ca <xTaskIncrementTick+0x36>
 80068c6:	b672      	cpsid	i
 80068c8:	e7fe      	b.n	80068c8 <xTaskIncrementTick+0x34>
 80068ca:	4b43      	ldr	r3, [pc, #268]	; (80069d8 <xTaskIncrementTick+0x144>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	60fb      	str	r3, [r7, #12]
 80068d0:	4b42      	ldr	r3, [pc, #264]	; (80069dc <xTaskIncrementTick+0x148>)
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	4b40      	ldr	r3, [pc, #256]	; (80069d8 <xTaskIncrementTick+0x144>)
 80068d6:	601a      	str	r2, [r3, #0]
 80068d8:	4b40      	ldr	r3, [pc, #256]	; (80069dc <xTaskIncrementTick+0x148>)
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	601a      	str	r2, [r3, #0]
 80068de:	4b40      	ldr	r3, [pc, #256]	; (80069e0 <xTaskIncrementTick+0x14c>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	1c5a      	adds	r2, r3, #1
 80068e4:	4b3e      	ldr	r3, [pc, #248]	; (80069e0 <xTaskIncrementTick+0x14c>)
 80068e6:	601a      	str	r2, [r3, #0]
 80068e8:	f000 f992 	bl	8006c10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80068ec:	4b3d      	ldr	r3, [pc, #244]	; (80069e4 <xTaskIncrementTick+0x150>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d34e      	bcc.n	8006994 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068f6:	4b38      	ldr	r3, [pc, #224]	; (80069d8 <xTaskIncrementTick+0x144>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d101      	bne.n	8006904 <xTaskIncrementTick+0x70>
 8006900:	2301      	movs	r3, #1
 8006902:	e000      	b.n	8006906 <xTaskIncrementTick+0x72>
 8006904:	2300      	movs	r3, #0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d004      	beq.n	8006914 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800690a:	4b36      	ldr	r3, [pc, #216]	; (80069e4 <xTaskIncrementTick+0x150>)
 800690c:	2201      	movs	r2, #1
 800690e:	4252      	negs	r2, r2
 8006910:	601a      	str	r2, [r3, #0]
					break;
 8006912:	e03f      	b.n	8006994 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006914:	4b30      	ldr	r3, [pc, #192]	; (80069d8 <xTaskIncrementTick+0x144>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	429a      	cmp	r2, r3
 800692a:	d203      	bcs.n	8006934 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800692c:	4b2d      	ldr	r3, [pc, #180]	; (80069e4 <xTaskIncrementTick+0x150>)
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	601a      	str	r2, [r3, #0]
						break;
 8006932:	e02f      	b.n	8006994 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	3304      	adds	r3, #4
 8006938:	0018      	movs	r0, r3
 800693a:	f7ff fcea 	bl	8006312 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006942:	2b00      	cmp	r3, #0
 8006944:	d004      	beq.n	8006950 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	3318      	adds	r3, #24
 800694a:	0018      	movs	r0, r3
 800694c:	f7ff fce1 	bl	8006312 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006954:	4b24      	ldr	r3, [pc, #144]	; (80069e8 <xTaskIncrementTick+0x154>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	429a      	cmp	r2, r3
 800695a:	d903      	bls.n	8006964 <xTaskIncrementTick+0xd0>
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006960:	4b21      	ldr	r3, [pc, #132]	; (80069e8 <xTaskIncrementTick+0x154>)
 8006962:	601a      	str	r2, [r3, #0]
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006968:	0013      	movs	r3, r2
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	189b      	adds	r3, r3, r2
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	4a1e      	ldr	r2, [pc, #120]	; (80069ec <xTaskIncrementTick+0x158>)
 8006972:	189a      	adds	r2, r3, r2
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	3304      	adds	r3, #4
 8006978:	0019      	movs	r1, r3
 800697a:	0010      	movs	r0, r2
 800697c:	f7ff fc71 	bl	8006262 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006984:	4b1a      	ldr	r3, [pc, #104]	; (80069f0 <xTaskIncrementTick+0x15c>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698a:	429a      	cmp	r2, r3
 800698c:	d3b3      	bcc.n	80068f6 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800698e:	2301      	movs	r3, #1
 8006990:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006992:	e7b0      	b.n	80068f6 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006994:	4b16      	ldr	r3, [pc, #88]	; (80069f0 <xTaskIncrementTick+0x15c>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800699a:	4914      	ldr	r1, [pc, #80]	; (80069ec <xTaskIncrementTick+0x158>)
 800699c:	0013      	movs	r3, r2
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	189b      	adds	r3, r3, r2
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	585b      	ldr	r3, [r3, r1]
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d907      	bls.n	80069ba <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80069aa:	2301      	movs	r3, #1
 80069ac:	617b      	str	r3, [r7, #20]
 80069ae:	e004      	b.n	80069ba <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80069b0:	4b10      	ldr	r3, [pc, #64]	; (80069f4 <xTaskIncrementTick+0x160>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	1c5a      	adds	r2, r3, #1
 80069b6:	4b0f      	ldr	r3, [pc, #60]	; (80069f4 <xTaskIncrementTick+0x160>)
 80069b8:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80069ba:	4b0f      	ldr	r3, [pc, #60]	; (80069f8 <xTaskIncrementTick+0x164>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 80069c2:	2301      	movs	r3, #1
 80069c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80069c6:	697b      	ldr	r3, [r7, #20]
}
 80069c8:	0018      	movs	r0, r3
 80069ca:	46bd      	mov	sp, r7
 80069cc:	b006      	add	sp, #24
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	200005d0 	.word	0x200005d0
 80069d4:	200005ac 	.word	0x200005ac
 80069d8:	20000560 	.word	0x20000560
 80069dc:	20000564 	.word	0x20000564
 80069e0:	200005c0 	.word	0x200005c0
 80069e4:	200005c8 	.word	0x200005c8
 80069e8:	200005b0 	.word	0x200005b0
 80069ec:	200004ac 	.word	0x200004ac
 80069f0:	200004a8 	.word	0x200004a8
 80069f4:	200005b8 	.word	0x200005b8
 80069f8:	200005bc 	.word	0x200005bc

080069fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006a02:	4b25      	ldr	r3, [pc, #148]	; (8006a98 <vTaskSwitchContext+0x9c>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d003      	beq.n	8006a12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006a0a:	4b24      	ldr	r3, [pc, #144]	; (8006a9c <vTaskSwitchContext+0xa0>)
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006a10:	e03d      	b.n	8006a8e <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 8006a12:	4b22      	ldr	r3, [pc, #136]	; (8006a9c <vTaskSwitchContext+0xa0>)
 8006a14:	2200      	movs	r2, #0
 8006a16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006a18:	4b21      	ldr	r3, [pc, #132]	; (8006aa0 <vTaskSwitchContext+0xa4>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	607b      	str	r3, [r7, #4]
 8006a1e:	e007      	b.n	8006a30 <vTaskSwitchContext+0x34>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d101      	bne.n	8006a2a <vTaskSwitchContext+0x2e>
 8006a26:	b672      	cpsid	i
 8006a28:	e7fe      	b.n	8006a28 <vTaskSwitchContext+0x2c>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	3b01      	subs	r3, #1
 8006a2e:	607b      	str	r3, [r7, #4]
 8006a30:	491c      	ldr	r1, [pc, #112]	; (8006aa4 <vTaskSwitchContext+0xa8>)
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	0013      	movs	r3, r2
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	189b      	adds	r3, r3, r2
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	585b      	ldr	r3, [r3, r1]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d0ee      	beq.n	8006a20 <vTaskSwitchContext+0x24>
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	0013      	movs	r3, r2
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	189b      	adds	r3, r3, r2
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	4a15      	ldr	r2, [pc, #84]	; (8006aa4 <vTaskSwitchContext+0xa8>)
 8006a4e:	189b      	adds	r3, r3, r2
 8006a50:	603b      	str	r3, [r7, #0]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	685a      	ldr	r2, [r3, #4]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	605a      	str	r2, [r3, #4]
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	3308      	adds	r3, #8
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d104      	bne.n	8006a72 <vTaskSwitchContext+0x76>
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	685a      	ldr	r2, [r3, #4]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	605a      	str	r2, [r3, #4]
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	68da      	ldr	r2, [r3, #12]
 8006a78:	4b0b      	ldr	r3, [pc, #44]	; (8006aa8 <vTaskSwitchContext+0xac>)
 8006a7a:	601a      	str	r2, [r3, #0]
 8006a7c:	4b08      	ldr	r3, [pc, #32]	; (8006aa0 <vTaskSwitchContext+0xa4>)
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006a82:	4b09      	ldr	r3, [pc, #36]	; (8006aa8 <vTaskSwitchContext+0xac>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	334c      	adds	r3, #76	; 0x4c
 8006a88:	001a      	movs	r2, r3
 8006a8a:	4b08      	ldr	r3, [pc, #32]	; (8006aac <vTaskSwitchContext+0xb0>)
 8006a8c:	601a      	str	r2, [r3, #0]
}
 8006a8e:	46c0      	nop			; (mov r8, r8)
 8006a90:	46bd      	mov	sp, r7
 8006a92:	b002      	add	sp, #8
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	46c0      	nop			; (mov r8, r8)
 8006a98:	200005d0 	.word	0x200005d0
 8006a9c:	200005bc 	.word	0x200005bc
 8006aa0:	200005b0 	.word	0x200005b0
 8006aa4:	200004ac 	.word	0x200004ac
 8006aa8:	200004a8 	.word	0x200004a8
 8006aac:	20000010 	.word	0x20000010

08006ab0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ab8:	f000 f84e 	bl	8006b58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006abc:	4b03      	ldr	r3, [pc, #12]	; (8006acc <prvIdleTask+0x1c>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d9f9      	bls.n	8006ab8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006ac4:	f000 f9a4 	bl	8006e10 <vPortYield>
		prvCheckTasksWaitingTermination();
 8006ac8:	e7f6      	b.n	8006ab8 <prvIdleTask+0x8>
 8006aca:	46c0      	nop			; (mov r8, r8)
 8006acc:	200004ac 	.word	0x200004ac

08006ad0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	607b      	str	r3, [r7, #4]
 8006ada:	e00c      	b.n	8006af6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	0013      	movs	r3, r2
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	189b      	adds	r3, r3, r2
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	4a14      	ldr	r2, [pc, #80]	; (8006b38 <prvInitialiseTaskLists+0x68>)
 8006ae8:	189b      	adds	r3, r3, r2
 8006aea:	0018      	movs	r0, r3
 8006aec:	f7ff fb90 	bl	8006210 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	3301      	adds	r3, #1
 8006af4:	607b      	str	r3, [r7, #4]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2b06      	cmp	r3, #6
 8006afa:	d9ef      	bls.n	8006adc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006afc:	4b0f      	ldr	r3, [pc, #60]	; (8006b3c <prvInitialiseTaskLists+0x6c>)
 8006afe:	0018      	movs	r0, r3
 8006b00:	f7ff fb86 	bl	8006210 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006b04:	4b0e      	ldr	r3, [pc, #56]	; (8006b40 <prvInitialiseTaskLists+0x70>)
 8006b06:	0018      	movs	r0, r3
 8006b08:	f7ff fb82 	bl	8006210 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006b0c:	4b0d      	ldr	r3, [pc, #52]	; (8006b44 <prvInitialiseTaskLists+0x74>)
 8006b0e:	0018      	movs	r0, r3
 8006b10:	f7ff fb7e 	bl	8006210 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006b14:	4b0c      	ldr	r3, [pc, #48]	; (8006b48 <prvInitialiseTaskLists+0x78>)
 8006b16:	0018      	movs	r0, r3
 8006b18:	f7ff fb7a 	bl	8006210 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006b1c:	4b0b      	ldr	r3, [pc, #44]	; (8006b4c <prvInitialiseTaskLists+0x7c>)
 8006b1e:	0018      	movs	r0, r3
 8006b20:	f7ff fb76 	bl	8006210 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006b24:	4b0a      	ldr	r3, [pc, #40]	; (8006b50 <prvInitialiseTaskLists+0x80>)
 8006b26:	4a05      	ldr	r2, [pc, #20]	; (8006b3c <prvInitialiseTaskLists+0x6c>)
 8006b28:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006b2a:	4b0a      	ldr	r3, [pc, #40]	; (8006b54 <prvInitialiseTaskLists+0x84>)
 8006b2c:	4a04      	ldr	r2, [pc, #16]	; (8006b40 <prvInitialiseTaskLists+0x70>)
 8006b2e:	601a      	str	r2, [r3, #0]
}
 8006b30:	46c0      	nop			; (mov r8, r8)
 8006b32:	46bd      	mov	sp, r7
 8006b34:	b002      	add	sp, #8
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	200004ac 	.word	0x200004ac
 8006b3c:	20000538 	.word	0x20000538
 8006b40:	2000054c 	.word	0x2000054c
 8006b44:	20000568 	.word	0x20000568
 8006b48:	2000057c 	.word	0x2000057c
 8006b4c:	20000594 	.word	0x20000594
 8006b50:	20000560 	.word	0x20000560
 8006b54:	20000564 	.word	0x20000564

08006b58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b5e:	e01a      	b.n	8006b96 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8006b60:	f000 f966 	bl	8006e30 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006b64:	4b10      	ldr	r3, [pc, #64]	; (8006ba8 <prvCheckTasksWaitingTermination+0x50>)
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	3304      	adds	r3, #4
 8006b70:	0018      	movs	r0, r3
 8006b72:	f7ff fbce 	bl	8006312 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b76:	4b0d      	ldr	r3, [pc, #52]	; (8006bac <prvCheckTasksWaitingTermination+0x54>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	1e5a      	subs	r2, r3, #1
 8006b7c:	4b0b      	ldr	r3, [pc, #44]	; (8006bac <prvCheckTasksWaitingTermination+0x54>)
 8006b7e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006b80:	4b0b      	ldr	r3, [pc, #44]	; (8006bb0 <prvCheckTasksWaitingTermination+0x58>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	1e5a      	subs	r2, r3, #1
 8006b86:	4b0a      	ldr	r3, [pc, #40]	; (8006bb0 <prvCheckTasksWaitingTermination+0x58>)
 8006b88:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8006b8a:	f000 f963 	bl	8006e54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	0018      	movs	r0, r3
 8006b92:	f000 f80f 	bl	8006bb4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b96:	4b06      	ldr	r3, [pc, #24]	; (8006bb0 <prvCheckTasksWaitingTermination+0x58>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1e0      	bne.n	8006b60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006b9e:	46c0      	nop			; (mov r8, r8)
 8006ba0:	46c0      	nop			; (mov r8, r8)
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	b002      	add	sp, #8
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	2000057c 	.word	0x2000057c
 8006bac:	200005a8 	.word	0x200005a8
 8006bb0:	20000590 	.word	0x20000590

08006bb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	334c      	adds	r3, #76	; 0x4c
 8006bc0:	0018      	movs	r0, r3
 8006bc2:	f000 fc57 	bl	8007474 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	22b1      	movs	r2, #177	; 0xb1
 8006bca:	5c9b      	ldrb	r3, [r3, r2]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d109      	bne.n	8006be4 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd4:	0018      	movs	r0, r3
 8006bd6:	f000 fa69 	bl	80070ac <vPortFree>
				vPortFree( pxTCB );
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	0018      	movs	r0, r3
 8006bde:	f000 fa65 	bl	80070ac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006be2:	e010      	b.n	8006c06 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	22b1      	movs	r2, #177	; 0xb1
 8006be8:	5c9b      	ldrb	r3, [r3, r2]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d104      	bne.n	8006bf8 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	0018      	movs	r0, r3
 8006bf2:	f000 fa5b 	bl	80070ac <vPortFree>
	}
 8006bf6:	e006      	b.n	8006c06 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	22b1      	movs	r2, #177	; 0xb1
 8006bfc:	5c9b      	ldrb	r3, [r3, r2]
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d001      	beq.n	8006c06 <prvDeleteTCB+0x52>
 8006c02:	b672      	cpsid	i
 8006c04:	e7fe      	b.n	8006c04 <prvDeleteTCB+0x50>
	}
 8006c06:	46c0      	nop			; (mov r8, r8)
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	b002      	add	sp, #8
 8006c0c:	bd80      	pop	{r7, pc}
	...

08006c10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c16:	4b0e      	ldr	r3, [pc, #56]	; (8006c50 <prvResetNextTaskUnblockTime+0x40>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d101      	bne.n	8006c24 <prvResetNextTaskUnblockTime+0x14>
 8006c20:	2301      	movs	r3, #1
 8006c22:	e000      	b.n	8006c26 <prvResetNextTaskUnblockTime+0x16>
 8006c24:	2300      	movs	r3, #0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d004      	beq.n	8006c34 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006c2a:	4b0a      	ldr	r3, [pc, #40]	; (8006c54 <prvResetNextTaskUnblockTime+0x44>)
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	4252      	negs	r2, r2
 8006c30:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006c32:	e008      	b.n	8006c46 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006c34:	4b06      	ldr	r3, [pc, #24]	; (8006c50 <prvResetNextTaskUnblockTime+0x40>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	685a      	ldr	r2, [r3, #4]
 8006c42:	4b04      	ldr	r3, [pc, #16]	; (8006c54 <prvResetNextTaskUnblockTime+0x44>)
 8006c44:	601a      	str	r2, [r3, #0]
}
 8006c46:	46c0      	nop			; (mov r8, r8)
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	b002      	add	sp, #8
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	46c0      	nop			; (mov r8, r8)
 8006c50:	20000560 	.word	0x20000560
 8006c54:	200005c8 	.word	0x200005c8

08006c58 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c62:	4b21      	ldr	r3, [pc, #132]	; (8006ce8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c68:	4b20      	ldr	r3, [pc, #128]	; (8006cec <prvAddCurrentTaskToDelayedList+0x94>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	3304      	adds	r3, #4
 8006c6e:	0018      	movs	r0, r3
 8006c70:	f7ff fb4f 	bl	8006312 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	3301      	adds	r3, #1
 8006c78:	d10b      	bne.n	8006c92 <prvAddCurrentTaskToDelayedList+0x3a>
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d008      	beq.n	8006c92 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c80:	4b1a      	ldr	r3, [pc, #104]	; (8006cec <prvAddCurrentTaskToDelayedList+0x94>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	1d1a      	adds	r2, r3, #4
 8006c86:	4b1a      	ldr	r3, [pc, #104]	; (8006cf0 <prvAddCurrentTaskToDelayedList+0x98>)
 8006c88:	0011      	movs	r1, r2
 8006c8a:	0018      	movs	r0, r3
 8006c8c:	f7ff fae9 	bl	8006262 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c90:	e026      	b.n	8006ce0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	18d3      	adds	r3, r2, r3
 8006c98:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c9a:	4b14      	ldr	r3, [pc, #80]	; (8006cec <prvAddCurrentTaskToDelayedList+0x94>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68ba      	ldr	r2, [r7, #8]
 8006ca0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ca2:	68ba      	ldr	r2, [r7, #8]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d209      	bcs.n	8006cbe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006caa:	4b12      	ldr	r3, [pc, #72]	; (8006cf4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	4b0f      	ldr	r3, [pc, #60]	; (8006cec <prvAddCurrentTaskToDelayedList+0x94>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	3304      	adds	r3, #4
 8006cb4:	0019      	movs	r1, r3
 8006cb6:	0010      	movs	r0, r2
 8006cb8:	f7ff faf5 	bl	80062a6 <vListInsert>
}
 8006cbc:	e010      	b.n	8006ce0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cbe:	4b0e      	ldr	r3, [pc, #56]	; (8006cf8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	4b0a      	ldr	r3, [pc, #40]	; (8006cec <prvAddCurrentTaskToDelayedList+0x94>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	3304      	adds	r3, #4
 8006cc8:	0019      	movs	r1, r3
 8006cca:	0010      	movs	r0, r2
 8006ccc:	f7ff faeb 	bl	80062a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006cd0:	4b0a      	ldr	r3, [pc, #40]	; (8006cfc <prvAddCurrentTaskToDelayedList+0xa4>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d202      	bcs.n	8006ce0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006cda:	4b08      	ldr	r3, [pc, #32]	; (8006cfc <prvAddCurrentTaskToDelayedList+0xa4>)
 8006cdc:	68ba      	ldr	r2, [r7, #8]
 8006cde:	601a      	str	r2, [r3, #0]
}
 8006ce0:	46c0      	nop			; (mov r8, r8)
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	b004      	add	sp, #16
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	200005ac 	.word	0x200005ac
 8006cec:	200004a8 	.word	0x200004a8
 8006cf0:	20000594 	.word	0x20000594
 8006cf4:	20000564 	.word	0x20000564
 8006cf8:	20000560 	.word	0x20000560
 8006cfc:	200005c8 	.word	0x200005c8

08006d00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	3b04      	subs	r3, #4
 8006d10:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2280      	movs	r2, #128	; 0x80
 8006d16:	0452      	lsls	r2, r2, #17
 8006d18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	3b04      	subs	r3, #4
 8006d1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8006d20:	68ba      	ldr	r2, [r7, #8]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	3b04      	subs	r3, #4
 8006d2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006d2c:	4a08      	ldr	r2, [pc, #32]	; (8006d50 <pxPortInitialiseStack+0x50>)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	3b14      	subs	r3, #20
 8006d36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	3b20      	subs	r3, #32
 8006d42:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006d44:	68fb      	ldr	r3, [r7, #12]
}
 8006d46:	0018      	movs	r0, r3
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	b004      	add	sp, #16
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	46c0      	nop			; (mov r8, r8)
 8006d50:	08006d55 	.word	0x08006d55

08006d54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006d5e:	4b08      	ldr	r3, [pc, #32]	; (8006d80 <prvTaskExitError+0x2c>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	3301      	adds	r3, #1
 8006d64:	d001      	beq.n	8006d6a <prvTaskExitError+0x16>
 8006d66:	b672      	cpsid	i
 8006d68:	e7fe      	b.n	8006d68 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8006d6a:	b672      	cpsid	i
	while( ulDummy == 0 )
 8006d6c:	46c0      	nop			; (mov r8, r8)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d0fc      	beq.n	8006d6e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006d74:	46c0      	nop			; (mov r8, r8)
 8006d76:	46c0      	nop			; (mov r8, r8)
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	b002      	add	sp, #8
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	46c0      	nop			; (mov r8, r8)
 8006d80:	2000000c 	.word	0x2000000c

08006d84 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8006d88:	46c0      	nop			; (mov r8, r8)
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
	...

08006d90 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8006d90:	4a0b      	ldr	r2, [pc, #44]	; (8006dc0 <pxCurrentTCBConst2>)
 8006d92:	6813      	ldr	r3, [r2, #0]
 8006d94:	6818      	ldr	r0, [r3, #0]
 8006d96:	3020      	adds	r0, #32
 8006d98:	f380 8809 	msr	PSP, r0
 8006d9c:	2002      	movs	r0, #2
 8006d9e:	f380 8814 	msr	CONTROL, r0
 8006da2:	f3bf 8f6f 	isb	sy
 8006da6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8006da8:	46ae      	mov	lr, r5
 8006daa:	bc08      	pop	{r3}
 8006dac:	bc04      	pop	{r2}
 8006dae:	b662      	cpsie	i
 8006db0:	4718      	bx	r3
 8006db2:	46c0      	nop			; (mov r8, r8)
 8006db4:	46c0      	nop			; (mov r8, r8)
 8006db6:	46c0      	nop			; (mov r8, r8)
 8006db8:	46c0      	nop			; (mov r8, r8)
 8006dba:	46c0      	nop			; (mov r8, r8)
 8006dbc:	46c0      	nop			; (mov r8, r8)
 8006dbe:	46c0      	nop			; (mov r8, r8)

08006dc0 <pxCurrentTCBConst2>:
 8006dc0:	200004a8 	.word	0x200004a8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8006dc4:	46c0      	nop			; (mov r8, r8)
 8006dc6:	46c0      	nop			; (mov r8, r8)

08006dc8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8006dcc:	4b0e      	ldr	r3, [pc, #56]	; (8006e08 <xPortStartScheduler+0x40>)
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	4b0d      	ldr	r3, [pc, #52]	; (8006e08 <xPortStartScheduler+0x40>)
 8006dd2:	21ff      	movs	r1, #255	; 0xff
 8006dd4:	0409      	lsls	r1, r1, #16
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8006dda:	4b0b      	ldr	r3, [pc, #44]	; (8006e08 <xPortStartScheduler+0x40>)
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	4b0a      	ldr	r3, [pc, #40]	; (8006e08 <xPortStartScheduler+0x40>)
 8006de0:	21ff      	movs	r1, #255	; 0xff
 8006de2:	0609      	lsls	r1, r1, #24
 8006de4:	430a      	orrs	r2, r1
 8006de6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8006de8:	f000 f898 	bl	8006f1c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006dec:	4b07      	ldr	r3, [pc, #28]	; (8006e0c <xPortStartScheduler+0x44>)
 8006dee:	2200      	movs	r2, #0
 8006df0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8006df2:	f7ff ffcd 	bl	8006d90 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006df6:	f7ff fe01 	bl	80069fc <vTaskSwitchContext>
	prvTaskExitError();
 8006dfa:	f7ff ffab 	bl	8006d54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	0018      	movs	r0, r3
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	46c0      	nop			; (mov r8, r8)
 8006e08:	e000ed20 	.word	0xe000ed20
 8006e0c:	2000000c 	.word	0x2000000c

08006e10 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8006e14:	4b05      	ldr	r3, [pc, #20]	; (8006e2c <vPortYield+0x1c>)
 8006e16:	2280      	movs	r2, #128	; 0x80
 8006e18:	0552      	lsls	r2, r2, #21
 8006e1a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8006e1c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006e20:	f3bf 8f6f 	isb	sy
}
 8006e24:	46c0      	nop			; (mov r8, r8)
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	46c0      	nop			; (mov r8, r8)
 8006e2c:	e000ed04 	.word	0xe000ed04

08006e30 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8006e34:	b672      	cpsid	i
    uxCriticalNesting++;
 8006e36:	4b06      	ldr	r3, [pc, #24]	; (8006e50 <vPortEnterCritical+0x20>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	1c5a      	adds	r2, r3, #1
 8006e3c:	4b04      	ldr	r3, [pc, #16]	; (8006e50 <vPortEnterCritical+0x20>)
 8006e3e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8006e40:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006e44:	f3bf 8f6f 	isb	sy
}
 8006e48:	46c0      	nop			; (mov r8, r8)
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	46c0      	nop			; (mov r8, r8)
 8006e50:	2000000c 	.word	0x2000000c

08006e54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e58:	4b09      	ldr	r3, [pc, #36]	; (8006e80 <vPortExitCritical+0x2c>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d101      	bne.n	8006e64 <vPortExitCritical+0x10>
 8006e60:	b672      	cpsid	i
 8006e62:	e7fe      	b.n	8006e62 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8006e64:	4b06      	ldr	r3, [pc, #24]	; (8006e80 <vPortExitCritical+0x2c>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	1e5a      	subs	r2, r3, #1
 8006e6a:	4b05      	ldr	r3, [pc, #20]	; (8006e80 <vPortExitCritical+0x2c>)
 8006e6c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8006e6e:	4b04      	ldr	r3, [pc, #16]	; (8006e80 <vPortExitCritical+0x2c>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d100      	bne.n	8006e78 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8006e76:	b662      	cpsie	i
    }
}
 8006e78:	46c0      	nop			; (mov r8, r8)
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	46c0      	nop			; (mov r8, r8)
 8006e80:	2000000c 	.word	0x2000000c

08006e84 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8006e84:	f3ef 8010 	mrs	r0, PRIMASK
 8006e88:	b672      	cpsid	i
 8006e8a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8006e8c:	46c0      	nop			; (mov r8, r8)
 8006e8e:	0018      	movs	r0, r3

08006e90 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8006e90:	f380 8810 	msr	PRIMASK, r0
 8006e94:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8006e96:	46c0      	nop			; (mov r8, r8)
	...

08006ea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ea0:	f3ef 8009 	mrs	r0, PSP
 8006ea4:	4b0e      	ldr	r3, [pc, #56]	; (8006ee0 <pxCurrentTCBConst>)
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	3820      	subs	r0, #32
 8006eaa:	6010      	str	r0, [r2, #0]
 8006eac:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006eae:	4644      	mov	r4, r8
 8006eb0:	464d      	mov	r5, r9
 8006eb2:	4656      	mov	r6, sl
 8006eb4:	465f      	mov	r7, fp
 8006eb6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006eb8:	b508      	push	{r3, lr}
 8006eba:	b672      	cpsid	i
 8006ebc:	f7ff fd9e 	bl	80069fc <vTaskSwitchContext>
 8006ec0:	b662      	cpsie	i
 8006ec2:	bc0c      	pop	{r2, r3}
 8006ec4:	6811      	ldr	r1, [r2, #0]
 8006ec6:	6808      	ldr	r0, [r1, #0]
 8006ec8:	3010      	adds	r0, #16
 8006eca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8006ecc:	46a0      	mov	r8, r4
 8006ece:	46a9      	mov	r9, r5
 8006ed0:	46b2      	mov	sl, r6
 8006ed2:	46bb      	mov	fp, r7
 8006ed4:	f380 8809 	msr	PSP, r0
 8006ed8:	3820      	subs	r0, #32
 8006eda:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8006edc:	4718      	bx	r3
 8006ede:	46c0      	nop			; (mov r8, r8)

08006ee0 <pxCurrentTCBConst>:
 8006ee0:	200004a8 	.word	0x200004a8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8006ee4:	46c0      	nop			; (mov r8, r8)
 8006ee6:	46c0      	nop			; (mov r8, r8)

08006ee8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8006eee:	f7ff ffc9 	bl	8006e84 <ulSetInterruptMaskFromISR>
 8006ef2:	0003      	movs	r3, r0
 8006ef4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ef6:	f7ff fccd 	bl	8006894 <xTaskIncrementTick>
 8006efa:	1e03      	subs	r3, r0, #0
 8006efc:	d003      	beq.n	8006f06 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8006efe:	4b06      	ldr	r3, [pc, #24]	; (8006f18 <SysTick_Handler+0x30>)
 8006f00:	2280      	movs	r2, #128	; 0x80
 8006f02:	0552      	lsls	r2, r2, #21
 8006f04:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	0018      	movs	r0, r3
 8006f0a:	f7ff ffc1 	bl	8006e90 <vClearInterruptMaskFromISR>
}
 8006f0e:	46c0      	nop			; (mov r8, r8)
 8006f10:	46bd      	mov	sp, r7
 8006f12:	b002      	add	sp, #8
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	46c0      	nop			; (mov r8, r8)
 8006f18:	e000ed04 	.word	0xe000ed04

08006f1c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8006f20:	4b0b      	ldr	r3, [pc, #44]	; (8006f50 <prvSetupTimerInterrupt+0x34>)
 8006f22:	2200      	movs	r2, #0
 8006f24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8006f26:	4b0b      	ldr	r3, [pc, #44]	; (8006f54 <prvSetupTimerInterrupt+0x38>)
 8006f28:	2200      	movs	r2, #0
 8006f2a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f2c:	4b0a      	ldr	r3, [pc, #40]	; (8006f58 <prvSetupTimerInterrupt+0x3c>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	22fa      	movs	r2, #250	; 0xfa
 8006f32:	0091      	lsls	r1, r2, #2
 8006f34:	0018      	movs	r0, r3
 8006f36:	f7f9 f8f1 	bl	800011c <__udivsi3>
 8006f3a:	0003      	movs	r3, r0
 8006f3c:	001a      	movs	r2, r3
 8006f3e:	4b07      	ldr	r3, [pc, #28]	; (8006f5c <prvSetupTimerInterrupt+0x40>)
 8006f40:	3a01      	subs	r2, #1
 8006f42:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8006f44:	4b02      	ldr	r3, [pc, #8]	; (8006f50 <prvSetupTimerInterrupt+0x34>)
 8006f46:	2207      	movs	r2, #7
 8006f48:	601a      	str	r2, [r3, #0]
}
 8006f4a:	46c0      	nop			; (mov r8, r8)
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	e000e010 	.word	0xe000e010
 8006f54:	e000e018 	.word	0xe000e018
 8006f58:	20000000 	.word	0x20000000
 8006f5c:	e000e014 	.word	0xe000e014

08006f60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8006f6c:	f7ff fbfa 	bl	8006764 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006f70:	4b49      	ldr	r3, [pc, #292]	; (8007098 <pvPortMalloc+0x138>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d101      	bne.n	8006f7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006f78:	f000 f8e0 	bl	800713c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006f7c:	4b47      	ldr	r3, [pc, #284]	; (800709c <pvPortMalloc+0x13c>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	4013      	ands	r3, r2
 8006f84:	d000      	beq.n	8006f88 <pvPortMalloc+0x28>
 8006f86:	e079      	b.n	800707c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d012      	beq.n	8006fb4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8006f8e:	2208      	movs	r2, #8
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	189b      	adds	r3, r3, r2
 8006f94:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2207      	movs	r2, #7
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	d00a      	beq.n	8006fb4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2207      	movs	r2, #7
 8006fa2:	4393      	bics	r3, r2
 8006fa4:	3308      	adds	r3, #8
 8006fa6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2207      	movs	r2, #7
 8006fac:	4013      	ands	r3, r2
 8006fae:	d001      	beq.n	8006fb4 <pvPortMalloc+0x54>
 8006fb0:	b672      	cpsid	i
 8006fb2:	e7fe      	b.n	8006fb2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d060      	beq.n	800707c <pvPortMalloc+0x11c>
 8006fba:	4b39      	ldr	r3, [pc, #228]	; (80070a0 <pvPortMalloc+0x140>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d85b      	bhi.n	800707c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006fc4:	4b37      	ldr	r3, [pc, #220]	; (80070a4 <pvPortMalloc+0x144>)
 8006fc6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8006fc8:	4b36      	ldr	r3, [pc, #216]	; (80070a4 <pvPortMalloc+0x144>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006fce:	e004      	b.n	8006fda <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d903      	bls.n	8006fec <pvPortMalloc+0x8c>
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1f1      	bne.n	8006fd0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006fec:	4b2a      	ldr	r3, [pc, #168]	; (8007098 <pvPortMalloc+0x138>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	697a      	ldr	r2, [r7, #20]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d042      	beq.n	800707c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	2208      	movs	r2, #8
 8006ffc:	189b      	adds	r3, r3, r2
 8006ffe:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	1ad2      	subs	r2, r2, r3
 8007010:	2308      	movs	r3, #8
 8007012:	005b      	lsls	r3, r3, #1
 8007014:	429a      	cmp	r2, r3
 8007016:	d916      	bls.n	8007046 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007018:	697a      	ldr	r2, [r7, #20]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	18d3      	adds	r3, r2, r3
 800701e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	2207      	movs	r2, #7
 8007024:	4013      	ands	r3, r2
 8007026:	d001      	beq.n	800702c <pvPortMalloc+0xcc>
 8007028:	b672      	cpsid	i
 800702a:	e7fe      	b.n	800702a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	685a      	ldr	r2, [r3, #4]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	1ad2      	subs	r2, r2, r3
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	0018      	movs	r0, r3
 8007042:	f000 f8db 	bl	80071fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007046:	4b16      	ldr	r3, [pc, #88]	; (80070a0 <pvPortMalloc+0x140>)
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	1ad2      	subs	r2, r2, r3
 8007050:	4b13      	ldr	r3, [pc, #76]	; (80070a0 <pvPortMalloc+0x140>)
 8007052:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007054:	4b12      	ldr	r3, [pc, #72]	; (80070a0 <pvPortMalloc+0x140>)
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	4b13      	ldr	r3, [pc, #76]	; (80070a8 <pvPortMalloc+0x148>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	429a      	cmp	r2, r3
 800705e:	d203      	bcs.n	8007068 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007060:	4b0f      	ldr	r3, [pc, #60]	; (80070a0 <pvPortMalloc+0x140>)
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	4b10      	ldr	r3, [pc, #64]	; (80070a8 <pvPortMalloc+0x148>)
 8007066:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	685a      	ldr	r2, [r3, #4]
 800706c:	4b0b      	ldr	r3, [pc, #44]	; (800709c <pvPortMalloc+0x13c>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	431a      	orrs	r2, r3
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	2200      	movs	r2, #0
 800707a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800707c:	f7ff fb7e 	bl	800677c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2207      	movs	r2, #7
 8007084:	4013      	ands	r3, r2
 8007086:	d001      	beq.n	800708c <pvPortMalloc+0x12c>
 8007088:	b672      	cpsid	i
 800708a:	e7fe      	b.n	800708a <pvPortMalloc+0x12a>
	return pvReturn;
 800708c:	68fb      	ldr	r3, [r7, #12]
}
 800708e:	0018      	movs	r0, r3
 8007090:	46bd      	mov	sp, r7
 8007092:	b006      	add	sp, #24
 8007094:	bd80      	pop	{r7, pc}
 8007096:	46c0      	nop			; (mov r8, r8)
 8007098:	200011dc 	.word	0x200011dc
 800709c:	200011e8 	.word	0x200011e8
 80070a0:	200011e0 	.word	0x200011e0
 80070a4:	200011d4 	.word	0x200011d4
 80070a8:	200011e4 	.word	0x200011e4

080070ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d035      	beq.n	800712a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80070be:	2308      	movs	r3, #8
 80070c0:	425b      	negs	r3, r3
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	18d3      	adds	r3, r2, r3
 80070c6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	4b18      	ldr	r3, [pc, #96]	; (8007134 <vPortFree+0x88>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4013      	ands	r3, r2
 80070d6:	d101      	bne.n	80070dc <vPortFree+0x30>
 80070d8:	b672      	cpsid	i
 80070da:	e7fe      	b.n	80070da <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d001      	beq.n	80070e8 <vPortFree+0x3c>
 80070e4:	b672      	cpsid	i
 80070e6:	e7fe      	b.n	80070e6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	685a      	ldr	r2, [r3, #4]
 80070ec:	4b11      	ldr	r3, [pc, #68]	; (8007134 <vPortFree+0x88>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4013      	ands	r3, r2
 80070f2:	d01a      	beq.n	800712a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d116      	bne.n	800712a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	685a      	ldr	r2, [r3, #4]
 8007100:	4b0c      	ldr	r3, [pc, #48]	; (8007134 <vPortFree+0x88>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	43db      	mvns	r3, r3
 8007106:	401a      	ands	r2, r3
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800710c:	f7ff fb2a 	bl	8006764 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	685a      	ldr	r2, [r3, #4]
 8007114:	4b08      	ldr	r3, [pc, #32]	; (8007138 <vPortFree+0x8c>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	18d2      	adds	r2, r2, r3
 800711a:	4b07      	ldr	r3, [pc, #28]	; (8007138 <vPortFree+0x8c>)
 800711c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	0018      	movs	r0, r3
 8007122:	f000 f86b 	bl	80071fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007126:	f7ff fb29 	bl	800677c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800712a:	46c0      	nop			; (mov r8, r8)
 800712c:	46bd      	mov	sp, r7
 800712e:	b004      	add	sp, #16
 8007130:	bd80      	pop	{r7, pc}
 8007132:	46c0      	nop			; (mov r8, r8)
 8007134:	200011e8 	.word	0x200011e8
 8007138:	200011e0 	.word	0x200011e0

0800713c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007142:	23c0      	movs	r3, #192	; 0xc0
 8007144:	011b      	lsls	r3, r3, #4
 8007146:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007148:	4b26      	ldr	r3, [pc, #152]	; (80071e4 <prvHeapInit+0xa8>)
 800714a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2207      	movs	r2, #7
 8007150:	4013      	ands	r3, r2
 8007152:	d00c      	beq.n	800716e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	3307      	adds	r3, #7
 8007158:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2207      	movs	r2, #7
 800715e:	4393      	bics	r3, r2
 8007160:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	1ad2      	subs	r2, r2, r3
 8007168:	4b1e      	ldr	r3, [pc, #120]	; (80071e4 <prvHeapInit+0xa8>)
 800716a:	18d3      	adds	r3, r2, r3
 800716c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007172:	4b1d      	ldr	r3, [pc, #116]	; (80071e8 <prvHeapInit+0xac>)
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007178:	4b1b      	ldr	r3, [pc, #108]	; (80071e8 <prvHeapInit+0xac>)
 800717a:	2200      	movs	r2, #0
 800717c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	68ba      	ldr	r2, [r7, #8]
 8007182:	18d3      	adds	r3, r2, r3
 8007184:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007186:	2208      	movs	r2, #8
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	1a9b      	subs	r3, r3, r2
 800718c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2207      	movs	r2, #7
 8007192:	4393      	bics	r3, r2
 8007194:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	4b14      	ldr	r3, [pc, #80]	; (80071ec <prvHeapInit+0xb0>)
 800719a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800719c:	4b13      	ldr	r3, [pc, #76]	; (80071ec <prvHeapInit+0xb0>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2200      	movs	r2, #0
 80071a2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80071a4:	4b11      	ldr	r3, [pc, #68]	; (80071ec <prvHeapInit+0xb0>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2200      	movs	r2, #0
 80071aa:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	1ad2      	subs	r2, r2, r3
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80071ba:	4b0c      	ldr	r3, [pc, #48]	; (80071ec <prvHeapInit+0xb0>)
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	685a      	ldr	r2, [r3, #4]
 80071c6:	4b0a      	ldr	r3, [pc, #40]	; (80071f0 <prvHeapInit+0xb4>)
 80071c8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	685a      	ldr	r2, [r3, #4]
 80071ce:	4b09      	ldr	r3, [pc, #36]	; (80071f4 <prvHeapInit+0xb8>)
 80071d0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80071d2:	4b09      	ldr	r3, [pc, #36]	; (80071f8 <prvHeapInit+0xbc>)
 80071d4:	2280      	movs	r2, #128	; 0x80
 80071d6:	0612      	lsls	r2, r2, #24
 80071d8:	601a      	str	r2, [r3, #0]
}
 80071da:	46c0      	nop			; (mov r8, r8)
 80071dc:	46bd      	mov	sp, r7
 80071de:	b004      	add	sp, #16
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	46c0      	nop			; (mov r8, r8)
 80071e4:	200005d4 	.word	0x200005d4
 80071e8:	200011d4 	.word	0x200011d4
 80071ec:	200011dc 	.word	0x200011dc
 80071f0:	200011e4 	.word	0x200011e4
 80071f4:	200011e0 	.word	0x200011e0
 80071f8:	200011e8 	.word	0x200011e8

080071fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007204:	4b27      	ldr	r3, [pc, #156]	; (80072a4 <prvInsertBlockIntoFreeList+0xa8>)
 8007206:	60fb      	str	r3, [r7, #12]
 8007208:	e002      	b.n	8007210 <prvInsertBlockIntoFreeList+0x14>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	60fb      	str	r3, [r7, #12]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	429a      	cmp	r2, r3
 8007218:	d8f7      	bhi.n	800720a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	68ba      	ldr	r2, [r7, #8]
 8007224:	18d3      	adds	r3, r2, r3
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	429a      	cmp	r2, r3
 800722a:	d108      	bne.n	800723e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	685a      	ldr	r2, [r3, #4]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	18d2      	adds	r2, r2, r3
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	18d2      	adds	r2, r2, r3
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	429a      	cmp	r2, r3
 8007250:	d118      	bne.n	8007284 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	4b14      	ldr	r3, [pc, #80]	; (80072a8 <prvInsertBlockIntoFreeList+0xac>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	429a      	cmp	r2, r3
 800725c:	d00d      	beq.n	800727a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	685a      	ldr	r2, [r3, #4]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	18d2      	adds	r2, r2, r3
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	601a      	str	r2, [r3, #0]
 8007278:	e008      	b.n	800728c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800727a:	4b0b      	ldr	r3, [pc, #44]	; (80072a8 <prvInsertBlockIntoFreeList+0xac>)
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	601a      	str	r2, [r3, #0]
 8007282:	e003      	b.n	800728c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	429a      	cmp	r2, r3
 8007292:	d002      	beq.n	800729a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800729a:	46c0      	nop			; (mov r8, r8)
 800729c:	46bd      	mov	sp, r7
 800729e:	b004      	add	sp, #16
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	46c0      	nop			; (mov r8, r8)
 80072a4:	200011d4 	.word	0x200011d4
 80072a8:	200011dc 	.word	0x200011dc

080072ac <__errno>:
 80072ac:	4b01      	ldr	r3, [pc, #4]	; (80072b4 <__errno+0x8>)
 80072ae:	6818      	ldr	r0, [r3, #0]
 80072b0:	4770      	bx	lr
 80072b2:	46c0      	nop			; (mov r8, r8)
 80072b4:	20000010 	.word	0x20000010

080072b8 <__libc_init_array>:
 80072b8:	b570      	push	{r4, r5, r6, lr}
 80072ba:	2600      	movs	r6, #0
 80072bc:	4d0c      	ldr	r5, [pc, #48]	; (80072f0 <__libc_init_array+0x38>)
 80072be:	4c0d      	ldr	r4, [pc, #52]	; (80072f4 <__libc_init_array+0x3c>)
 80072c0:	1b64      	subs	r4, r4, r5
 80072c2:	10a4      	asrs	r4, r4, #2
 80072c4:	42a6      	cmp	r6, r4
 80072c6:	d109      	bne.n	80072dc <__libc_init_array+0x24>
 80072c8:	2600      	movs	r6, #0
 80072ca:	f000 fcff 	bl	8007ccc <_init>
 80072ce:	4d0a      	ldr	r5, [pc, #40]	; (80072f8 <__libc_init_array+0x40>)
 80072d0:	4c0a      	ldr	r4, [pc, #40]	; (80072fc <__libc_init_array+0x44>)
 80072d2:	1b64      	subs	r4, r4, r5
 80072d4:	10a4      	asrs	r4, r4, #2
 80072d6:	42a6      	cmp	r6, r4
 80072d8:	d105      	bne.n	80072e6 <__libc_init_array+0x2e>
 80072da:	bd70      	pop	{r4, r5, r6, pc}
 80072dc:	00b3      	lsls	r3, r6, #2
 80072de:	58eb      	ldr	r3, [r5, r3]
 80072e0:	4798      	blx	r3
 80072e2:	3601      	adds	r6, #1
 80072e4:	e7ee      	b.n	80072c4 <__libc_init_array+0xc>
 80072e6:	00b3      	lsls	r3, r6, #2
 80072e8:	58eb      	ldr	r3, [r5, r3]
 80072ea:	4798      	blx	r3
 80072ec:	3601      	adds	r6, #1
 80072ee:	e7f2      	b.n	80072d6 <__libc_init_array+0x1e>
 80072f0:	08007f54 	.word	0x08007f54
 80072f4:	08007f54 	.word	0x08007f54
 80072f8:	08007f54 	.word	0x08007f54
 80072fc:	08007f58 	.word	0x08007f58

08007300 <__retarget_lock_acquire_recursive>:
 8007300:	4770      	bx	lr

08007302 <__retarget_lock_release_recursive>:
 8007302:	4770      	bx	lr

08007304 <memcpy>:
 8007304:	2300      	movs	r3, #0
 8007306:	b510      	push	{r4, lr}
 8007308:	429a      	cmp	r2, r3
 800730a:	d100      	bne.n	800730e <memcpy+0xa>
 800730c:	bd10      	pop	{r4, pc}
 800730e:	5ccc      	ldrb	r4, [r1, r3]
 8007310:	54c4      	strb	r4, [r0, r3]
 8007312:	3301      	adds	r3, #1
 8007314:	e7f8      	b.n	8007308 <memcpy+0x4>

08007316 <memset>:
 8007316:	0003      	movs	r3, r0
 8007318:	1882      	adds	r2, r0, r2
 800731a:	4293      	cmp	r3, r2
 800731c:	d100      	bne.n	8007320 <memset+0xa>
 800731e:	4770      	bx	lr
 8007320:	7019      	strb	r1, [r3, #0]
 8007322:	3301      	adds	r3, #1
 8007324:	e7f9      	b.n	800731a <memset+0x4>
	...

08007328 <sbrk_aligned>:
 8007328:	b570      	push	{r4, r5, r6, lr}
 800732a:	4e0f      	ldr	r6, [pc, #60]	; (8007368 <sbrk_aligned+0x40>)
 800732c:	000d      	movs	r5, r1
 800732e:	6831      	ldr	r1, [r6, #0]
 8007330:	0004      	movs	r4, r0
 8007332:	2900      	cmp	r1, #0
 8007334:	d102      	bne.n	800733c <sbrk_aligned+0x14>
 8007336:	f000 f903 	bl	8007540 <_sbrk_r>
 800733a:	6030      	str	r0, [r6, #0]
 800733c:	0029      	movs	r1, r5
 800733e:	0020      	movs	r0, r4
 8007340:	f000 f8fe 	bl	8007540 <_sbrk_r>
 8007344:	1c43      	adds	r3, r0, #1
 8007346:	d00a      	beq.n	800735e <sbrk_aligned+0x36>
 8007348:	2303      	movs	r3, #3
 800734a:	1cc5      	adds	r5, r0, #3
 800734c:	439d      	bics	r5, r3
 800734e:	42a8      	cmp	r0, r5
 8007350:	d007      	beq.n	8007362 <sbrk_aligned+0x3a>
 8007352:	1a29      	subs	r1, r5, r0
 8007354:	0020      	movs	r0, r4
 8007356:	f000 f8f3 	bl	8007540 <_sbrk_r>
 800735a:	1c43      	adds	r3, r0, #1
 800735c:	d101      	bne.n	8007362 <sbrk_aligned+0x3a>
 800735e:	2501      	movs	r5, #1
 8007360:	426d      	negs	r5, r5
 8007362:	0028      	movs	r0, r5
 8007364:	bd70      	pop	{r4, r5, r6, pc}
 8007366:	46c0      	nop			; (mov r8, r8)
 8007368:	200011f4 	.word	0x200011f4

0800736c <_malloc_r>:
 800736c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800736e:	2203      	movs	r2, #3
 8007370:	1ccb      	adds	r3, r1, #3
 8007372:	4393      	bics	r3, r2
 8007374:	3308      	adds	r3, #8
 8007376:	0006      	movs	r6, r0
 8007378:	001f      	movs	r7, r3
 800737a:	2b0c      	cmp	r3, #12
 800737c:	d232      	bcs.n	80073e4 <_malloc_r+0x78>
 800737e:	270c      	movs	r7, #12
 8007380:	42b9      	cmp	r1, r7
 8007382:	d831      	bhi.n	80073e8 <_malloc_r+0x7c>
 8007384:	0030      	movs	r0, r6
 8007386:	f000 f90d 	bl	80075a4 <__malloc_lock>
 800738a:	4d32      	ldr	r5, [pc, #200]	; (8007454 <_malloc_r+0xe8>)
 800738c:	682b      	ldr	r3, [r5, #0]
 800738e:	001c      	movs	r4, r3
 8007390:	2c00      	cmp	r4, #0
 8007392:	d12e      	bne.n	80073f2 <_malloc_r+0x86>
 8007394:	0039      	movs	r1, r7
 8007396:	0030      	movs	r0, r6
 8007398:	f7ff ffc6 	bl	8007328 <sbrk_aligned>
 800739c:	0004      	movs	r4, r0
 800739e:	1c43      	adds	r3, r0, #1
 80073a0:	d11e      	bne.n	80073e0 <_malloc_r+0x74>
 80073a2:	682c      	ldr	r4, [r5, #0]
 80073a4:	0025      	movs	r5, r4
 80073a6:	2d00      	cmp	r5, #0
 80073a8:	d14a      	bne.n	8007440 <_malloc_r+0xd4>
 80073aa:	6823      	ldr	r3, [r4, #0]
 80073ac:	0029      	movs	r1, r5
 80073ae:	18e3      	adds	r3, r4, r3
 80073b0:	0030      	movs	r0, r6
 80073b2:	9301      	str	r3, [sp, #4]
 80073b4:	f000 f8c4 	bl	8007540 <_sbrk_r>
 80073b8:	9b01      	ldr	r3, [sp, #4]
 80073ba:	4283      	cmp	r3, r0
 80073bc:	d143      	bne.n	8007446 <_malloc_r+0xda>
 80073be:	6823      	ldr	r3, [r4, #0]
 80073c0:	3703      	adds	r7, #3
 80073c2:	1aff      	subs	r7, r7, r3
 80073c4:	2303      	movs	r3, #3
 80073c6:	439f      	bics	r7, r3
 80073c8:	3708      	adds	r7, #8
 80073ca:	2f0c      	cmp	r7, #12
 80073cc:	d200      	bcs.n	80073d0 <_malloc_r+0x64>
 80073ce:	270c      	movs	r7, #12
 80073d0:	0039      	movs	r1, r7
 80073d2:	0030      	movs	r0, r6
 80073d4:	f7ff ffa8 	bl	8007328 <sbrk_aligned>
 80073d8:	1c43      	adds	r3, r0, #1
 80073da:	d034      	beq.n	8007446 <_malloc_r+0xda>
 80073dc:	6823      	ldr	r3, [r4, #0]
 80073de:	19df      	adds	r7, r3, r7
 80073e0:	6027      	str	r7, [r4, #0]
 80073e2:	e013      	b.n	800740c <_malloc_r+0xa0>
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	dacb      	bge.n	8007380 <_malloc_r+0x14>
 80073e8:	230c      	movs	r3, #12
 80073ea:	2500      	movs	r5, #0
 80073ec:	6033      	str	r3, [r6, #0]
 80073ee:	0028      	movs	r0, r5
 80073f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80073f2:	6822      	ldr	r2, [r4, #0]
 80073f4:	1bd1      	subs	r1, r2, r7
 80073f6:	d420      	bmi.n	800743a <_malloc_r+0xce>
 80073f8:	290b      	cmp	r1, #11
 80073fa:	d917      	bls.n	800742c <_malloc_r+0xc0>
 80073fc:	19e2      	adds	r2, r4, r7
 80073fe:	6027      	str	r7, [r4, #0]
 8007400:	42a3      	cmp	r3, r4
 8007402:	d111      	bne.n	8007428 <_malloc_r+0xbc>
 8007404:	602a      	str	r2, [r5, #0]
 8007406:	6863      	ldr	r3, [r4, #4]
 8007408:	6011      	str	r1, [r2, #0]
 800740a:	6053      	str	r3, [r2, #4]
 800740c:	0030      	movs	r0, r6
 800740e:	0025      	movs	r5, r4
 8007410:	f000 f8d0 	bl	80075b4 <__malloc_unlock>
 8007414:	2207      	movs	r2, #7
 8007416:	350b      	adds	r5, #11
 8007418:	1d23      	adds	r3, r4, #4
 800741a:	4395      	bics	r5, r2
 800741c:	1aea      	subs	r2, r5, r3
 800741e:	429d      	cmp	r5, r3
 8007420:	d0e5      	beq.n	80073ee <_malloc_r+0x82>
 8007422:	1b5b      	subs	r3, r3, r5
 8007424:	50a3      	str	r3, [r4, r2]
 8007426:	e7e2      	b.n	80073ee <_malloc_r+0x82>
 8007428:	605a      	str	r2, [r3, #4]
 800742a:	e7ec      	b.n	8007406 <_malloc_r+0x9a>
 800742c:	6862      	ldr	r2, [r4, #4]
 800742e:	42a3      	cmp	r3, r4
 8007430:	d101      	bne.n	8007436 <_malloc_r+0xca>
 8007432:	602a      	str	r2, [r5, #0]
 8007434:	e7ea      	b.n	800740c <_malloc_r+0xa0>
 8007436:	605a      	str	r2, [r3, #4]
 8007438:	e7e8      	b.n	800740c <_malloc_r+0xa0>
 800743a:	0023      	movs	r3, r4
 800743c:	6864      	ldr	r4, [r4, #4]
 800743e:	e7a7      	b.n	8007390 <_malloc_r+0x24>
 8007440:	002c      	movs	r4, r5
 8007442:	686d      	ldr	r5, [r5, #4]
 8007444:	e7af      	b.n	80073a6 <_malloc_r+0x3a>
 8007446:	230c      	movs	r3, #12
 8007448:	0030      	movs	r0, r6
 800744a:	6033      	str	r3, [r6, #0]
 800744c:	f000 f8b2 	bl	80075b4 <__malloc_unlock>
 8007450:	e7cd      	b.n	80073ee <_malloc_r+0x82>
 8007452:	46c0      	nop			; (mov r8, r8)
 8007454:	200011f0 	.word	0x200011f0

08007458 <cleanup_glue>:
 8007458:	b570      	push	{r4, r5, r6, lr}
 800745a:	000d      	movs	r5, r1
 800745c:	6809      	ldr	r1, [r1, #0]
 800745e:	0004      	movs	r4, r0
 8007460:	2900      	cmp	r1, #0
 8007462:	d001      	beq.n	8007468 <cleanup_glue+0x10>
 8007464:	f7ff fff8 	bl	8007458 <cleanup_glue>
 8007468:	0029      	movs	r1, r5
 800746a:	0020      	movs	r0, r4
 800746c:	f000 f8aa 	bl	80075c4 <_free_r>
 8007470:	bd70      	pop	{r4, r5, r6, pc}
	...

08007474 <_reclaim_reent>:
 8007474:	4b31      	ldr	r3, [pc, #196]	; (800753c <_reclaim_reent+0xc8>)
 8007476:	b570      	push	{r4, r5, r6, lr}
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	0004      	movs	r4, r0
 800747c:	4283      	cmp	r3, r0
 800747e:	d049      	beq.n	8007514 <_reclaim_reent+0xa0>
 8007480:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007482:	2b00      	cmp	r3, #0
 8007484:	d00a      	beq.n	800749c <_reclaim_reent+0x28>
 8007486:	2500      	movs	r5, #0
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	42ab      	cmp	r3, r5
 800748c:	d147      	bne.n	800751e <_reclaim_reent+0xaa>
 800748e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007490:	6819      	ldr	r1, [r3, #0]
 8007492:	2900      	cmp	r1, #0
 8007494:	d002      	beq.n	800749c <_reclaim_reent+0x28>
 8007496:	0020      	movs	r0, r4
 8007498:	f000 f894 	bl	80075c4 <_free_r>
 800749c:	6961      	ldr	r1, [r4, #20]
 800749e:	2900      	cmp	r1, #0
 80074a0:	d002      	beq.n	80074a8 <_reclaim_reent+0x34>
 80074a2:	0020      	movs	r0, r4
 80074a4:	f000 f88e 	bl	80075c4 <_free_r>
 80074a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80074aa:	2900      	cmp	r1, #0
 80074ac:	d002      	beq.n	80074b4 <_reclaim_reent+0x40>
 80074ae:	0020      	movs	r0, r4
 80074b0:	f000 f888 	bl	80075c4 <_free_r>
 80074b4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80074b6:	2900      	cmp	r1, #0
 80074b8:	d002      	beq.n	80074c0 <_reclaim_reent+0x4c>
 80074ba:	0020      	movs	r0, r4
 80074bc:	f000 f882 	bl	80075c4 <_free_r>
 80074c0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80074c2:	2900      	cmp	r1, #0
 80074c4:	d002      	beq.n	80074cc <_reclaim_reent+0x58>
 80074c6:	0020      	movs	r0, r4
 80074c8:	f000 f87c 	bl	80075c4 <_free_r>
 80074cc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80074ce:	2900      	cmp	r1, #0
 80074d0:	d002      	beq.n	80074d8 <_reclaim_reent+0x64>
 80074d2:	0020      	movs	r0, r4
 80074d4:	f000 f876 	bl	80075c4 <_free_r>
 80074d8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80074da:	2900      	cmp	r1, #0
 80074dc:	d002      	beq.n	80074e4 <_reclaim_reent+0x70>
 80074de:	0020      	movs	r0, r4
 80074e0:	f000 f870 	bl	80075c4 <_free_r>
 80074e4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80074e6:	2900      	cmp	r1, #0
 80074e8:	d002      	beq.n	80074f0 <_reclaim_reent+0x7c>
 80074ea:	0020      	movs	r0, r4
 80074ec:	f000 f86a 	bl	80075c4 <_free_r>
 80074f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074f2:	2900      	cmp	r1, #0
 80074f4:	d002      	beq.n	80074fc <_reclaim_reent+0x88>
 80074f6:	0020      	movs	r0, r4
 80074f8:	f000 f864 	bl	80075c4 <_free_r>
 80074fc:	69a3      	ldr	r3, [r4, #24]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d008      	beq.n	8007514 <_reclaim_reent+0xa0>
 8007502:	0020      	movs	r0, r4
 8007504:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007506:	4798      	blx	r3
 8007508:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800750a:	2900      	cmp	r1, #0
 800750c:	d002      	beq.n	8007514 <_reclaim_reent+0xa0>
 800750e:	0020      	movs	r0, r4
 8007510:	f7ff ffa2 	bl	8007458 <cleanup_glue>
 8007514:	bd70      	pop	{r4, r5, r6, pc}
 8007516:	5949      	ldr	r1, [r1, r5]
 8007518:	2900      	cmp	r1, #0
 800751a:	d108      	bne.n	800752e <_reclaim_reent+0xba>
 800751c:	3504      	adds	r5, #4
 800751e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007520:	68d9      	ldr	r1, [r3, #12]
 8007522:	2d80      	cmp	r5, #128	; 0x80
 8007524:	d1f7      	bne.n	8007516 <_reclaim_reent+0xa2>
 8007526:	0020      	movs	r0, r4
 8007528:	f000 f84c 	bl	80075c4 <_free_r>
 800752c:	e7af      	b.n	800748e <_reclaim_reent+0x1a>
 800752e:	680e      	ldr	r6, [r1, #0]
 8007530:	0020      	movs	r0, r4
 8007532:	f000 f847 	bl	80075c4 <_free_r>
 8007536:	0031      	movs	r1, r6
 8007538:	e7ee      	b.n	8007518 <_reclaim_reent+0xa4>
 800753a:	46c0      	nop			; (mov r8, r8)
 800753c:	20000010 	.word	0x20000010

08007540 <_sbrk_r>:
 8007540:	2300      	movs	r3, #0
 8007542:	b570      	push	{r4, r5, r6, lr}
 8007544:	4d06      	ldr	r5, [pc, #24]	; (8007560 <_sbrk_r+0x20>)
 8007546:	0004      	movs	r4, r0
 8007548:	0008      	movs	r0, r1
 800754a:	602b      	str	r3, [r5, #0]
 800754c:	f7fb f964 	bl	8002818 <_sbrk>
 8007550:	1c43      	adds	r3, r0, #1
 8007552:	d103      	bne.n	800755c <_sbrk_r+0x1c>
 8007554:	682b      	ldr	r3, [r5, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d000      	beq.n	800755c <_sbrk_r+0x1c>
 800755a:	6023      	str	r3, [r4, #0]
 800755c:	bd70      	pop	{r4, r5, r6, pc}
 800755e:	46c0      	nop			; (mov r8, r8)
 8007560:	200011f8 	.word	0x200011f8

08007564 <siprintf>:
 8007564:	b40e      	push	{r1, r2, r3}
 8007566:	b500      	push	{lr}
 8007568:	490b      	ldr	r1, [pc, #44]	; (8007598 <siprintf+0x34>)
 800756a:	b09c      	sub	sp, #112	; 0x70
 800756c:	ab1d      	add	r3, sp, #116	; 0x74
 800756e:	9002      	str	r0, [sp, #8]
 8007570:	9006      	str	r0, [sp, #24]
 8007572:	9107      	str	r1, [sp, #28]
 8007574:	9104      	str	r1, [sp, #16]
 8007576:	4809      	ldr	r0, [pc, #36]	; (800759c <siprintf+0x38>)
 8007578:	4909      	ldr	r1, [pc, #36]	; (80075a0 <siprintf+0x3c>)
 800757a:	cb04      	ldmia	r3!, {r2}
 800757c:	9105      	str	r1, [sp, #20]
 800757e:	6800      	ldr	r0, [r0, #0]
 8007580:	a902      	add	r1, sp, #8
 8007582:	9301      	str	r3, [sp, #4]
 8007584:	f000 f8ca 	bl	800771c <_svfiprintf_r>
 8007588:	2300      	movs	r3, #0
 800758a:	9a02      	ldr	r2, [sp, #8]
 800758c:	7013      	strb	r3, [r2, #0]
 800758e:	b01c      	add	sp, #112	; 0x70
 8007590:	bc08      	pop	{r3}
 8007592:	b003      	add	sp, #12
 8007594:	4718      	bx	r3
 8007596:	46c0      	nop			; (mov r8, r8)
 8007598:	7fffffff 	.word	0x7fffffff
 800759c:	20000010 	.word	0x20000010
 80075a0:	ffff0208 	.word	0xffff0208

080075a4 <__malloc_lock>:
 80075a4:	b510      	push	{r4, lr}
 80075a6:	4802      	ldr	r0, [pc, #8]	; (80075b0 <__malloc_lock+0xc>)
 80075a8:	f7ff feaa 	bl	8007300 <__retarget_lock_acquire_recursive>
 80075ac:	bd10      	pop	{r4, pc}
 80075ae:	46c0      	nop			; (mov r8, r8)
 80075b0:	200011ec 	.word	0x200011ec

080075b4 <__malloc_unlock>:
 80075b4:	b510      	push	{r4, lr}
 80075b6:	4802      	ldr	r0, [pc, #8]	; (80075c0 <__malloc_unlock+0xc>)
 80075b8:	f7ff fea3 	bl	8007302 <__retarget_lock_release_recursive>
 80075bc:	bd10      	pop	{r4, pc}
 80075be:	46c0      	nop			; (mov r8, r8)
 80075c0:	200011ec 	.word	0x200011ec

080075c4 <_free_r>:
 80075c4:	b570      	push	{r4, r5, r6, lr}
 80075c6:	0005      	movs	r5, r0
 80075c8:	2900      	cmp	r1, #0
 80075ca:	d010      	beq.n	80075ee <_free_r+0x2a>
 80075cc:	1f0c      	subs	r4, r1, #4
 80075ce:	6823      	ldr	r3, [r4, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	da00      	bge.n	80075d6 <_free_r+0x12>
 80075d4:	18e4      	adds	r4, r4, r3
 80075d6:	0028      	movs	r0, r5
 80075d8:	f7ff ffe4 	bl	80075a4 <__malloc_lock>
 80075dc:	4a1d      	ldr	r2, [pc, #116]	; (8007654 <_free_r+0x90>)
 80075de:	6813      	ldr	r3, [r2, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d105      	bne.n	80075f0 <_free_r+0x2c>
 80075e4:	6063      	str	r3, [r4, #4]
 80075e6:	6014      	str	r4, [r2, #0]
 80075e8:	0028      	movs	r0, r5
 80075ea:	f7ff ffe3 	bl	80075b4 <__malloc_unlock>
 80075ee:	bd70      	pop	{r4, r5, r6, pc}
 80075f0:	42a3      	cmp	r3, r4
 80075f2:	d908      	bls.n	8007606 <_free_r+0x42>
 80075f4:	6821      	ldr	r1, [r4, #0]
 80075f6:	1860      	adds	r0, r4, r1
 80075f8:	4283      	cmp	r3, r0
 80075fa:	d1f3      	bne.n	80075e4 <_free_r+0x20>
 80075fc:	6818      	ldr	r0, [r3, #0]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	1841      	adds	r1, r0, r1
 8007602:	6021      	str	r1, [r4, #0]
 8007604:	e7ee      	b.n	80075e4 <_free_r+0x20>
 8007606:	001a      	movs	r2, r3
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d001      	beq.n	8007612 <_free_r+0x4e>
 800760e:	42a3      	cmp	r3, r4
 8007610:	d9f9      	bls.n	8007606 <_free_r+0x42>
 8007612:	6811      	ldr	r1, [r2, #0]
 8007614:	1850      	adds	r0, r2, r1
 8007616:	42a0      	cmp	r0, r4
 8007618:	d10b      	bne.n	8007632 <_free_r+0x6e>
 800761a:	6820      	ldr	r0, [r4, #0]
 800761c:	1809      	adds	r1, r1, r0
 800761e:	1850      	adds	r0, r2, r1
 8007620:	6011      	str	r1, [r2, #0]
 8007622:	4283      	cmp	r3, r0
 8007624:	d1e0      	bne.n	80075e8 <_free_r+0x24>
 8007626:	6818      	ldr	r0, [r3, #0]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	1841      	adds	r1, r0, r1
 800762c:	6011      	str	r1, [r2, #0]
 800762e:	6053      	str	r3, [r2, #4]
 8007630:	e7da      	b.n	80075e8 <_free_r+0x24>
 8007632:	42a0      	cmp	r0, r4
 8007634:	d902      	bls.n	800763c <_free_r+0x78>
 8007636:	230c      	movs	r3, #12
 8007638:	602b      	str	r3, [r5, #0]
 800763a:	e7d5      	b.n	80075e8 <_free_r+0x24>
 800763c:	6821      	ldr	r1, [r4, #0]
 800763e:	1860      	adds	r0, r4, r1
 8007640:	4283      	cmp	r3, r0
 8007642:	d103      	bne.n	800764c <_free_r+0x88>
 8007644:	6818      	ldr	r0, [r3, #0]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	1841      	adds	r1, r0, r1
 800764a:	6021      	str	r1, [r4, #0]
 800764c:	6063      	str	r3, [r4, #4]
 800764e:	6054      	str	r4, [r2, #4]
 8007650:	e7ca      	b.n	80075e8 <_free_r+0x24>
 8007652:	46c0      	nop			; (mov r8, r8)
 8007654:	200011f0 	.word	0x200011f0

08007658 <__ssputs_r>:
 8007658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800765a:	688e      	ldr	r6, [r1, #8]
 800765c:	b085      	sub	sp, #20
 800765e:	0007      	movs	r7, r0
 8007660:	000c      	movs	r4, r1
 8007662:	9203      	str	r2, [sp, #12]
 8007664:	9301      	str	r3, [sp, #4]
 8007666:	429e      	cmp	r6, r3
 8007668:	d83c      	bhi.n	80076e4 <__ssputs_r+0x8c>
 800766a:	2390      	movs	r3, #144	; 0x90
 800766c:	898a      	ldrh	r2, [r1, #12]
 800766e:	00db      	lsls	r3, r3, #3
 8007670:	421a      	tst	r2, r3
 8007672:	d034      	beq.n	80076de <__ssputs_r+0x86>
 8007674:	6909      	ldr	r1, [r1, #16]
 8007676:	6823      	ldr	r3, [r4, #0]
 8007678:	6960      	ldr	r0, [r4, #20]
 800767a:	1a5b      	subs	r3, r3, r1
 800767c:	9302      	str	r3, [sp, #8]
 800767e:	2303      	movs	r3, #3
 8007680:	4343      	muls	r3, r0
 8007682:	0fdd      	lsrs	r5, r3, #31
 8007684:	18ed      	adds	r5, r5, r3
 8007686:	9b01      	ldr	r3, [sp, #4]
 8007688:	9802      	ldr	r0, [sp, #8]
 800768a:	3301      	adds	r3, #1
 800768c:	181b      	adds	r3, r3, r0
 800768e:	106d      	asrs	r5, r5, #1
 8007690:	42ab      	cmp	r3, r5
 8007692:	d900      	bls.n	8007696 <__ssputs_r+0x3e>
 8007694:	001d      	movs	r5, r3
 8007696:	0553      	lsls	r3, r2, #21
 8007698:	d532      	bpl.n	8007700 <__ssputs_r+0xa8>
 800769a:	0029      	movs	r1, r5
 800769c:	0038      	movs	r0, r7
 800769e:	f7ff fe65 	bl	800736c <_malloc_r>
 80076a2:	1e06      	subs	r6, r0, #0
 80076a4:	d109      	bne.n	80076ba <__ssputs_r+0x62>
 80076a6:	230c      	movs	r3, #12
 80076a8:	603b      	str	r3, [r7, #0]
 80076aa:	2340      	movs	r3, #64	; 0x40
 80076ac:	2001      	movs	r0, #1
 80076ae:	89a2      	ldrh	r2, [r4, #12]
 80076b0:	4240      	negs	r0, r0
 80076b2:	4313      	orrs	r3, r2
 80076b4:	81a3      	strh	r3, [r4, #12]
 80076b6:	b005      	add	sp, #20
 80076b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076ba:	9a02      	ldr	r2, [sp, #8]
 80076bc:	6921      	ldr	r1, [r4, #16]
 80076be:	f7ff fe21 	bl	8007304 <memcpy>
 80076c2:	89a3      	ldrh	r3, [r4, #12]
 80076c4:	4a14      	ldr	r2, [pc, #80]	; (8007718 <__ssputs_r+0xc0>)
 80076c6:	401a      	ands	r2, r3
 80076c8:	2380      	movs	r3, #128	; 0x80
 80076ca:	4313      	orrs	r3, r2
 80076cc:	81a3      	strh	r3, [r4, #12]
 80076ce:	9b02      	ldr	r3, [sp, #8]
 80076d0:	6126      	str	r6, [r4, #16]
 80076d2:	18f6      	adds	r6, r6, r3
 80076d4:	6026      	str	r6, [r4, #0]
 80076d6:	6165      	str	r5, [r4, #20]
 80076d8:	9e01      	ldr	r6, [sp, #4]
 80076da:	1aed      	subs	r5, r5, r3
 80076dc:	60a5      	str	r5, [r4, #8]
 80076de:	9b01      	ldr	r3, [sp, #4]
 80076e0:	429e      	cmp	r6, r3
 80076e2:	d900      	bls.n	80076e6 <__ssputs_r+0x8e>
 80076e4:	9e01      	ldr	r6, [sp, #4]
 80076e6:	0032      	movs	r2, r6
 80076e8:	9903      	ldr	r1, [sp, #12]
 80076ea:	6820      	ldr	r0, [r4, #0]
 80076ec:	f000 faa3 	bl	8007c36 <memmove>
 80076f0:	68a3      	ldr	r3, [r4, #8]
 80076f2:	2000      	movs	r0, #0
 80076f4:	1b9b      	subs	r3, r3, r6
 80076f6:	60a3      	str	r3, [r4, #8]
 80076f8:	6823      	ldr	r3, [r4, #0]
 80076fa:	199e      	adds	r6, r3, r6
 80076fc:	6026      	str	r6, [r4, #0]
 80076fe:	e7da      	b.n	80076b6 <__ssputs_r+0x5e>
 8007700:	002a      	movs	r2, r5
 8007702:	0038      	movs	r0, r7
 8007704:	f000 faaa 	bl	8007c5c <_realloc_r>
 8007708:	1e06      	subs	r6, r0, #0
 800770a:	d1e0      	bne.n	80076ce <__ssputs_r+0x76>
 800770c:	0038      	movs	r0, r7
 800770e:	6921      	ldr	r1, [r4, #16]
 8007710:	f7ff ff58 	bl	80075c4 <_free_r>
 8007714:	e7c7      	b.n	80076a6 <__ssputs_r+0x4e>
 8007716:	46c0      	nop			; (mov r8, r8)
 8007718:	fffffb7f 	.word	0xfffffb7f

0800771c <_svfiprintf_r>:
 800771c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800771e:	b0a1      	sub	sp, #132	; 0x84
 8007720:	9003      	str	r0, [sp, #12]
 8007722:	001d      	movs	r5, r3
 8007724:	898b      	ldrh	r3, [r1, #12]
 8007726:	000f      	movs	r7, r1
 8007728:	0016      	movs	r6, r2
 800772a:	061b      	lsls	r3, r3, #24
 800772c:	d511      	bpl.n	8007752 <_svfiprintf_r+0x36>
 800772e:	690b      	ldr	r3, [r1, #16]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d10e      	bne.n	8007752 <_svfiprintf_r+0x36>
 8007734:	2140      	movs	r1, #64	; 0x40
 8007736:	f7ff fe19 	bl	800736c <_malloc_r>
 800773a:	6038      	str	r0, [r7, #0]
 800773c:	6138      	str	r0, [r7, #16]
 800773e:	2800      	cmp	r0, #0
 8007740:	d105      	bne.n	800774e <_svfiprintf_r+0x32>
 8007742:	230c      	movs	r3, #12
 8007744:	9a03      	ldr	r2, [sp, #12]
 8007746:	3801      	subs	r0, #1
 8007748:	6013      	str	r3, [r2, #0]
 800774a:	b021      	add	sp, #132	; 0x84
 800774c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800774e:	2340      	movs	r3, #64	; 0x40
 8007750:	617b      	str	r3, [r7, #20]
 8007752:	2300      	movs	r3, #0
 8007754:	ac08      	add	r4, sp, #32
 8007756:	6163      	str	r3, [r4, #20]
 8007758:	3320      	adds	r3, #32
 800775a:	7663      	strb	r3, [r4, #25]
 800775c:	3310      	adds	r3, #16
 800775e:	76a3      	strb	r3, [r4, #26]
 8007760:	9507      	str	r5, [sp, #28]
 8007762:	0035      	movs	r5, r6
 8007764:	782b      	ldrb	r3, [r5, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d001      	beq.n	800776e <_svfiprintf_r+0x52>
 800776a:	2b25      	cmp	r3, #37	; 0x25
 800776c:	d147      	bne.n	80077fe <_svfiprintf_r+0xe2>
 800776e:	1bab      	subs	r3, r5, r6
 8007770:	9305      	str	r3, [sp, #20]
 8007772:	42b5      	cmp	r5, r6
 8007774:	d00c      	beq.n	8007790 <_svfiprintf_r+0x74>
 8007776:	0032      	movs	r2, r6
 8007778:	0039      	movs	r1, r7
 800777a:	9803      	ldr	r0, [sp, #12]
 800777c:	f7ff ff6c 	bl	8007658 <__ssputs_r>
 8007780:	1c43      	adds	r3, r0, #1
 8007782:	d100      	bne.n	8007786 <_svfiprintf_r+0x6a>
 8007784:	e0ae      	b.n	80078e4 <_svfiprintf_r+0x1c8>
 8007786:	6962      	ldr	r2, [r4, #20]
 8007788:	9b05      	ldr	r3, [sp, #20]
 800778a:	4694      	mov	ip, r2
 800778c:	4463      	add	r3, ip
 800778e:	6163      	str	r3, [r4, #20]
 8007790:	782b      	ldrb	r3, [r5, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d100      	bne.n	8007798 <_svfiprintf_r+0x7c>
 8007796:	e0a5      	b.n	80078e4 <_svfiprintf_r+0x1c8>
 8007798:	2201      	movs	r2, #1
 800779a:	2300      	movs	r3, #0
 800779c:	4252      	negs	r2, r2
 800779e:	6062      	str	r2, [r4, #4]
 80077a0:	a904      	add	r1, sp, #16
 80077a2:	3254      	adds	r2, #84	; 0x54
 80077a4:	1852      	adds	r2, r2, r1
 80077a6:	1c6e      	adds	r6, r5, #1
 80077a8:	6023      	str	r3, [r4, #0]
 80077aa:	60e3      	str	r3, [r4, #12]
 80077ac:	60a3      	str	r3, [r4, #8]
 80077ae:	7013      	strb	r3, [r2, #0]
 80077b0:	65a3      	str	r3, [r4, #88]	; 0x58
 80077b2:	2205      	movs	r2, #5
 80077b4:	7831      	ldrb	r1, [r6, #0]
 80077b6:	4854      	ldr	r0, [pc, #336]	; (8007908 <_svfiprintf_r+0x1ec>)
 80077b8:	f000 fa32 	bl	8007c20 <memchr>
 80077bc:	1c75      	adds	r5, r6, #1
 80077be:	2800      	cmp	r0, #0
 80077c0:	d11f      	bne.n	8007802 <_svfiprintf_r+0xe6>
 80077c2:	6822      	ldr	r2, [r4, #0]
 80077c4:	06d3      	lsls	r3, r2, #27
 80077c6:	d504      	bpl.n	80077d2 <_svfiprintf_r+0xb6>
 80077c8:	2353      	movs	r3, #83	; 0x53
 80077ca:	a904      	add	r1, sp, #16
 80077cc:	185b      	adds	r3, r3, r1
 80077ce:	2120      	movs	r1, #32
 80077d0:	7019      	strb	r1, [r3, #0]
 80077d2:	0713      	lsls	r3, r2, #28
 80077d4:	d504      	bpl.n	80077e0 <_svfiprintf_r+0xc4>
 80077d6:	2353      	movs	r3, #83	; 0x53
 80077d8:	a904      	add	r1, sp, #16
 80077da:	185b      	adds	r3, r3, r1
 80077dc:	212b      	movs	r1, #43	; 0x2b
 80077de:	7019      	strb	r1, [r3, #0]
 80077e0:	7833      	ldrb	r3, [r6, #0]
 80077e2:	2b2a      	cmp	r3, #42	; 0x2a
 80077e4:	d016      	beq.n	8007814 <_svfiprintf_r+0xf8>
 80077e6:	0035      	movs	r5, r6
 80077e8:	2100      	movs	r1, #0
 80077ea:	200a      	movs	r0, #10
 80077ec:	68e3      	ldr	r3, [r4, #12]
 80077ee:	782a      	ldrb	r2, [r5, #0]
 80077f0:	1c6e      	adds	r6, r5, #1
 80077f2:	3a30      	subs	r2, #48	; 0x30
 80077f4:	2a09      	cmp	r2, #9
 80077f6:	d94e      	bls.n	8007896 <_svfiprintf_r+0x17a>
 80077f8:	2900      	cmp	r1, #0
 80077fa:	d111      	bne.n	8007820 <_svfiprintf_r+0x104>
 80077fc:	e017      	b.n	800782e <_svfiprintf_r+0x112>
 80077fe:	3501      	adds	r5, #1
 8007800:	e7b0      	b.n	8007764 <_svfiprintf_r+0x48>
 8007802:	4b41      	ldr	r3, [pc, #260]	; (8007908 <_svfiprintf_r+0x1ec>)
 8007804:	6822      	ldr	r2, [r4, #0]
 8007806:	1ac0      	subs	r0, r0, r3
 8007808:	2301      	movs	r3, #1
 800780a:	4083      	lsls	r3, r0
 800780c:	4313      	orrs	r3, r2
 800780e:	002e      	movs	r6, r5
 8007810:	6023      	str	r3, [r4, #0]
 8007812:	e7ce      	b.n	80077b2 <_svfiprintf_r+0x96>
 8007814:	9b07      	ldr	r3, [sp, #28]
 8007816:	1d19      	adds	r1, r3, #4
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	9107      	str	r1, [sp, #28]
 800781c:	2b00      	cmp	r3, #0
 800781e:	db01      	blt.n	8007824 <_svfiprintf_r+0x108>
 8007820:	930b      	str	r3, [sp, #44]	; 0x2c
 8007822:	e004      	b.n	800782e <_svfiprintf_r+0x112>
 8007824:	425b      	negs	r3, r3
 8007826:	60e3      	str	r3, [r4, #12]
 8007828:	2302      	movs	r3, #2
 800782a:	4313      	orrs	r3, r2
 800782c:	6023      	str	r3, [r4, #0]
 800782e:	782b      	ldrb	r3, [r5, #0]
 8007830:	2b2e      	cmp	r3, #46	; 0x2e
 8007832:	d10a      	bne.n	800784a <_svfiprintf_r+0x12e>
 8007834:	786b      	ldrb	r3, [r5, #1]
 8007836:	2b2a      	cmp	r3, #42	; 0x2a
 8007838:	d135      	bne.n	80078a6 <_svfiprintf_r+0x18a>
 800783a:	9b07      	ldr	r3, [sp, #28]
 800783c:	3502      	adds	r5, #2
 800783e:	1d1a      	adds	r2, r3, #4
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	9207      	str	r2, [sp, #28]
 8007844:	2b00      	cmp	r3, #0
 8007846:	db2b      	blt.n	80078a0 <_svfiprintf_r+0x184>
 8007848:	9309      	str	r3, [sp, #36]	; 0x24
 800784a:	4e30      	ldr	r6, [pc, #192]	; (800790c <_svfiprintf_r+0x1f0>)
 800784c:	2203      	movs	r2, #3
 800784e:	0030      	movs	r0, r6
 8007850:	7829      	ldrb	r1, [r5, #0]
 8007852:	f000 f9e5 	bl	8007c20 <memchr>
 8007856:	2800      	cmp	r0, #0
 8007858:	d006      	beq.n	8007868 <_svfiprintf_r+0x14c>
 800785a:	2340      	movs	r3, #64	; 0x40
 800785c:	1b80      	subs	r0, r0, r6
 800785e:	4083      	lsls	r3, r0
 8007860:	6822      	ldr	r2, [r4, #0]
 8007862:	3501      	adds	r5, #1
 8007864:	4313      	orrs	r3, r2
 8007866:	6023      	str	r3, [r4, #0]
 8007868:	7829      	ldrb	r1, [r5, #0]
 800786a:	2206      	movs	r2, #6
 800786c:	4828      	ldr	r0, [pc, #160]	; (8007910 <_svfiprintf_r+0x1f4>)
 800786e:	1c6e      	adds	r6, r5, #1
 8007870:	7621      	strb	r1, [r4, #24]
 8007872:	f000 f9d5 	bl	8007c20 <memchr>
 8007876:	2800      	cmp	r0, #0
 8007878:	d03c      	beq.n	80078f4 <_svfiprintf_r+0x1d8>
 800787a:	4b26      	ldr	r3, [pc, #152]	; (8007914 <_svfiprintf_r+0x1f8>)
 800787c:	2b00      	cmp	r3, #0
 800787e:	d125      	bne.n	80078cc <_svfiprintf_r+0x1b0>
 8007880:	2207      	movs	r2, #7
 8007882:	9b07      	ldr	r3, [sp, #28]
 8007884:	3307      	adds	r3, #7
 8007886:	4393      	bics	r3, r2
 8007888:	3308      	adds	r3, #8
 800788a:	9307      	str	r3, [sp, #28]
 800788c:	6963      	ldr	r3, [r4, #20]
 800788e:	9a04      	ldr	r2, [sp, #16]
 8007890:	189b      	adds	r3, r3, r2
 8007892:	6163      	str	r3, [r4, #20]
 8007894:	e765      	b.n	8007762 <_svfiprintf_r+0x46>
 8007896:	4343      	muls	r3, r0
 8007898:	0035      	movs	r5, r6
 800789a:	2101      	movs	r1, #1
 800789c:	189b      	adds	r3, r3, r2
 800789e:	e7a6      	b.n	80077ee <_svfiprintf_r+0xd2>
 80078a0:	2301      	movs	r3, #1
 80078a2:	425b      	negs	r3, r3
 80078a4:	e7d0      	b.n	8007848 <_svfiprintf_r+0x12c>
 80078a6:	2300      	movs	r3, #0
 80078a8:	200a      	movs	r0, #10
 80078aa:	001a      	movs	r2, r3
 80078ac:	3501      	adds	r5, #1
 80078ae:	6063      	str	r3, [r4, #4]
 80078b0:	7829      	ldrb	r1, [r5, #0]
 80078b2:	1c6e      	adds	r6, r5, #1
 80078b4:	3930      	subs	r1, #48	; 0x30
 80078b6:	2909      	cmp	r1, #9
 80078b8:	d903      	bls.n	80078c2 <_svfiprintf_r+0x1a6>
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d0c5      	beq.n	800784a <_svfiprintf_r+0x12e>
 80078be:	9209      	str	r2, [sp, #36]	; 0x24
 80078c0:	e7c3      	b.n	800784a <_svfiprintf_r+0x12e>
 80078c2:	4342      	muls	r2, r0
 80078c4:	0035      	movs	r5, r6
 80078c6:	2301      	movs	r3, #1
 80078c8:	1852      	adds	r2, r2, r1
 80078ca:	e7f1      	b.n	80078b0 <_svfiprintf_r+0x194>
 80078cc:	ab07      	add	r3, sp, #28
 80078ce:	9300      	str	r3, [sp, #0]
 80078d0:	003a      	movs	r2, r7
 80078d2:	0021      	movs	r1, r4
 80078d4:	4b10      	ldr	r3, [pc, #64]	; (8007918 <_svfiprintf_r+0x1fc>)
 80078d6:	9803      	ldr	r0, [sp, #12]
 80078d8:	e000      	b.n	80078dc <_svfiprintf_r+0x1c0>
 80078da:	bf00      	nop
 80078dc:	9004      	str	r0, [sp, #16]
 80078de:	9b04      	ldr	r3, [sp, #16]
 80078e0:	3301      	adds	r3, #1
 80078e2:	d1d3      	bne.n	800788c <_svfiprintf_r+0x170>
 80078e4:	89bb      	ldrh	r3, [r7, #12]
 80078e6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80078e8:	065b      	lsls	r3, r3, #25
 80078ea:	d400      	bmi.n	80078ee <_svfiprintf_r+0x1d2>
 80078ec:	e72d      	b.n	800774a <_svfiprintf_r+0x2e>
 80078ee:	2001      	movs	r0, #1
 80078f0:	4240      	negs	r0, r0
 80078f2:	e72a      	b.n	800774a <_svfiprintf_r+0x2e>
 80078f4:	ab07      	add	r3, sp, #28
 80078f6:	9300      	str	r3, [sp, #0]
 80078f8:	003a      	movs	r2, r7
 80078fa:	0021      	movs	r1, r4
 80078fc:	4b06      	ldr	r3, [pc, #24]	; (8007918 <_svfiprintf_r+0x1fc>)
 80078fe:	9803      	ldr	r0, [sp, #12]
 8007900:	f000 f87c 	bl	80079fc <_printf_i>
 8007904:	e7ea      	b.n	80078dc <_svfiprintf_r+0x1c0>
 8007906:	46c0      	nop			; (mov r8, r8)
 8007908:	08007f20 	.word	0x08007f20
 800790c:	08007f26 	.word	0x08007f26
 8007910:	08007f2a 	.word	0x08007f2a
 8007914:	00000000 	.word	0x00000000
 8007918:	08007659 	.word	0x08007659

0800791c <_printf_common>:
 800791c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800791e:	0015      	movs	r5, r2
 8007920:	9301      	str	r3, [sp, #4]
 8007922:	688a      	ldr	r2, [r1, #8]
 8007924:	690b      	ldr	r3, [r1, #16]
 8007926:	000c      	movs	r4, r1
 8007928:	9000      	str	r0, [sp, #0]
 800792a:	4293      	cmp	r3, r2
 800792c:	da00      	bge.n	8007930 <_printf_common+0x14>
 800792e:	0013      	movs	r3, r2
 8007930:	0022      	movs	r2, r4
 8007932:	602b      	str	r3, [r5, #0]
 8007934:	3243      	adds	r2, #67	; 0x43
 8007936:	7812      	ldrb	r2, [r2, #0]
 8007938:	2a00      	cmp	r2, #0
 800793a:	d001      	beq.n	8007940 <_printf_common+0x24>
 800793c:	3301      	adds	r3, #1
 800793e:	602b      	str	r3, [r5, #0]
 8007940:	6823      	ldr	r3, [r4, #0]
 8007942:	069b      	lsls	r3, r3, #26
 8007944:	d502      	bpl.n	800794c <_printf_common+0x30>
 8007946:	682b      	ldr	r3, [r5, #0]
 8007948:	3302      	adds	r3, #2
 800794a:	602b      	str	r3, [r5, #0]
 800794c:	6822      	ldr	r2, [r4, #0]
 800794e:	2306      	movs	r3, #6
 8007950:	0017      	movs	r7, r2
 8007952:	401f      	ands	r7, r3
 8007954:	421a      	tst	r2, r3
 8007956:	d027      	beq.n	80079a8 <_printf_common+0x8c>
 8007958:	0023      	movs	r3, r4
 800795a:	3343      	adds	r3, #67	; 0x43
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	1e5a      	subs	r2, r3, #1
 8007960:	4193      	sbcs	r3, r2
 8007962:	6822      	ldr	r2, [r4, #0]
 8007964:	0692      	lsls	r2, r2, #26
 8007966:	d430      	bmi.n	80079ca <_printf_common+0xae>
 8007968:	0022      	movs	r2, r4
 800796a:	9901      	ldr	r1, [sp, #4]
 800796c:	9800      	ldr	r0, [sp, #0]
 800796e:	9e08      	ldr	r6, [sp, #32]
 8007970:	3243      	adds	r2, #67	; 0x43
 8007972:	47b0      	blx	r6
 8007974:	1c43      	adds	r3, r0, #1
 8007976:	d025      	beq.n	80079c4 <_printf_common+0xa8>
 8007978:	2306      	movs	r3, #6
 800797a:	6820      	ldr	r0, [r4, #0]
 800797c:	682a      	ldr	r2, [r5, #0]
 800797e:	68e1      	ldr	r1, [r4, #12]
 8007980:	2500      	movs	r5, #0
 8007982:	4003      	ands	r3, r0
 8007984:	2b04      	cmp	r3, #4
 8007986:	d103      	bne.n	8007990 <_printf_common+0x74>
 8007988:	1a8d      	subs	r5, r1, r2
 800798a:	43eb      	mvns	r3, r5
 800798c:	17db      	asrs	r3, r3, #31
 800798e:	401d      	ands	r5, r3
 8007990:	68a3      	ldr	r3, [r4, #8]
 8007992:	6922      	ldr	r2, [r4, #16]
 8007994:	4293      	cmp	r3, r2
 8007996:	dd01      	ble.n	800799c <_printf_common+0x80>
 8007998:	1a9b      	subs	r3, r3, r2
 800799a:	18ed      	adds	r5, r5, r3
 800799c:	2700      	movs	r7, #0
 800799e:	42bd      	cmp	r5, r7
 80079a0:	d120      	bne.n	80079e4 <_printf_common+0xc8>
 80079a2:	2000      	movs	r0, #0
 80079a4:	e010      	b.n	80079c8 <_printf_common+0xac>
 80079a6:	3701      	adds	r7, #1
 80079a8:	68e3      	ldr	r3, [r4, #12]
 80079aa:	682a      	ldr	r2, [r5, #0]
 80079ac:	1a9b      	subs	r3, r3, r2
 80079ae:	42bb      	cmp	r3, r7
 80079b0:	ddd2      	ble.n	8007958 <_printf_common+0x3c>
 80079b2:	0022      	movs	r2, r4
 80079b4:	2301      	movs	r3, #1
 80079b6:	9901      	ldr	r1, [sp, #4]
 80079b8:	9800      	ldr	r0, [sp, #0]
 80079ba:	9e08      	ldr	r6, [sp, #32]
 80079bc:	3219      	adds	r2, #25
 80079be:	47b0      	blx	r6
 80079c0:	1c43      	adds	r3, r0, #1
 80079c2:	d1f0      	bne.n	80079a6 <_printf_common+0x8a>
 80079c4:	2001      	movs	r0, #1
 80079c6:	4240      	negs	r0, r0
 80079c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80079ca:	2030      	movs	r0, #48	; 0x30
 80079cc:	18e1      	adds	r1, r4, r3
 80079ce:	3143      	adds	r1, #67	; 0x43
 80079d0:	7008      	strb	r0, [r1, #0]
 80079d2:	0021      	movs	r1, r4
 80079d4:	1c5a      	adds	r2, r3, #1
 80079d6:	3145      	adds	r1, #69	; 0x45
 80079d8:	7809      	ldrb	r1, [r1, #0]
 80079da:	18a2      	adds	r2, r4, r2
 80079dc:	3243      	adds	r2, #67	; 0x43
 80079de:	3302      	adds	r3, #2
 80079e0:	7011      	strb	r1, [r2, #0]
 80079e2:	e7c1      	b.n	8007968 <_printf_common+0x4c>
 80079e4:	0022      	movs	r2, r4
 80079e6:	2301      	movs	r3, #1
 80079e8:	9901      	ldr	r1, [sp, #4]
 80079ea:	9800      	ldr	r0, [sp, #0]
 80079ec:	9e08      	ldr	r6, [sp, #32]
 80079ee:	321a      	adds	r2, #26
 80079f0:	47b0      	blx	r6
 80079f2:	1c43      	adds	r3, r0, #1
 80079f4:	d0e6      	beq.n	80079c4 <_printf_common+0xa8>
 80079f6:	3701      	adds	r7, #1
 80079f8:	e7d1      	b.n	800799e <_printf_common+0x82>
	...

080079fc <_printf_i>:
 80079fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079fe:	b08b      	sub	sp, #44	; 0x2c
 8007a00:	9206      	str	r2, [sp, #24]
 8007a02:	000a      	movs	r2, r1
 8007a04:	3243      	adds	r2, #67	; 0x43
 8007a06:	9307      	str	r3, [sp, #28]
 8007a08:	9005      	str	r0, [sp, #20]
 8007a0a:	9204      	str	r2, [sp, #16]
 8007a0c:	7e0a      	ldrb	r2, [r1, #24]
 8007a0e:	000c      	movs	r4, r1
 8007a10:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a12:	2a78      	cmp	r2, #120	; 0x78
 8007a14:	d807      	bhi.n	8007a26 <_printf_i+0x2a>
 8007a16:	2a62      	cmp	r2, #98	; 0x62
 8007a18:	d809      	bhi.n	8007a2e <_printf_i+0x32>
 8007a1a:	2a00      	cmp	r2, #0
 8007a1c:	d100      	bne.n	8007a20 <_printf_i+0x24>
 8007a1e:	e0c1      	b.n	8007ba4 <_printf_i+0x1a8>
 8007a20:	2a58      	cmp	r2, #88	; 0x58
 8007a22:	d100      	bne.n	8007a26 <_printf_i+0x2a>
 8007a24:	e08c      	b.n	8007b40 <_printf_i+0x144>
 8007a26:	0026      	movs	r6, r4
 8007a28:	3642      	adds	r6, #66	; 0x42
 8007a2a:	7032      	strb	r2, [r6, #0]
 8007a2c:	e022      	b.n	8007a74 <_printf_i+0x78>
 8007a2e:	0010      	movs	r0, r2
 8007a30:	3863      	subs	r0, #99	; 0x63
 8007a32:	2815      	cmp	r0, #21
 8007a34:	d8f7      	bhi.n	8007a26 <_printf_i+0x2a>
 8007a36:	f7f8 fb67 	bl	8000108 <__gnu_thumb1_case_shi>
 8007a3a:	0016      	.short	0x0016
 8007a3c:	fff6001f 	.word	0xfff6001f
 8007a40:	fff6fff6 	.word	0xfff6fff6
 8007a44:	001ffff6 	.word	0x001ffff6
 8007a48:	fff6fff6 	.word	0xfff6fff6
 8007a4c:	fff6fff6 	.word	0xfff6fff6
 8007a50:	003600a8 	.word	0x003600a8
 8007a54:	fff6009a 	.word	0xfff6009a
 8007a58:	00b9fff6 	.word	0x00b9fff6
 8007a5c:	0036fff6 	.word	0x0036fff6
 8007a60:	fff6fff6 	.word	0xfff6fff6
 8007a64:	009e      	.short	0x009e
 8007a66:	0026      	movs	r6, r4
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	3642      	adds	r6, #66	; 0x42
 8007a6c:	1d11      	adds	r1, r2, #4
 8007a6e:	6019      	str	r1, [r3, #0]
 8007a70:	6813      	ldr	r3, [r2, #0]
 8007a72:	7033      	strb	r3, [r6, #0]
 8007a74:	2301      	movs	r3, #1
 8007a76:	e0a7      	b.n	8007bc8 <_printf_i+0x1cc>
 8007a78:	6808      	ldr	r0, [r1, #0]
 8007a7a:	6819      	ldr	r1, [r3, #0]
 8007a7c:	1d0a      	adds	r2, r1, #4
 8007a7e:	0605      	lsls	r5, r0, #24
 8007a80:	d50b      	bpl.n	8007a9a <_printf_i+0x9e>
 8007a82:	680d      	ldr	r5, [r1, #0]
 8007a84:	601a      	str	r2, [r3, #0]
 8007a86:	2d00      	cmp	r5, #0
 8007a88:	da03      	bge.n	8007a92 <_printf_i+0x96>
 8007a8a:	232d      	movs	r3, #45	; 0x2d
 8007a8c:	9a04      	ldr	r2, [sp, #16]
 8007a8e:	426d      	negs	r5, r5
 8007a90:	7013      	strb	r3, [r2, #0]
 8007a92:	4b61      	ldr	r3, [pc, #388]	; (8007c18 <_printf_i+0x21c>)
 8007a94:	270a      	movs	r7, #10
 8007a96:	9303      	str	r3, [sp, #12]
 8007a98:	e01b      	b.n	8007ad2 <_printf_i+0xd6>
 8007a9a:	680d      	ldr	r5, [r1, #0]
 8007a9c:	601a      	str	r2, [r3, #0]
 8007a9e:	0641      	lsls	r1, r0, #25
 8007aa0:	d5f1      	bpl.n	8007a86 <_printf_i+0x8a>
 8007aa2:	b22d      	sxth	r5, r5
 8007aa4:	e7ef      	b.n	8007a86 <_printf_i+0x8a>
 8007aa6:	680d      	ldr	r5, [r1, #0]
 8007aa8:	6819      	ldr	r1, [r3, #0]
 8007aaa:	1d08      	adds	r0, r1, #4
 8007aac:	6018      	str	r0, [r3, #0]
 8007aae:	062e      	lsls	r6, r5, #24
 8007ab0:	d501      	bpl.n	8007ab6 <_printf_i+0xba>
 8007ab2:	680d      	ldr	r5, [r1, #0]
 8007ab4:	e003      	b.n	8007abe <_printf_i+0xc2>
 8007ab6:	066d      	lsls	r5, r5, #25
 8007ab8:	d5fb      	bpl.n	8007ab2 <_printf_i+0xb6>
 8007aba:	680d      	ldr	r5, [r1, #0]
 8007abc:	b2ad      	uxth	r5, r5
 8007abe:	4b56      	ldr	r3, [pc, #344]	; (8007c18 <_printf_i+0x21c>)
 8007ac0:	2708      	movs	r7, #8
 8007ac2:	9303      	str	r3, [sp, #12]
 8007ac4:	2a6f      	cmp	r2, #111	; 0x6f
 8007ac6:	d000      	beq.n	8007aca <_printf_i+0xce>
 8007ac8:	3702      	adds	r7, #2
 8007aca:	0023      	movs	r3, r4
 8007acc:	2200      	movs	r2, #0
 8007ace:	3343      	adds	r3, #67	; 0x43
 8007ad0:	701a      	strb	r2, [r3, #0]
 8007ad2:	6863      	ldr	r3, [r4, #4]
 8007ad4:	60a3      	str	r3, [r4, #8]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	db03      	blt.n	8007ae2 <_printf_i+0xe6>
 8007ada:	2204      	movs	r2, #4
 8007adc:	6821      	ldr	r1, [r4, #0]
 8007ade:	4391      	bics	r1, r2
 8007ae0:	6021      	str	r1, [r4, #0]
 8007ae2:	2d00      	cmp	r5, #0
 8007ae4:	d102      	bne.n	8007aec <_printf_i+0xf0>
 8007ae6:	9e04      	ldr	r6, [sp, #16]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00c      	beq.n	8007b06 <_printf_i+0x10a>
 8007aec:	9e04      	ldr	r6, [sp, #16]
 8007aee:	0028      	movs	r0, r5
 8007af0:	0039      	movs	r1, r7
 8007af2:	f7f8 fb99 	bl	8000228 <__aeabi_uidivmod>
 8007af6:	9b03      	ldr	r3, [sp, #12]
 8007af8:	3e01      	subs	r6, #1
 8007afa:	5c5b      	ldrb	r3, [r3, r1]
 8007afc:	7033      	strb	r3, [r6, #0]
 8007afe:	002b      	movs	r3, r5
 8007b00:	0005      	movs	r5, r0
 8007b02:	429f      	cmp	r7, r3
 8007b04:	d9f3      	bls.n	8007aee <_printf_i+0xf2>
 8007b06:	2f08      	cmp	r7, #8
 8007b08:	d109      	bne.n	8007b1e <_printf_i+0x122>
 8007b0a:	6823      	ldr	r3, [r4, #0]
 8007b0c:	07db      	lsls	r3, r3, #31
 8007b0e:	d506      	bpl.n	8007b1e <_printf_i+0x122>
 8007b10:	6863      	ldr	r3, [r4, #4]
 8007b12:	6922      	ldr	r2, [r4, #16]
 8007b14:	4293      	cmp	r3, r2
 8007b16:	dc02      	bgt.n	8007b1e <_printf_i+0x122>
 8007b18:	2330      	movs	r3, #48	; 0x30
 8007b1a:	3e01      	subs	r6, #1
 8007b1c:	7033      	strb	r3, [r6, #0]
 8007b1e:	9b04      	ldr	r3, [sp, #16]
 8007b20:	1b9b      	subs	r3, r3, r6
 8007b22:	6123      	str	r3, [r4, #16]
 8007b24:	9b07      	ldr	r3, [sp, #28]
 8007b26:	0021      	movs	r1, r4
 8007b28:	9300      	str	r3, [sp, #0]
 8007b2a:	9805      	ldr	r0, [sp, #20]
 8007b2c:	9b06      	ldr	r3, [sp, #24]
 8007b2e:	aa09      	add	r2, sp, #36	; 0x24
 8007b30:	f7ff fef4 	bl	800791c <_printf_common>
 8007b34:	1c43      	adds	r3, r0, #1
 8007b36:	d14c      	bne.n	8007bd2 <_printf_i+0x1d6>
 8007b38:	2001      	movs	r0, #1
 8007b3a:	4240      	negs	r0, r0
 8007b3c:	b00b      	add	sp, #44	; 0x2c
 8007b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b40:	3145      	adds	r1, #69	; 0x45
 8007b42:	700a      	strb	r2, [r1, #0]
 8007b44:	4a34      	ldr	r2, [pc, #208]	; (8007c18 <_printf_i+0x21c>)
 8007b46:	9203      	str	r2, [sp, #12]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	6821      	ldr	r1, [r4, #0]
 8007b4c:	ca20      	ldmia	r2!, {r5}
 8007b4e:	601a      	str	r2, [r3, #0]
 8007b50:	0608      	lsls	r0, r1, #24
 8007b52:	d516      	bpl.n	8007b82 <_printf_i+0x186>
 8007b54:	07cb      	lsls	r3, r1, #31
 8007b56:	d502      	bpl.n	8007b5e <_printf_i+0x162>
 8007b58:	2320      	movs	r3, #32
 8007b5a:	4319      	orrs	r1, r3
 8007b5c:	6021      	str	r1, [r4, #0]
 8007b5e:	2710      	movs	r7, #16
 8007b60:	2d00      	cmp	r5, #0
 8007b62:	d1b2      	bne.n	8007aca <_printf_i+0xce>
 8007b64:	2320      	movs	r3, #32
 8007b66:	6822      	ldr	r2, [r4, #0]
 8007b68:	439a      	bics	r2, r3
 8007b6a:	6022      	str	r2, [r4, #0]
 8007b6c:	e7ad      	b.n	8007aca <_printf_i+0xce>
 8007b6e:	2220      	movs	r2, #32
 8007b70:	6809      	ldr	r1, [r1, #0]
 8007b72:	430a      	orrs	r2, r1
 8007b74:	6022      	str	r2, [r4, #0]
 8007b76:	0022      	movs	r2, r4
 8007b78:	2178      	movs	r1, #120	; 0x78
 8007b7a:	3245      	adds	r2, #69	; 0x45
 8007b7c:	7011      	strb	r1, [r2, #0]
 8007b7e:	4a27      	ldr	r2, [pc, #156]	; (8007c1c <_printf_i+0x220>)
 8007b80:	e7e1      	b.n	8007b46 <_printf_i+0x14a>
 8007b82:	0648      	lsls	r0, r1, #25
 8007b84:	d5e6      	bpl.n	8007b54 <_printf_i+0x158>
 8007b86:	b2ad      	uxth	r5, r5
 8007b88:	e7e4      	b.n	8007b54 <_printf_i+0x158>
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	680d      	ldr	r5, [r1, #0]
 8007b8e:	1d10      	adds	r0, r2, #4
 8007b90:	6949      	ldr	r1, [r1, #20]
 8007b92:	6018      	str	r0, [r3, #0]
 8007b94:	6813      	ldr	r3, [r2, #0]
 8007b96:	062e      	lsls	r6, r5, #24
 8007b98:	d501      	bpl.n	8007b9e <_printf_i+0x1a2>
 8007b9a:	6019      	str	r1, [r3, #0]
 8007b9c:	e002      	b.n	8007ba4 <_printf_i+0x1a8>
 8007b9e:	066d      	lsls	r5, r5, #25
 8007ba0:	d5fb      	bpl.n	8007b9a <_printf_i+0x19e>
 8007ba2:	8019      	strh	r1, [r3, #0]
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	9e04      	ldr	r6, [sp, #16]
 8007ba8:	6123      	str	r3, [r4, #16]
 8007baa:	e7bb      	b.n	8007b24 <_printf_i+0x128>
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	1d11      	adds	r1, r2, #4
 8007bb0:	6019      	str	r1, [r3, #0]
 8007bb2:	6816      	ldr	r6, [r2, #0]
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	0030      	movs	r0, r6
 8007bb8:	6862      	ldr	r2, [r4, #4]
 8007bba:	f000 f831 	bl	8007c20 <memchr>
 8007bbe:	2800      	cmp	r0, #0
 8007bc0:	d001      	beq.n	8007bc6 <_printf_i+0x1ca>
 8007bc2:	1b80      	subs	r0, r0, r6
 8007bc4:	6060      	str	r0, [r4, #4]
 8007bc6:	6863      	ldr	r3, [r4, #4]
 8007bc8:	6123      	str	r3, [r4, #16]
 8007bca:	2300      	movs	r3, #0
 8007bcc:	9a04      	ldr	r2, [sp, #16]
 8007bce:	7013      	strb	r3, [r2, #0]
 8007bd0:	e7a8      	b.n	8007b24 <_printf_i+0x128>
 8007bd2:	6923      	ldr	r3, [r4, #16]
 8007bd4:	0032      	movs	r2, r6
 8007bd6:	9906      	ldr	r1, [sp, #24]
 8007bd8:	9805      	ldr	r0, [sp, #20]
 8007bda:	9d07      	ldr	r5, [sp, #28]
 8007bdc:	47a8      	blx	r5
 8007bde:	1c43      	adds	r3, r0, #1
 8007be0:	d0aa      	beq.n	8007b38 <_printf_i+0x13c>
 8007be2:	6823      	ldr	r3, [r4, #0]
 8007be4:	079b      	lsls	r3, r3, #30
 8007be6:	d415      	bmi.n	8007c14 <_printf_i+0x218>
 8007be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bea:	68e0      	ldr	r0, [r4, #12]
 8007bec:	4298      	cmp	r0, r3
 8007bee:	daa5      	bge.n	8007b3c <_printf_i+0x140>
 8007bf0:	0018      	movs	r0, r3
 8007bf2:	e7a3      	b.n	8007b3c <_printf_i+0x140>
 8007bf4:	0022      	movs	r2, r4
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	9906      	ldr	r1, [sp, #24]
 8007bfa:	9805      	ldr	r0, [sp, #20]
 8007bfc:	9e07      	ldr	r6, [sp, #28]
 8007bfe:	3219      	adds	r2, #25
 8007c00:	47b0      	blx	r6
 8007c02:	1c43      	adds	r3, r0, #1
 8007c04:	d098      	beq.n	8007b38 <_printf_i+0x13c>
 8007c06:	3501      	adds	r5, #1
 8007c08:	68e3      	ldr	r3, [r4, #12]
 8007c0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c0c:	1a9b      	subs	r3, r3, r2
 8007c0e:	42ab      	cmp	r3, r5
 8007c10:	dcf0      	bgt.n	8007bf4 <_printf_i+0x1f8>
 8007c12:	e7e9      	b.n	8007be8 <_printf_i+0x1ec>
 8007c14:	2500      	movs	r5, #0
 8007c16:	e7f7      	b.n	8007c08 <_printf_i+0x20c>
 8007c18:	08007f31 	.word	0x08007f31
 8007c1c:	08007f42 	.word	0x08007f42

08007c20 <memchr>:
 8007c20:	b2c9      	uxtb	r1, r1
 8007c22:	1882      	adds	r2, r0, r2
 8007c24:	4290      	cmp	r0, r2
 8007c26:	d101      	bne.n	8007c2c <memchr+0xc>
 8007c28:	2000      	movs	r0, #0
 8007c2a:	4770      	bx	lr
 8007c2c:	7803      	ldrb	r3, [r0, #0]
 8007c2e:	428b      	cmp	r3, r1
 8007c30:	d0fb      	beq.n	8007c2a <memchr+0xa>
 8007c32:	3001      	adds	r0, #1
 8007c34:	e7f6      	b.n	8007c24 <memchr+0x4>

08007c36 <memmove>:
 8007c36:	b510      	push	{r4, lr}
 8007c38:	4288      	cmp	r0, r1
 8007c3a:	d902      	bls.n	8007c42 <memmove+0xc>
 8007c3c:	188b      	adds	r3, r1, r2
 8007c3e:	4298      	cmp	r0, r3
 8007c40:	d303      	bcc.n	8007c4a <memmove+0x14>
 8007c42:	2300      	movs	r3, #0
 8007c44:	e007      	b.n	8007c56 <memmove+0x20>
 8007c46:	5c8b      	ldrb	r3, [r1, r2]
 8007c48:	5483      	strb	r3, [r0, r2]
 8007c4a:	3a01      	subs	r2, #1
 8007c4c:	d2fb      	bcs.n	8007c46 <memmove+0x10>
 8007c4e:	bd10      	pop	{r4, pc}
 8007c50:	5ccc      	ldrb	r4, [r1, r3]
 8007c52:	54c4      	strb	r4, [r0, r3]
 8007c54:	3301      	adds	r3, #1
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d1fa      	bne.n	8007c50 <memmove+0x1a>
 8007c5a:	e7f8      	b.n	8007c4e <memmove+0x18>

08007c5c <_realloc_r>:
 8007c5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c5e:	0007      	movs	r7, r0
 8007c60:	000e      	movs	r6, r1
 8007c62:	0014      	movs	r4, r2
 8007c64:	2900      	cmp	r1, #0
 8007c66:	d105      	bne.n	8007c74 <_realloc_r+0x18>
 8007c68:	0011      	movs	r1, r2
 8007c6a:	f7ff fb7f 	bl	800736c <_malloc_r>
 8007c6e:	0005      	movs	r5, r0
 8007c70:	0028      	movs	r0, r5
 8007c72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c74:	2a00      	cmp	r2, #0
 8007c76:	d103      	bne.n	8007c80 <_realloc_r+0x24>
 8007c78:	f7ff fca4 	bl	80075c4 <_free_r>
 8007c7c:	0025      	movs	r5, r4
 8007c7e:	e7f7      	b.n	8007c70 <_realloc_r+0x14>
 8007c80:	f000 f81b 	bl	8007cba <_malloc_usable_size_r>
 8007c84:	9001      	str	r0, [sp, #4]
 8007c86:	4284      	cmp	r4, r0
 8007c88:	d803      	bhi.n	8007c92 <_realloc_r+0x36>
 8007c8a:	0035      	movs	r5, r6
 8007c8c:	0843      	lsrs	r3, r0, #1
 8007c8e:	42a3      	cmp	r3, r4
 8007c90:	d3ee      	bcc.n	8007c70 <_realloc_r+0x14>
 8007c92:	0021      	movs	r1, r4
 8007c94:	0038      	movs	r0, r7
 8007c96:	f7ff fb69 	bl	800736c <_malloc_r>
 8007c9a:	1e05      	subs	r5, r0, #0
 8007c9c:	d0e8      	beq.n	8007c70 <_realloc_r+0x14>
 8007c9e:	9b01      	ldr	r3, [sp, #4]
 8007ca0:	0022      	movs	r2, r4
 8007ca2:	429c      	cmp	r4, r3
 8007ca4:	d900      	bls.n	8007ca8 <_realloc_r+0x4c>
 8007ca6:	001a      	movs	r2, r3
 8007ca8:	0031      	movs	r1, r6
 8007caa:	0028      	movs	r0, r5
 8007cac:	f7ff fb2a 	bl	8007304 <memcpy>
 8007cb0:	0031      	movs	r1, r6
 8007cb2:	0038      	movs	r0, r7
 8007cb4:	f7ff fc86 	bl	80075c4 <_free_r>
 8007cb8:	e7da      	b.n	8007c70 <_realloc_r+0x14>

08007cba <_malloc_usable_size_r>:
 8007cba:	1f0b      	subs	r3, r1, #4
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	1f18      	subs	r0, r3, #4
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	da01      	bge.n	8007cc8 <_malloc_usable_size_r+0xe>
 8007cc4:	580b      	ldr	r3, [r1, r0]
 8007cc6:	18c0      	adds	r0, r0, r3
 8007cc8:	4770      	bx	lr
	...

08007ccc <_init>:
 8007ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cce:	46c0      	nop			; (mov r8, r8)
 8007cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cd2:	bc08      	pop	{r3}
 8007cd4:	469e      	mov	lr, r3
 8007cd6:	4770      	bx	lr

08007cd8 <_fini>:
 8007cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cda:	46c0      	nop			; (mov r8, r8)
 8007cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cde:	bc08      	pop	{r3}
 8007ce0:	469e      	mov	lr, r3
 8007ce2:	4770      	bx	lr
