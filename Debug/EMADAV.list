
EMADAV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005214  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  080052d4  080052d4  000152d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054c4  080054c4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080054c4  080054c4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054c4  080054c4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054c4  080054c4  000154c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054c8  080054c8  000154c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080054cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000113c  20000074  08005540  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011b0  08005540  000211b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000149b2  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e22  00000000  00000000  00034a4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  00037870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001028  00000000  00000000  000389d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a6a3  00000000  00000000  000399f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b79  00000000  00000000  0005409b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009942a  00000000  00000000  00069c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010303e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000429c  00000000  00000000  00103090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080052bc 	.word	0x080052bc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	080052bc 	.word	0x080052bc

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	60b9      	str	r1, [r7, #8]
 800023e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	4a06      	ldr	r2, [pc, #24]	; (800025c <vApplicationGetIdleTaskMemory+0x28>)
 8000244:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000246:	68bb      	ldr	r3, [r7, #8]
 8000248:	4a05      	ldr	r2, [pc, #20]	; (8000260 <vApplicationGetIdleTaskMemory+0x2c>)
 800024a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	2280      	movs	r2, #128	; 0x80
 8000250:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	46bd      	mov	sp, r7
 8000256:	b004      	add	sp, #16
 8000258:	bd80      	pop	{r7, pc}
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	20000090 	.word	0x20000090
 8000260:	20000144 	.word	0x20000144

08000264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000264:	b5b0      	push	{r4, r5, r7, lr}
 8000266:	b096      	sub	sp, #88	; 0x58
 8000268:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800026a:	f000 fc77 	bl	8000b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026e:	f000 f857 	bl	8000320 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000272:	f000 f8e1 	bl	8000438 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000276:	f000 f8a7 	bl	80003c8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  sprintf(HEADER1, "Initialized USB Serial Comunication \n");
 800027a:	4a20      	ldr	r2, [pc, #128]	; (80002fc <main+0x98>)
 800027c:	4b20      	ldr	r3, [pc, #128]	; (8000300 <main+0x9c>)
 800027e:	0011      	movs	r1, r2
 8000280:	0018      	movs	r0, r3
 8000282:	f004 fc67 	bl	8004b54 <siprintf>
  HAL_UART_Transmit(&huart1, HEADER1, sizeof(HEADER1), 38);
 8000286:	491e      	ldr	r1, [pc, #120]	; (8000300 <main+0x9c>)
 8000288:	481e      	ldr	r0, [pc, #120]	; (8000304 <main+0xa0>)
 800028a:	2326      	movs	r3, #38	; 0x26
 800028c:	2228      	movs	r2, #40	; 0x28
 800028e:	f002 f805 	bl	800229c <HAL_UART_Transmit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000292:	213c      	movs	r1, #60	; 0x3c
 8000294:	187b      	adds	r3, r7, r1
 8000296:	4a1c      	ldr	r2, [pc, #112]	; (8000308 <main+0xa4>)
 8000298:	ca31      	ldmia	r2!, {r0, r4, r5}
 800029a:	c331      	stmia	r3!, {r0, r4, r5}
 800029c:	ca31      	ldmia	r2!, {r0, r4, r5}
 800029e:	c331      	stmia	r3!, {r0, r4, r5}
 80002a0:	6812      	ldr	r2, [r2, #0]
 80002a2:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80002a4:	187b      	adds	r3, r7, r1
 80002a6:	2100      	movs	r1, #0
 80002a8:	0018      	movs	r0, r3
 80002aa:	f003 fa48 	bl	800373e <osThreadCreate>
 80002ae:	0002      	movs	r2, r0
 80002b0:	4b16      	ldr	r3, [pc, #88]	; (800030c <main+0xa8>)
 80002b2:	601a      	str	r2, [r3, #0]

  /* definition and creation of AmplifierTask */
  osThreadDef(AmplifierTask, StartAmplifierTask, osPriorityNormal, 0, 128);
 80002b4:	2120      	movs	r1, #32
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	4a15      	ldr	r2, [pc, #84]	; (8000310 <main+0xac>)
 80002ba:	ca31      	ldmia	r2!, {r0, r4, r5}
 80002bc:	c331      	stmia	r3!, {r0, r4, r5}
 80002be:	ca31      	ldmia	r2!, {r0, r4, r5}
 80002c0:	c331      	stmia	r3!, {r0, r4, r5}
 80002c2:	6812      	ldr	r2, [r2, #0]
 80002c4:	601a      	str	r2, [r3, #0]
  AmplifierTaskHandle = osThreadCreate(osThread(AmplifierTask), NULL);
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	2100      	movs	r1, #0
 80002ca:	0018      	movs	r0, r3
 80002cc:	f003 fa37 	bl	800373e <osThreadCreate>
 80002d0:	0002      	movs	r2, r0
 80002d2:	4b10      	ldr	r3, [pc, #64]	; (8000314 <main+0xb0>)
 80002d4:	601a      	str	r2, [r3, #0]

  /* definition and creation of SerialTask */
  osThreadDef(SerialTask, StartSerialTask, osPriorityNormal, 0, 128);
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	4a0f      	ldr	r2, [pc, #60]	; (8000318 <main+0xb4>)
 80002da:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002dc:	c313      	stmia	r3!, {r0, r1, r4}
 80002de:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002e0:	c313      	stmia	r3!, {r0, r1, r4}
 80002e2:	6812      	ldr	r2, [r2, #0]
 80002e4:	601a      	str	r2, [r3, #0]
  SerialTaskHandle = osThreadCreate(osThread(SerialTask), NULL);
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2100      	movs	r1, #0
 80002ea:	0018      	movs	r0, r3
 80002ec:	f003 fa27 	bl	800373e <osThreadCreate>
 80002f0:	0002      	movs	r2, r0
 80002f2:	4b0a      	ldr	r3, [pc, #40]	; (800031c <main+0xb8>)
 80002f4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002f6:	f003 fa1a 	bl	800372e <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002fa:	e7fe      	b.n	80002fa <main+0x96>
 80002fc:	080052fc 	.word	0x080052fc
 8000300:	200003dc 	.word	0x200003dc
 8000304:	20000344 	.word	0x20000344
 8000308:	08005324 	.word	0x08005324
 800030c:	200003cc 	.word	0x200003cc
 8000310:	08005340 	.word	0x08005340
 8000314:	200003d0 	.word	0x200003d0
 8000318:	0800535c 	.word	0x0800535c
 800031c:	200003d4 	.word	0x200003d4

08000320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000320:	b590      	push	{r4, r7, lr}
 8000322:	b099      	sub	sp, #100	; 0x64
 8000324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000326:	242c      	movs	r4, #44	; 0x2c
 8000328:	193b      	adds	r3, r7, r4
 800032a:	0018      	movs	r0, r3
 800032c:	2334      	movs	r3, #52	; 0x34
 800032e:	001a      	movs	r2, r3
 8000330:	2100      	movs	r1, #0
 8000332:	f004 fae8 	bl	8004906 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000336:	231c      	movs	r3, #28
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	0018      	movs	r0, r3
 800033c:	2310      	movs	r3, #16
 800033e:	001a      	movs	r2, r3
 8000340:	2100      	movs	r1, #0
 8000342:	f004 fae0 	bl	8004906 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	0018      	movs	r0, r3
 800034a:	2318      	movs	r3, #24
 800034c:	001a      	movs	r2, r3
 800034e:	2100      	movs	r1, #0
 8000350:	f004 fad9 	bl	8004906 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000354:	193b      	adds	r3, r7, r4
 8000356:	2220      	movs	r2, #32
 8000358:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800035a:	193b      	adds	r3, r7, r4
 800035c:	2201      	movs	r2, #1
 800035e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000360:	193b      	adds	r3, r7, r4
 8000362:	2200      	movs	r2, #0
 8000364:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000366:	193b      	adds	r3, r7, r4
 8000368:	0018      	movs	r0, r3
 800036a:	f000 fef3 	bl	8001154 <HAL_RCC_OscConfig>
 800036e:	1e03      	subs	r3, r0, #0
 8000370:	d001      	beq.n	8000376 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000372:	f000 fa4b 	bl	800080c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000376:	211c      	movs	r1, #28
 8000378:	187b      	adds	r3, r7, r1
 800037a:	2207      	movs	r2, #7
 800037c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800037e:	187b      	adds	r3, r7, r1
 8000380:	2203      	movs	r2, #3
 8000382:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000384:	187b      	adds	r3, r7, r1
 8000386:	2200      	movs	r2, #0
 8000388:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800038a:	187b      	adds	r3, r7, r1
 800038c:	2200      	movs	r2, #0
 800038e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000390:	187b      	adds	r3, r7, r1
 8000392:	2101      	movs	r1, #1
 8000394:	0018      	movs	r0, r3
 8000396:	f001 fa63 	bl	8001860 <HAL_RCC_ClockConfig>
 800039a:	1e03      	subs	r3, r0, #0
 800039c:	d001      	beq.n	80003a2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800039e:	f000 fa35 	bl	800080c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	2201      	movs	r2, #1
 80003a6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	2200      	movs	r2, #0
 80003ac:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	0018      	movs	r0, r3
 80003b2:	f001 fbeb 	bl	8001b8c <HAL_RCCEx_PeriphCLKConfig>
 80003b6:	1e03      	subs	r3, r0, #0
 80003b8:	d001      	beq.n	80003be <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80003ba:	f000 fa27 	bl	800080c <Error_Handler>
  }
}
 80003be:	46c0      	nop			; (mov r8, r8)
 80003c0:	46bd      	mov	sp, r7
 80003c2:	b019      	add	sp, #100	; 0x64
 80003c4:	bd90      	pop	{r4, r7, pc}
	...

080003c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003cc:	4b18      	ldr	r3, [pc, #96]	; (8000430 <MX_USART1_UART_Init+0x68>)
 80003ce:	4a19      	ldr	r2, [pc, #100]	; (8000434 <MX_USART1_UART_Init+0x6c>)
 80003d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80003d2:	4b17      	ldr	r3, [pc, #92]	; (8000430 <MX_USART1_UART_Init+0x68>)
 80003d4:	2296      	movs	r2, #150	; 0x96
 80003d6:	0192      	lsls	r2, r2, #6
 80003d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003da:	4b15      	ldr	r3, [pc, #84]	; (8000430 <MX_USART1_UART_Init+0x68>)
 80003dc:	2200      	movs	r2, #0
 80003de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003e0:	4b13      	ldr	r3, [pc, #76]	; (8000430 <MX_USART1_UART_Init+0x68>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003e6:	4b12      	ldr	r3, [pc, #72]	; (8000430 <MX_USART1_UART_Init+0x68>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003ec:	4b10      	ldr	r3, [pc, #64]	; (8000430 <MX_USART1_UART_Init+0x68>)
 80003ee:	220c      	movs	r2, #12
 80003f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003f2:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <MX_USART1_UART_Init+0x68>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f8:	4b0d      	ldr	r3, [pc, #52]	; (8000430 <MX_USART1_UART_Init+0x68>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003fe:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <MX_USART1_UART_Init+0x68>)
 8000400:	2200      	movs	r2, #0
 8000402:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000404:	4b0a      	ldr	r3, [pc, #40]	; (8000430 <MX_USART1_UART_Init+0x68>)
 8000406:	2230      	movs	r2, #48	; 0x30
 8000408:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800040a:	4b09      	ldr	r3, [pc, #36]	; (8000430 <MX_USART1_UART_Init+0x68>)
 800040c:	2280      	movs	r2, #128	; 0x80
 800040e:	0152      	lsls	r2, r2, #5
 8000410:	639a      	str	r2, [r3, #56]	; 0x38
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000412:	4b07      	ldr	r3, [pc, #28]	; (8000430 <MX_USART1_UART_Init+0x68>)
 8000414:	2280      	movs	r2, #128	; 0x80
 8000416:	0192      	lsls	r2, r2, #6
 8000418:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800041a:	4b05      	ldr	r3, [pc, #20]	; (8000430 <MX_USART1_UART_Init+0x68>)
 800041c:	0018      	movs	r0, r3
 800041e:	f001 fee9 	bl	80021f4 <HAL_UART_Init>
 8000422:	1e03      	subs	r3, r0, #0
 8000424:	d001      	beq.n	800042a <MX_USART1_UART_Init+0x62>
  {
    Error_Handler();
 8000426:	f000 f9f1 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	20000344 	.word	0x20000344
 8000434:	40013800 	.word	0x40013800

08000438 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000438:	b590      	push	{r4, r7, lr}
 800043a:	b089      	sub	sp, #36	; 0x24
 800043c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043e:	240c      	movs	r4, #12
 8000440:	193b      	adds	r3, r7, r4
 8000442:	0018      	movs	r0, r3
 8000444:	2314      	movs	r3, #20
 8000446:	001a      	movs	r2, r3
 8000448:	2100      	movs	r1, #0
 800044a:	f004 fa5c 	bl	8004906 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800044e:	4b25      	ldr	r3, [pc, #148]	; (80004e4 <MX_GPIO_Init+0xac>)
 8000450:	695a      	ldr	r2, [r3, #20]
 8000452:	4b24      	ldr	r3, [pc, #144]	; (80004e4 <MX_GPIO_Init+0xac>)
 8000454:	2180      	movs	r1, #128	; 0x80
 8000456:	03c9      	lsls	r1, r1, #15
 8000458:	430a      	orrs	r2, r1
 800045a:	615a      	str	r2, [r3, #20]
 800045c:	4b21      	ldr	r3, [pc, #132]	; (80004e4 <MX_GPIO_Init+0xac>)
 800045e:	695a      	ldr	r2, [r3, #20]
 8000460:	2380      	movs	r3, #128	; 0x80
 8000462:	03db      	lsls	r3, r3, #15
 8000464:	4013      	ands	r3, r2
 8000466:	60bb      	str	r3, [r7, #8]
 8000468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800046a:	4b1e      	ldr	r3, [pc, #120]	; (80004e4 <MX_GPIO_Init+0xac>)
 800046c:	695a      	ldr	r2, [r3, #20]
 800046e:	4b1d      	ldr	r3, [pc, #116]	; (80004e4 <MX_GPIO_Init+0xac>)
 8000470:	2180      	movs	r1, #128	; 0x80
 8000472:	0289      	lsls	r1, r1, #10
 8000474:	430a      	orrs	r2, r1
 8000476:	615a      	str	r2, [r3, #20]
 8000478:	4b1a      	ldr	r3, [pc, #104]	; (80004e4 <MX_GPIO_Init+0xac>)
 800047a:	695a      	ldr	r2, [r3, #20]
 800047c:	2380      	movs	r3, #128	; 0x80
 800047e:	029b      	lsls	r3, r3, #10
 8000480:	4013      	ands	r3, r2
 8000482:	607b      	str	r3, [r7, #4]
 8000484:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STANDBY__AMPLIFIER_Pin|MUTE_AMPLIFIER_Pin, GPIO_PIN_RESET);
 8000486:	2390      	movs	r3, #144	; 0x90
 8000488:	05db      	lsls	r3, r3, #23
 800048a:	2200      	movs	r2, #0
 800048c:	2103      	movs	r1, #3
 800048e:	0018      	movs	r0, r3
 8000490:	f000 fe43 	bl	800111a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : STANDBY__AMPLIFIER_Pin MUTE_AMPLIFIER_Pin */
  GPIO_InitStruct.Pin = STANDBY__AMPLIFIER_Pin|MUTE_AMPLIFIER_Pin;
 8000494:	193b      	adds	r3, r7, r4
 8000496:	2203      	movs	r2, #3
 8000498:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049a:	193b      	adds	r3, r7, r4
 800049c:	2201      	movs	r2, #1
 800049e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a0:	193b      	adds	r3, r7, r4
 80004a2:	2200      	movs	r2, #0
 80004a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a6:	193b      	adds	r3, r7, r4
 80004a8:	2200      	movs	r2, #0
 80004aa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ac:	193a      	adds	r2, r7, r4
 80004ae:	2390      	movs	r3, #144	; 0x90
 80004b0:	05db      	lsls	r3, r3, #23
 80004b2:	0011      	movs	r1, r2
 80004b4:	0018      	movs	r0, r3
 80004b6:	f000 fcab 	bl	8000e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : MUTE_BUTTON_Pin */
  GPIO_InitStruct.Pin = MUTE_BUTTON_Pin;
 80004ba:	193b      	adds	r3, r7, r4
 80004bc:	2204      	movs	r2, #4
 80004be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004c0:	193b      	adds	r3, r7, r4
 80004c2:	2200      	movs	r2, #0
 80004c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c6:	193b      	adds	r3, r7, r4
 80004c8:	2200      	movs	r2, #0
 80004ca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MUTE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80004cc:	193a      	adds	r2, r7, r4
 80004ce:	2390      	movs	r3, #144	; 0x90
 80004d0:	05db      	lsls	r3, r3, #23
 80004d2:	0011      	movs	r1, r2
 80004d4:	0018      	movs	r0, r3
 80004d6:	f000 fc9b 	bl	8000e10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	b009      	add	sp, #36	; 0x24
 80004e0:	bd90      	pop	{r4, r7, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	40021000 	.word	0x40021000

080004e8 <HAL_UART_RxCpltCallback>:




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, Rx_data, 1);
 80004f0:	4904      	ldr	r1, [pc, #16]	; (8000504 <HAL_UART_RxCpltCallback+0x1c>)
 80004f2:	4b05      	ldr	r3, [pc, #20]	; (8000508 <HAL_UART_RxCpltCallback+0x20>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	0018      	movs	r0, r3
 80004f8:	f001 ff70 	bl	80023dc <HAL_UART_Receive_IT>
}
 80004fc:	46c0      	nop			; (mov r8, r8)
 80004fe:	46bd      	mov	sp, r7
 8000500:	b002      	add	sp, #8
 8000502:	bd80      	pop	{r7, pc}
 8000504:	20000408 	.word	0x20000408
 8000508:	20000344 	.word	0x20000344

0800050c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000514:	2001      	movs	r0, #1
 8000516:	f003 f95f 	bl	80037d8 <osDelay>
 800051a:	e7fb      	b.n	8000514 <StartDefaultTask+0x8>

0800051c <StartAmplifierTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAmplifierTask */
void StartAmplifierTask(void const * argument)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAmplifierTask */
  /* Infinite loop */
  for(;;)
  {
	MuteButtonState = HAL_GPIO_ReadPin(MUTE_BUTTON_GPIO_Port, MUTE_BUTTON_Pin); // GET STATE MUTE BUTTON 'CURRENT STATE IS NEGETIVE'
 8000524:	2390      	movs	r3, #144	; 0x90
 8000526:	05db      	lsls	r3, r3, #23
 8000528:	2104      	movs	r1, #4
 800052a:	0018      	movs	r0, r3
 800052c:	f000 fdd8 	bl	80010e0 <HAL_GPIO_ReadPin>
 8000530:	0003      	movs	r3, r0
 8000532:	1e5a      	subs	r2, r3, #1
 8000534:	4193      	sbcs	r3, r2
 8000536:	b2da      	uxtb	r2, r3
 8000538:	4b34      	ldr	r3, [pc, #208]	; (800060c <StartAmplifierTask+0xf0>)
 800053a:	701a      	strb	r2, [r3, #0]
	MuteButtonState = !MuteButtonState; 	// REVERSE NEGATIVE TO POSITIVE SIGNAL
 800053c:	4b33      	ldr	r3, [pc, #204]	; (800060c <StartAmplifierTask+0xf0>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	1e5a      	subs	r2, r3, #1
 8000542:	4193      	sbcs	r3, r2
 8000544:	b2db      	uxtb	r3, r3
 8000546:	2201      	movs	r2, #1
 8000548:	4053      	eors	r3, r2
 800054a:	b2db      	uxtb	r3, r3
 800054c:	1c1a      	adds	r2, r3, #0
 800054e:	2301      	movs	r3, #1
 8000550:	4013      	ands	r3, r2
 8000552:	b2da      	uxtb	r2, r3
 8000554:	4b2d      	ldr	r3, [pc, #180]	; (800060c <StartAmplifierTask+0xf0>)
 8000556:	701a      	strb	r2, [r3, #0]

	if ((MuteButtonState == true && StateAmplifier == false)||(SerialCommand == 1 ))	//CHECK STATUS BUTTON
 8000558:	4b2c      	ldr	r3, [pc, #176]	; (800060c <StartAmplifierTask+0xf0>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d006      	beq.n	800056e <StartAmplifierTask+0x52>
 8000560:	4b2b      	ldr	r3, [pc, #172]	; (8000610 <StartAmplifierTask+0xf4>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	2201      	movs	r2, #1
 8000566:	4053      	eors	r3, r2
 8000568:	b2db      	uxtb	r3, r3
 800056a:	2b00      	cmp	r3, #0
 800056c:	d103      	bne.n	8000576 <StartAmplifierTask+0x5a>
 800056e:	4b29      	ldr	r3, [pc, #164]	; (8000614 <StartAmplifierTask+0xf8>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d11e      	bne.n	80005b4 <StartAmplifierTask+0x98>
	{
		StateAmplifier = true;
 8000576:	4b26      	ldr	r3, [pc, #152]	; (8000610 <StartAmplifierTask+0xf4>)
 8000578:	2201      	movs	r2, #1
 800057a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(STANDBY__AMPLIFIER_GPIO_Port, STANDBY__AMPLIFIER_Pin, GPIO_PIN_SET);
 800057c:	2390      	movs	r3, #144	; 0x90
 800057e:	05db      	lsls	r3, r3, #23
 8000580:	2201      	movs	r2, #1
 8000582:	2101      	movs	r1, #1
 8000584:	0018      	movs	r0, r3
 8000586:	f000 fdc8 	bl	800111a <HAL_GPIO_WritePin>
		osDelay(200);
 800058a:	20c8      	movs	r0, #200	; 0xc8
 800058c:	f003 f924 	bl	80037d8 <osDelay>
		HAL_GPIO_WritePin(MUTE_AMPLIFIER_GPIO_Port, MUTE_AMPLIFIER_Pin, GPIO_PIN_SET);
 8000590:	2390      	movs	r3, #144	; 0x90
 8000592:	05db      	lsls	r3, r3, #23
 8000594:	2201      	movs	r2, #1
 8000596:	2102      	movs	r1, #2
 8000598:	0018      	movs	r0, r3
 800059a:	f000 fdbe 	bl	800111a <HAL_GPIO_WritePin>
		MuteButtonState = false;
 800059e:	4b1b      	ldr	r3, [pc, #108]	; (800060c <StartAmplifierTask+0xf0>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	701a      	strb	r2, [r3, #0]
		SerialCommand = 0;
 80005a4:	4b1b      	ldr	r3, [pc, #108]	; (8000614 <StartAmplifierTask+0xf8>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	701a      	strb	r2, [r3, #0]
		osDelay(1000);
 80005aa:	23fa      	movs	r3, #250	; 0xfa
 80005ac:	009b      	lsls	r3, r3, #2
 80005ae:	0018      	movs	r0, r3
 80005b0:	f003 f912 	bl	80037d8 <osDelay>
	}
	if ((MuteButtonState == true && StateAmplifier == true)||(SerialCommand == 2 ))	//CHECK STATUS BUTTON
 80005b4:	4b15      	ldr	r3, [pc, #84]	; (800060c <StartAmplifierTask+0xf0>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d003      	beq.n	80005c4 <StartAmplifierTask+0xa8>
 80005bc:	4b14      	ldr	r3, [pc, #80]	; (8000610 <StartAmplifierTask+0xf4>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d103      	bne.n	80005cc <StartAmplifierTask+0xb0>
 80005c4:	4b13      	ldr	r3, [pc, #76]	; (8000614 <StartAmplifierTask+0xf8>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b02      	cmp	r3, #2
 80005ca:	d1ab      	bne.n	8000524 <StartAmplifierTask+0x8>
	{
		StateAmplifier = false;
 80005cc:	4b10      	ldr	r3, [pc, #64]	; (8000610 <StartAmplifierTask+0xf4>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(MUTE_AMPLIFIER_GPIO_Port, MUTE_AMPLIFIER_Pin, GPIO_PIN_RESET);
 80005d2:	2390      	movs	r3, #144	; 0x90
 80005d4:	05db      	lsls	r3, r3, #23
 80005d6:	2200      	movs	r2, #0
 80005d8:	2102      	movs	r1, #2
 80005da:	0018      	movs	r0, r3
 80005dc:	f000 fd9d 	bl	800111a <HAL_GPIO_WritePin>
		osDelay(200);
 80005e0:	20c8      	movs	r0, #200	; 0xc8
 80005e2:	f003 f8f9 	bl	80037d8 <osDelay>
		HAL_GPIO_WritePin(STANDBY__AMPLIFIER_GPIO_Port, STANDBY__AMPLIFIER_Pin, GPIO_PIN_RESET);
 80005e6:	2390      	movs	r3, #144	; 0x90
 80005e8:	05db      	lsls	r3, r3, #23
 80005ea:	2200      	movs	r2, #0
 80005ec:	2101      	movs	r1, #1
 80005ee:	0018      	movs	r0, r3
 80005f0:	f000 fd93 	bl	800111a <HAL_GPIO_WritePin>
		MuteButtonState = false;
 80005f4:	4b05      	ldr	r3, [pc, #20]	; (800060c <StartAmplifierTask+0xf0>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	701a      	strb	r2, [r3, #0]
		SerialCommand = 0;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <StartAmplifierTask+0xf8>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	701a      	strb	r2, [r3, #0]
		osDelay(1000);
 8000600:	23fa      	movs	r3, #250	; 0xfa
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	0018      	movs	r0, r3
 8000606:	f003 f8e7 	bl	80037d8 <osDelay>
	MuteButtonState = HAL_GPIO_ReadPin(MUTE_BUTTON_GPIO_Port, MUTE_BUTTON_Pin); // GET STATE MUTE BUTTON 'CURRENT STATE IS NEGETIVE'
 800060a:	e78b      	b.n	8000524 <StartAmplifierTask+0x8>
 800060c:	200003da 	.word	0x200003da
 8000610:	200003d8 	.word	0x200003d8
 8000614:	20000409 	.word	0x20000409

08000618 <StartSerialTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSerialTask */
void StartSerialTask(void const * argument)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSerialTask */
  /* Infinite loop */
  for(;;)
  {
	//--------------------FOR SERIAL COMUNICATION---------------------------------------------
	osDelay(1);
 8000620:	2001      	movs	r0, #1
 8000622:	f003 f8d9 	bl	80037d8 <osDelay>
	//----------------------------TX COMUNICATION---------------------------------------------
	MuteButtonState = HAL_GPIO_ReadPin(MUTE_BUTTON_GPIO_Port, MUTE_BUTTON_Pin); // GET STATE MUTE BUTTON 'CURRENT STATE IS NEGETIVE'
 8000626:	2390      	movs	r3, #144	; 0x90
 8000628:	05db      	lsls	r3, r3, #23
 800062a:	2104      	movs	r1, #4
 800062c:	0018      	movs	r0, r3
 800062e:	f000 fd57 	bl	80010e0 <HAL_GPIO_ReadPin>
 8000632:	0003      	movs	r3, r0
 8000634:	1e5a      	subs	r2, r3, #1
 8000636:	4193      	sbcs	r3, r2
 8000638:	b2da      	uxtb	r2, r3
 800063a:	4b5d      	ldr	r3, [pc, #372]	; (80007b0 <StartSerialTask+0x198>)
 800063c:	701a      	strb	r2, [r3, #0]
	MuteButtonState = !MuteButtonState; 	// REVERSE NEGATIVE TO POSITIVE SIGNAL
 800063e:	4b5c      	ldr	r3, [pc, #368]	; (80007b0 <StartSerialTask+0x198>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	1e5a      	subs	r2, r3, #1
 8000644:	4193      	sbcs	r3, r2
 8000646:	b2db      	uxtb	r3, r3
 8000648:	2201      	movs	r2, #1
 800064a:	4053      	eors	r3, r2
 800064c:	b2db      	uxtb	r3, r3
 800064e:	1c1a      	adds	r2, r3, #0
 8000650:	2301      	movs	r3, #1
 8000652:	4013      	ands	r3, r2
 8000654:	b2da      	uxtb	r2, r3
 8000656:	4b56      	ldr	r3, [pc, #344]	; (80007b0 <StartSerialTask+0x198>)
 8000658:	701a      	strb	r2, [r3, #0]

	if ((MuteButtonState == true)||(SerialCommand != 0))
 800065a:	4b55      	ldr	r3, [pc, #340]	; (80007b0 <StartSerialTask+0x198>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d103      	bne.n	800066a <StartSerialTask+0x52>
 8000662:	4b54      	ldr	r3, [pc, #336]	; (80007b4 <StartSerialTask+0x19c>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d055      	beq.n	8000716 <StartSerialTask+0xfe>
	{
		if ((StateAmplifier == true)&&(StateAmplifier != OldStateAmplifier))
 800066a:	4b53      	ldr	r3, [pc, #332]	; (80007b8 <StartSerialTask+0x1a0>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d025      	beq.n	80006be <StartSerialTask+0xa6>
 8000672:	4b51      	ldr	r3, [pc, #324]	; (80007b8 <StartSerialTask+0x1a0>)
 8000674:	781a      	ldrb	r2, [r3, #0]
 8000676:	4b51      	ldr	r3, [pc, #324]	; (80007bc <StartSerialTask+0x1a4>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	429a      	cmp	r2, r3
 800067c:	d01f      	beq.n	80006be <StartSerialTask+0xa6>
		{
			  sprintf(HEADER1, "Px_AMPLIFIER ON_Sx");
 800067e:	4a50      	ldr	r2, [pc, #320]	; (80007c0 <StartSerialTask+0x1a8>)
 8000680:	4b50      	ldr	r3, [pc, #320]	; (80007c4 <StartSerialTask+0x1ac>)
 8000682:	0011      	movs	r1, r2
 8000684:	0018      	movs	r0, r3
 8000686:	f004 fa65 	bl	8004b54 <siprintf>
			  sprintf(CR, "\r\n");
 800068a:	4a4f      	ldr	r2, [pc, #316]	; (80007c8 <StartSerialTask+0x1b0>)
 800068c:	4b4f      	ldr	r3, [pc, #316]	; (80007cc <StartSerialTask+0x1b4>)
 800068e:	0011      	movs	r1, r2
 8000690:	0018      	movs	r0, r3
 8000692:	f004 fa5f 	bl	8004b54 <siprintf>
			  HAL_UART_Transmit(&huart1, HEADER1, sizeof(HEADER1), 18);
 8000696:	494b      	ldr	r1, [pc, #300]	; (80007c4 <StartSerialTask+0x1ac>)
 8000698:	484d      	ldr	r0, [pc, #308]	; (80007d0 <StartSerialTask+0x1b8>)
 800069a:	2312      	movs	r3, #18
 800069c:	2228      	movs	r2, #40	; 0x28
 800069e:	f001 fdfd 	bl	800229c <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart1, (uint8_t *)CR, sizeof(CR), 0xFFFF);
 80006a2:	4b4c      	ldr	r3, [pc, #304]	; (80007d4 <StartSerialTask+0x1bc>)
 80006a4:	4949      	ldr	r1, [pc, #292]	; (80007cc <StartSerialTask+0x1b4>)
 80006a6:	484a      	ldr	r0, [pc, #296]	; (80007d0 <StartSerialTask+0x1b8>)
 80006a8:	2204      	movs	r2, #4
 80006aa:	f001 fdf7 	bl	800229c <HAL_UART_Transmit>
			  OldStateAmplifier = StateAmplifier;
 80006ae:	4b42      	ldr	r3, [pc, #264]	; (80007b8 <StartSerialTask+0x1a0>)
 80006b0:	781a      	ldrb	r2, [r3, #0]
 80006b2:	4b42      	ldr	r3, [pc, #264]	; (80007bc <StartSerialTask+0x1a4>)
 80006b4:	701a      	strb	r2, [r3, #0]
			  SerialCommand = 0;
 80006b6:	4b3f      	ldr	r3, [pc, #252]	; (80007b4 <StartSerialTask+0x19c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	701a      	strb	r2, [r3, #0]
		{
 80006bc:	e02b      	b.n	8000716 <StartSerialTask+0xfe>
		}
		else if ((StateAmplifier == false)&&(StateAmplifier != OldStateAmplifier))
 80006be:	4b3e      	ldr	r3, [pc, #248]	; (80007b8 <StartSerialTask+0x1a0>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2201      	movs	r2, #1
 80006c4:	4053      	eors	r3, r2
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d024      	beq.n	8000716 <StartSerialTask+0xfe>
 80006cc:	4b3a      	ldr	r3, [pc, #232]	; (80007b8 <StartSerialTask+0x1a0>)
 80006ce:	781a      	ldrb	r2, [r3, #0]
 80006d0:	4b3a      	ldr	r3, [pc, #232]	; (80007bc <StartSerialTask+0x1a4>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d01e      	beq.n	8000716 <StartSerialTask+0xfe>
		{
			  sprintf(HEADER1, "Px_AMPLIFIER OFF_Sx");
 80006d8:	4a3f      	ldr	r2, [pc, #252]	; (80007d8 <StartSerialTask+0x1c0>)
 80006da:	4b3a      	ldr	r3, [pc, #232]	; (80007c4 <StartSerialTask+0x1ac>)
 80006dc:	0011      	movs	r1, r2
 80006de:	0018      	movs	r0, r3
 80006e0:	f004 fa38 	bl	8004b54 <siprintf>
			  sprintf(CR, "\r\n");
 80006e4:	4a38      	ldr	r2, [pc, #224]	; (80007c8 <StartSerialTask+0x1b0>)
 80006e6:	4b39      	ldr	r3, [pc, #228]	; (80007cc <StartSerialTask+0x1b4>)
 80006e8:	0011      	movs	r1, r2
 80006ea:	0018      	movs	r0, r3
 80006ec:	f004 fa32 	bl	8004b54 <siprintf>
			  HAL_UART_Transmit(&huart1, HEADER1, sizeof(HEADER1), 18);
 80006f0:	4934      	ldr	r1, [pc, #208]	; (80007c4 <StartSerialTask+0x1ac>)
 80006f2:	4837      	ldr	r0, [pc, #220]	; (80007d0 <StartSerialTask+0x1b8>)
 80006f4:	2312      	movs	r3, #18
 80006f6:	2228      	movs	r2, #40	; 0x28
 80006f8:	f001 fdd0 	bl	800229c <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart1, (uint8_t *)CR, sizeof(CR), 0xFFFF);
 80006fc:	4b35      	ldr	r3, [pc, #212]	; (80007d4 <StartSerialTask+0x1bc>)
 80006fe:	4933      	ldr	r1, [pc, #204]	; (80007cc <StartSerialTask+0x1b4>)
 8000700:	4833      	ldr	r0, [pc, #204]	; (80007d0 <StartSerialTask+0x1b8>)
 8000702:	2204      	movs	r2, #4
 8000704:	f001 fdca 	bl	800229c <HAL_UART_Transmit>
			  OldStateAmplifier = StateAmplifier;
 8000708:	4b2b      	ldr	r3, [pc, #172]	; (80007b8 <StartSerialTask+0x1a0>)
 800070a:	781a      	ldrb	r2, [r3, #0]
 800070c:	4b2b      	ldr	r3, [pc, #172]	; (80007bc <StartSerialTask+0x1a4>)
 800070e:	701a      	strb	r2, [r3, #0]
			  SerialCommand = 0;
 8000710:	4b28      	ldr	r3, [pc, #160]	; (80007b4 <StartSerialTask+0x19c>)
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
		}
	}
	//----------------------------RX COMUNICATION---------------------------------------------
	HAL_UART_Receive_IT(&huart1, Rx_data, 1);
 8000716:	4931      	ldr	r1, [pc, #196]	; (80007dc <StartSerialTask+0x1c4>)
 8000718:	4b2d      	ldr	r3, [pc, #180]	; (80007d0 <StartSerialTask+0x1b8>)
 800071a:	2201      	movs	r2, #1
 800071c:	0018      	movs	r0, r3
 800071e:	f001 fe5d 	bl	80023dc <HAL_UART_Receive_IT>
	if (Rx_data[0] == 49) // COMMAND 1
 8000722:	4b2e      	ldr	r3, [pc, #184]	; (80007dc <StartSerialTask+0x1c4>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b31      	cmp	r3, #49	; 0x31
 8000728:	d11e      	bne.n	8000768 <StartSerialTask+0x150>
	{
		sprintf(HEADER1, "Px_Command ON Amplifier Received_Sx");
 800072a:	4a2d      	ldr	r2, [pc, #180]	; (80007e0 <StartSerialTask+0x1c8>)
 800072c:	4b25      	ldr	r3, [pc, #148]	; (80007c4 <StartSerialTask+0x1ac>)
 800072e:	0011      	movs	r1, r2
 8000730:	0018      	movs	r0, r3
 8000732:	f004 fa0f 	bl	8004b54 <siprintf>
		sprintf(CR, "\r\n");
 8000736:	4a24      	ldr	r2, [pc, #144]	; (80007c8 <StartSerialTask+0x1b0>)
 8000738:	4b24      	ldr	r3, [pc, #144]	; (80007cc <StartSerialTask+0x1b4>)
 800073a:	0011      	movs	r1, r2
 800073c:	0018      	movs	r0, r3
 800073e:	f004 fa09 	bl	8004b54 <siprintf>
		HAL_UART_Transmit(&huart1, HEADER1, sizeof(HEADER1), 35);
 8000742:	4920      	ldr	r1, [pc, #128]	; (80007c4 <StartSerialTask+0x1ac>)
 8000744:	4822      	ldr	r0, [pc, #136]	; (80007d0 <StartSerialTask+0x1b8>)
 8000746:	2323      	movs	r3, #35	; 0x23
 8000748:	2228      	movs	r2, #40	; 0x28
 800074a:	f001 fda7 	bl	800229c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t *)CR, sizeof(CR), 0xFFFF);
 800074e:	4b21      	ldr	r3, [pc, #132]	; (80007d4 <StartSerialTask+0x1bc>)
 8000750:	491e      	ldr	r1, [pc, #120]	; (80007cc <StartSerialTask+0x1b4>)
 8000752:	481f      	ldr	r0, [pc, #124]	; (80007d0 <StartSerialTask+0x1b8>)
 8000754:	2204      	movs	r2, #4
 8000756:	f001 fda1 	bl	800229c <HAL_UART_Transmit>
		SerialCommand = 1; 			//COMMAND START AMPIFIER AND SOUND
 800075a:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <StartSerialTask+0x19c>)
 800075c:	2201      	movs	r2, #1
 800075e:	701a      	strb	r2, [r3, #0]
		Rx_data[0] = 0;
 8000760:	4b1e      	ldr	r3, [pc, #120]	; (80007dc <StartSerialTask+0x1c4>)
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]
 8000766:	e75b      	b.n	8000620 <StartSerialTask+0x8>
	}
	else if ((Rx_data[0] == 50))    // COMMAND 2
 8000768:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <StartSerialTask+0x1c4>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b32      	cmp	r3, #50	; 0x32
 800076e:	d000      	beq.n	8000772 <StartSerialTask+0x15a>
 8000770:	e756      	b.n	8000620 <StartSerialTask+0x8>
	{
		sprintf(HEADER1, "Px_Command OFF Amplifier Received_Sx");
 8000772:	4a1c      	ldr	r2, [pc, #112]	; (80007e4 <StartSerialTask+0x1cc>)
 8000774:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <StartSerialTask+0x1ac>)
 8000776:	0011      	movs	r1, r2
 8000778:	0018      	movs	r0, r3
 800077a:	f004 f9eb 	bl	8004b54 <siprintf>
		sprintf(CR, "\r\n");
 800077e:	4a12      	ldr	r2, [pc, #72]	; (80007c8 <StartSerialTask+0x1b0>)
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <StartSerialTask+0x1b4>)
 8000782:	0011      	movs	r1, r2
 8000784:	0018      	movs	r0, r3
 8000786:	f004 f9e5 	bl	8004b54 <siprintf>
		HAL_UART_Transmit(&huart1, HEADER1, sizeof(HEADER1), 36);
 800078a:	490e      	ldr	r1, [pc, #56]	; (80007c4 <StartSerialTask+0x1ac>)
 800078c:	4810      	ldr	r0, [pc, #64]	; (80007d0 <StartSerialTask+0x1b8>)
 800078e:	2324      	movs	r3, #36	; 0x24
 8000790:	2228      	movs	r2, #40	; 0x28
 8000792:	f001 fd83 	bl	800229c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t *)CR, sizeof(CR), 0xFFFF);
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <StartSerialTask+0x1bc>)
 8000798:	490c      	ldr	r1, [pc, #48]	; (80007cc <StartSerialTask+0x1b4>)
 800079a:	480d      	ldr	r0, [pc, #52]	; (80007d0 <StartSerialTask+0x1b8>)
 800079c:	2204      	movs	r2, #4
 800079e:	f001 fd7d 	bl	800229c <HAL_UART_Transmit>
		SerialCommand = 2;		   //COMMAND STOP AMPIFIER AND SOUND
 80007a2:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <StartSerialTask+0x19c>)
 80007a4:	2202      	movs	r2, #2
 80007a6:	701a      	strb	r2, [r3, #0]
		Rx_data[0] = 0;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <StartSerialTask+0x1c4>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	701a      	strb	r2, [r3, #0]
	osDelay(1);
 80007ae:	e737      	b.n	8000620 <StartSerialTask+0x8>
 80007b0:	200003da 	.word	0x200003da
 80007b4:	20000409 	.word	0x20000409
 80007b8:	200003d8 	.word	0x200003d8
 80007bc:	200003d9 	.word	0x200003d9
 80007c0:	08005378 	.word	0x08005378
 80007c4:	200003dc 	.word	0x200003dc
 80007c8:	0800538c 	.word	0x0800538c
 80007cc:	20000404 	.word	0x20000404
 80007d0:	20000344 	.word	0x20000344
 80007d4:	0000ffff 	.word	0x0000ffff
 80007d8:	08005390 	.word	0x08005390
 80007dc:	20000408 	.word	0x20000408
 80007e0:	080053a4 	.word	0x080053a4
 80007e4:	080053c8 	.word	0x080053c8

080007e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a04      	ldr	r2, [pc, #16]	; (8000808 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d101      	bne.n	80007fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007fa:	f000 f9c3 	bl	8000b84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	46bd      	mov	sp, r7
 8000802:	b002      	add	sp, #8
 8000804:	bd80      	pop	{r7, pc}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	40012c00 	.word	0x40012c00

0800080c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000810:	b672      	cpsid	i
}
 8000812:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000814:	e7fe      	b.n	8000814 <Error_Handler+0x8>
	...

08000818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <HAL_MspInit+0x50>)
 8000820:	699a      	ldr	r2, [r3, #24]
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <HAL_MspInit+0x50>)
 8000824:	2101      	movs	r1, #1
 8000826:	430a      	orrs	r2, r1
 8000828:	619a      	str	r2, [r3, #24]
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <HAL_MspInit+0x50>)
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	2201      	movs	r2, #1
 8000830:	4013      	ands	r3, r2
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <HAL_MspInit+0x50>)
 8000838:	69da      	ldr	r2, [r3, #28]
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <HAL_MspInit+0x50>)
 800083c:	2180      	movs	r1, #128	; 0x80
 800083e:	0549      	lsls	r1, r1, #21
 8000840:	430a      	orrs	r2, r1
 8000842:	61da      	str	r2, [r3, #28]
 8000844:	4b08      	ldr	r3, [pc, #32]	; (8000868 <HAL_MspInit+0x50>)
 8000846:	69da      	ldr	r2, [r3, #28]
 8000848:	2380      	movs	r3, #128	; 0x80
 800084a:	055b      	lsls	r3, r3, #21
 800084c:	4013      	ands	r3, r2
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000852:	2302      	movs	r3, #2
 8000854:	425b      	negs	r3, r3
 8000856:	2200      	movs	r2, #0
 8000858:	2103      	movs	r1, #3
 800085a:	0018      	movs	r0, r3
 800085c:	f000 fa36 	bl	8000ccc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000860:	46c0      	nop			; (mov r8, r8)
 8000862:	46bd      	mov	sp, r7
 8000864:	b002      	add	sp, #8
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40021000 	.word	0x40021000

0800086c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800086c:	b590      	push	{r4, r7, lr}
 800086e:	b08b      	sub	sp, #44	; 0x2c
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	2414      	movs	r4, #20
 8000876:	193b      	adds	r3, r7, r4
 8000878:	0018      	movs	r0, r3
 800087a:	2314      	movs	r3, #20
 800087c:	001a      	movs	r2, r3
 800087e:	2100      	movs	r1, #0
 8000880:	f004 f841 	bl	8004906 <memset>
  if(huart->Instance==USART1)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a21      	ldr	r2, [pc, #132]	; (8000910 <HAL_UART_MspInit+0xa4>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d13b      	bne.n	8000906 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800088e:	4b21      	ldr	r3, [pc, #132]	; (8000914 <HAL_UART_MspInit+0xa8>)
 8000890:	699a      	ldr	r2, [r3, #24]
 8000892:	4b20      	ldr	r3, [pc, #128]	; (8000914 <HAL_UART_MspInit+0xa8>)
 8000894:	2180      	movs	r1, #128	; 0x80
 8000896:	01c9      	lsls	r1, r1, #7
 8000898:	430a      	orrs	r2, r1
 800089a:	619a      	str	r2, [r3, #24]
 800089c:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <HAL_UART_MspInit+0xa8>)
 800089e:	699a      	ldr	r2, [r3, #24]
 80008a0:	2380      	movs	r3, #128	; 0x80
 80008a2:	01db      	lsls	r3, r3, #7
 80008a4:	4013      	ands	r3, r2
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <HAL_UART_MspInit+0xa8>)
 80008ac:	695a      	ldr	r2, [r3, #20]
 80008ae:	4b19      	ldr	r3, [pc, #100]	; (8000914 <HAL_UART_MspInit+0xa8>)
 80008b0:	2180      	movs	r1, #128	; 0x80
 80008b2:	0289      	lsls	r1, r1, #10
 80008b4:	430a      	orrs	r2, r1
 80008b6:	615a      	str	r2, [r3, #20]
 80008b8:	4b16      	ldr	r3, [pc, #88]	; (8000914 <HAL_UART_MspInit+0xa8>)
 80008ba:	695a      	ldr	r2, [r3, #20]
 80008bc:	2380      	movs	r3, #128	; 0x80
 80008be:	029b      	lsls	r3, r3, #10
 80008c0:	4013      	ands	r3, r2
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008c6:	193b      	adds	r3, r7, r4
 80008c8:	22c0      	movs	r2, #192	; 0xc0
 80008ca:	00d2      	lsls	r2, r2, #3
 80008cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	0021      	movs	r1, r4
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	2202      	movs	r2, #2
 80008d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	2203      	movs	r2, #3
 80008e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	2201      	movs	r2, #1
 80008e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e8:	187a      	adds	r2, r7, r1
 80008ea:	2390      	movs	r3, #144	; 0x90
 80008ec:	05db      	lsls	r3, r3, #23
 80008ee:	0011      	movs	r1, r2
 80008f0:	0018      	movs	r0, r3
 80008f2:	f000 fa8d 	bl	8000e10 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2103      	movs	r1, #3
 80008fa:	201b      	movs	r0, #27
 80008fc:	f000 f9e6 	bl	8000ccc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000900:	201b      	movs	r0, #27
 8000902:	f000 f9f8 	bl	8000cf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	46bd      	mov	sp, r7
 800090a:	b00b      	add	sp, #44	; 0x2c
 800090c:	bd90      	pop	{r4, r7, pc}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	40013800 	.word	0x40013800
 8000914:	40021000 	.word	0x40021000

08000918 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000918:	b5b0      	push	{r4, r5, r7, lr}
 800091a:	b08c      	sub	sp, #48	; 0x30
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t              uwPrescalerValue = 0U;
 8000924:	2300      	movs	r3, #0
 8000926:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000928:	4b38      	ldr	r3, [pc, #224]	; (8000a0c <HAL_InitTick+0xf4>)
 800092a:	699a      	ldr	r2, [r3, #24]
 800092c:	4b37      	ldr	r3, [pc, #220]	; (8000a0c <HAL_InitTick+0xf4>)
 800092e:	2180      	movs	r1, #128	; 0x80
 8000930:	0109      	lsls	r1, r1, #4
 8000932:	430a      	orrs	r2, r1
 8000934:	619a      	str	r2, [r3, #24]
 8000936:	4b35      	ldr	r3, [pc, #212]	; (8000a0c <HAL_InitTick+0xf4>)
 8000938:	699a      	ldr	r2, [r3, #24]
 800093a:	2380      	movs	r3, #128	; 0x80
 800093c:	011b      	lsls	r3, r3, #4
 800093e:	4013      	ands	r3, r2
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000944:	230c      	movs	r3, #12
 8000946:	18fa      	adds	r2, r7, r3
 8000948:	2410      	movs	r4, #16
 800094a:	193b      	adds	r3, r7, r4
 800094c:	0011      	movs	r1, r2
 800094e:	0018      	movs	r0, r3
 8000950:	f001 f8f2 	bl	8001b38 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000954:	193b      	adds	r3, r7, r4
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800095a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095c:	2b00      	cmp	r3, #0
 800095e:	d104      	bne.n	800096a <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000960:	f001 f8d4 	bl	8001b0c <HAL_RCC_GetPCLK1Freq>
 8000964:	0003      	movs	r3, r0
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000968:	e004      	b.n	8000974 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800096a:	f001 f8cf 	bl	8001b0c <HAL_RCC_GetPCLK1Freq>
 800096e:	0003      	movs	r3, r0
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000976:	4926      	ldr	r1, [pc, #152]	; (8000a10 <HAL_InitTick+0xf8>)
 8000978:	0018      	movs	r0, r3
 800097a:	f7ff fbcf 	bl	800011c <__udivsi3>
 800097e:	0003      	movs	r3, r0
 8000980:	3b01      	subs	r3, #1
 8000982:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000984:	4b23      	ldr	r3, [pc, #140]	; (8000a14 <HAL_InitTick+0xfc>)
 8000986:	4a24      	ldr	r2, [pc, #144]	; (8000a18 <HAL_InitTick+0x100>)
 8000988:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800098a:	4b22      	ldr	r3, [pc, #136]	; (8000a14 <HAL_InitTick+0xfc>)
 800098c:	4a23      	ldr	r2, [pc, #140]	; (8000a1c <HAL_InitTick+0x104>)
 800098e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000990:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <HAL_InitTick+0xfc>)
 8000992:	6a3a      	ldr	r2, [r7, #32]
 8000994:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8000996:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <HAL_InitTick+0xfc>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099c:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <HAL_InitTick+0xfc>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a2:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <HAL_InitTick+0xfc>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80009a8:	252b      	movs	r5, #43	; 0x2b
 80009aa:	197c      	adds	r4, r7, r5
 80009ac:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <HAL_InitTick+0xfc>)
 80009ae:	0018      	movs	r0, r3
 80009b0:	f001 f9da 	bl	8001d68 <HAL_TIM_Base_Init>
 80009b4:	0003      	movs	r3, r0
 80009b6:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80009b8:	197b      	adds	r3, r7, r5
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d11e      	bne.n	80009fe <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80009c0:	197c      	adds	r4, r7, r5
 80009c2:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <HAL_InitTick+0xfc>)
 80009c4:	0018      	movs	r0, r3
 80009c6:	f001 fa27 	bl	8001e18 <HAL_TIM_Base_Start_IT>
 80009ca:	0003      	movs	r3, r0
 80009cc:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 80009ce:	197b      	adds	r3, r7, r5
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d113      	bne.n	80009fe <HAL_InitTick+0xe6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80009d6:	200d      	movs	r0, #13
 80009d8:	f000 f98d 	bl	8000cf6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2b03      	cmp	r3, #3
 80009e0:	d809      	bhi.n	80009f6 <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2200      	movs	r2, #0
 80009e6:	0019      	movs	r1, r3
 80009e8:	200d      	movs	r0, #13
 80009ea:	f000 f96f 	bl	8000ccc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009ee:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <HAL_InitTick+0x108>)
 80009f0:	687a      	ldr	r2, [r7, #4]
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	e003      	b.n	80009fe <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 80009f6:	232b      	movs	r3, #43	; 0x2b
 80009f8:	18fb      	adds	r3, r7, r3
 80009fa:	2201      	movs	r2, #1
 80009fc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 80009fe:	232b      	movs	r3, #43	; 0x2b
 8000a00:	18fb      	adds	r3, r7, r3
 8000a02:	781b      	ldrb	r3, [r3, #0]
}
 8000a04:	0018      	movs	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	b00c      	add	sp, #48	; 0x30
 8000a0a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	000f4240 	.word	0x000f4240
 8000a14:	2000040c 	.word	0x2000040c
 8000a18:	40012c00 	.word	0x40012c00
 8000a1c:	000003e7 	.word	0x000003e7
 8000a20:	20000004 	.word	0x20000004

08000a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <NMI_Handler+0x4>

08000a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <HardFault_Handler+0x4>

08000a30 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a34:	4b03      	ldr	r3, [pc, #12]	; (8000a44 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000a36:	0018      	movs	r0, r3
 8000a38:	f001 fa3a 	bl	8001eb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000a3c:	46c0      	nop			; (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	2000040c 	.word	0x2000040c

08000a48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a4c:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <USART1_IRQHandler+0x14>)
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f001 fd1c 	bl	800248c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a54:	46c0      	nop			; (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	20000344 	.word	0x20000344

08000a60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a68:	4a14      	ldr	r2, [pc, #80]	; (8000abc <_sbrk+0x5c>)
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <_sbrk+0x60>)
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a74:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <_sbrk+0x64>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d102      	bne.n	8000a82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <_sbrk+0x64>)
 8000a7e:	4a12      	ldr	r2, [pc, #72]	; (8000ac8 <_sbrk+0x68>)
 8000a80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <_sbrk+0x64>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	18d3      	adds	r3, r2, r3
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d207      	bcs.n	8000aa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a90:	f003 ff04 	bl	800489c <__errno>
 8000a94:	0003      	movs	r3, r0
 8000a96:	220c      	movs	r2, #12
 8000a98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	425b      	negs	r3, r3
 8000a9e:	e009      	b.n	8000ab4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aa0:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <_sbrk+0x64>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aa6:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <_sbrk+0x64>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	18d2      	adds	r2, r2, r3
 8000aae:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <_sbrk+0x64>)
 8000ab0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
}
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b006      	add	sp, #24
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20001800 	.word	0x20001800
 8000ac0:	00000400 	.word	0x00000400
 8000ac4:	20000454 	.word	0x20000454
 8000ac8:	200011b0 	.word	0x200011b0

08000acc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000ad0:	46c0      	nop			; (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ad8:	4813      	ldr	r0, [pc, #76]	; (8000b28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ada:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000adc:	f7ff fff6 	bl	8000acc <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000ae0:	4812      	ldr	r0, [pc, #72]	; (8000b2c <LoopForever+0x6>)
    LDR R1, [R0]
 8000ae2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000ae4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000ae6:	4a12      	ldr	r2, [pc, #72]	; (8000b30 <LoopForever+0xa>)
    CMP R1, R2
 8000ae8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000aea:	d105      	bne.n	8000af8 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000aec:	4811      	ldr	r0, [pc, #68]	; (8000b34 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000aee:	4912      	ldr	r1, [pc, #72]	; (8000b38 <LoopForever+0x12>)
    STR R1, [R0]
 8000af0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000af2:	4812      	ldr	r0, [pc, #72]	; (8000b3c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000af4:	4912      	ldr	r1, [pc, #72]	; (8000b40 <LoopForever+0x1a>)
    STR R1, [R0]
 8000af6:	6001      	str	r1, [r0, #0]

08000af8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af8:	4812      	ldr	r0, [pc, #72]	; (8000b44 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000afa:	4913      	ldr	r1, [pc, #76]	; (8000b48 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000afc:	4a13      	ldr	r2, [pc, #76]	; (8000b4c <LoopForever+0x26>)
  movs r3, #0
 8000afe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b00:	e002      	b.n	8000b08 <LoopCopyDataInit>

08000b02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b06:	3304      	adds	r3, #4

08000b08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b0c:	d3f9      	bcc.n	8000b02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b0e:	4a10      	ldr	r2, [pc, #64]	; (8000b50 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000b10:	4c10      	ldr	r4, [pc, #64]	; (8000b54 <LoopForever+0x2e>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b14:	e001      	b.n	8000b1a <LoopFillZerobss>

08000b16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b18:	3204      	adds	r2, #4

08000b1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b1c:	d3fb      	bcc.n	8000b16 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b1e:	f003 fec3 	bl	80048a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b22:	f7ff fb9f 	bl	8000264 <main>

08000b26 <LoopForever>:

LoopForever:
    b LoopForever
 8000b26:	e7fe      	b.n	8000b26 <LoopForever>
  ldr   r0, =_estack
 8000b28:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000b2c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000b30:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000b34:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000b38:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000b3c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000b40:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b48:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b4c:	080054cc 	.word	0x080054cc
  ldr r2, =_sbss
 8000b50:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b54:	200011b0 	.word	0x200011b0

08000b58 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b58:	e7fe      	b.n	8000b58 <ADC1_IRQHandler>
	...

08000b5c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b60:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <HAL_Init+0x24>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_Init+0x24>)
 8000b66:	2110      	movs	r1, #16
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b6c:	2003      	movs	r0, #3
 8000b6e:	f7ff fed3 	bl	8000918 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b72:	f7ff fe51 	bl	8000818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b76:	2300      	movs	r3, #0
}
 8000b78:	0018      	movs	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	40022000 	.word	0x40022000

08000b84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <HAL_IncTick+0x1c>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	001a      	movs	r2, r3
 8000b8e:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <HAL_IncTick+0x20>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	18d2      	adds	r2, r2, r3
 8000b94:	4b03      	ldr	r3, [pc, #12]	; (8000ba4 <HAL_IncTick+0x20>)
 8000b96:	601a      	str	r2, [r3, #0]
}
 8000b98:	46c0      	nop			; (mov r8, r8)
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	20000008 	.word	0x20000008
 8000ba4:	20000458 	.word	0x20000458

08000ba8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bac:	4b02      	ldr	r3, [pc, #8]	; (8000bb8 <HAL_GetTick+0x10>)
 8000bae:	681b      	ldr	r3, [r3, #0]
}
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	20000458 	.word	0x20000458

08000bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	0002      	movs	r2, r0
 8000bc4:	1dfb      	adds	r3, r7, #7
 8000bc6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bc8:	1dfb      	adds	r3, r7, #7
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b7f      	cmp	r3, #127	; 0x7f
 8000bce:	d809      	bhi.n	8000be4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd0:	1dfb      	adds	r3, r7, #7
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	001a      	movs	r2, r3
 8000bd6:	231f      	movs	r3, #31
 8000bd8:	401a      	ands	r2, r3
 8000bda:	4b04      	ldr	r3, [pc, #16]	; (8000bec <__NVIC_EnableIRQ+0x30>)
 8000bdc:	2101      	movs	r1, #1
 8000bde:	4091      	lsls	r1, r2
 8000be0:	000a      	movs	r2, r1
 8000be2:	601a      	str	r2, [r3, #0]
  }
}
 8000be4:	46c0      	nop			; (mov r8, r8)
 8000be6:	46bd      	mov	sp, r7
 8000be8:	b002      	add	sp, #8
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	e000e100 	.word	0xe000e100

08000bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf0:	b590      	push	{r4, r7, lr}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	0002      	movs	r2, r0
 8000bf8:	6039      	str	r1, [r7, #0]
 8000bfa:	1dfb      	adds	r3, r7, #7
 8000bfc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bfe:	1dfb      	adds	r3, r7, #7
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2b7f      	cmp	r3, #127	; 0x7f
 8000c04:	d828      	bhi.n	8000c58 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c06:	4a2f      	ldr	r2, [pc, #188]	; (8000cc4 <__NVIC_SetPriority+0xd4>)
 8000c08:	1dfb      	adds	r3, r7, #7
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	b25b      	sxtb	r3, r3
 8000c0e:	089b      	lsrs	r3, r3, #2
 8000c10:	33c0      	adds	r3, #192	; 0xc0
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	589b      	ldr	r3, [r3, r2]
 8000c16:	1dfa      	adds	r2, r7, #7
 8000c18:	7812      	ldrb	r2, [r2, #0]
 8000c1a:	0011      	movs	r1, r2
 8000c1c:	2203      	movs	r2, #3
 8000c1e:	400a      	ands	r2, r1
 8000c20:	00d2      	lsls	r2, r2, #3
 8000c22:	21ff      	movs	r1, #255	; 0xff
 8000c24:	4091      	lsls	r1, r2
 8000c26:	000a      	movs	r2, r1
 8000c28:	43d2      	mvns	r2, r2
 8000c2a:	401a      	ands	r2, r3
 8000c2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	019b      	lsls	r3, r3, #6
 8000c32:	22ff      	movs	r2, #255	; 0xff
 8000c34:	401a      	ands	r2, r3
 8000c36:	1dfb      	adds	r3, r7, #7
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	4003      	ands	r3, r0
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c44:	481f      	ldr	r0, [pc, #124]	; (8000cc4 <__NVIC_SetPriority+0xd4>)
 8000c46:	1dfb      	adds	r3, r7, #7
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	b25b      	sxtb	r3, r3
 8000c4c:	089b      	lsrs	r3, r3, #2
 8000c4e:	430a      	orrs	r2, r1
 8000c50:	33c0      	adds	r3, #192	; 0xc0
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c56:	e031      	b.n	8000cbc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c58:	4a1b      	ldr	r2, [pc, #108]	; (8000cc8 <__NVIC_SetPriority+0xd8>)
 8000c5a:	1dfb      	adds	r3, r7, #7
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	0019      	movs	r1, r3
 8000c60:	230f      	movs	r3, #15
 8000c62:	400b      	ands	r3, r1
 8000c64:	3b08      	subs	r3, #8
 8000c66:	089b      	lsrs	r3, r3, #2
 8000c68:	3306      	adds	r3, #6
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	18d3      	adds	r3, r2, r3
 8000c6e:	3304      	adds	r3, #4
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	1dfa      	adds	r2, r7, #7
 8000c74:	7812      	ldrb	r2, [r2, #0]
 8000c76:	0011      	movs	r1, r2
 8000c78:	2203      	movs	r2, #3
 8000c7a:	400a      	ands	r2, r1
 8000c7c:	00d2      	lsls	r2, r2, #3
 8000c7e:	21ff      	movs	r1, #255	; 0xff
 8000c80:	4091      	lsls	r1, r2
 8000c82:	000a      	movs	r2, r1
 8000c84:	43d2      	mvns	r2, r2
 8000c86:	401a      	ands	r2, r3
 8000c88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	019b      	lsls	r3, r3, #6
 8000c8e:	22ff      	movs	r2, #255	; 0xff
 8000c90:	401a      	ands	r2, r3
 8000c92:	1dfb      	adds	r3, r7, #7
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	0018      	movs	r0, r3
 8000c98:	2303      	movs	r3, #3
 8000c9a:	4003      	ands	r3, r0
 8000c9c:	00db      	lsls	r3, r3, #3
 8000c9e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ca0:	4809      	ldr	r0, [pc, #36]	; (8000cc8 <__NVIC_SetPriority+0xd8>)
 8000ca2:	1dfb      	adds	r3, r7, #7
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	001c      	movs	r4, r3
 8000ca8:	230f      	movs	r3, #15
 8000caa:	4023      	ands	r3, r4
 8000cac:	3b08      	subs	r3, #8
 8000cae:	089b      	lsrs	r3, r3, #2
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	3306      	adds	r3, #6
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	18c3      	adds	r3, r0, r3
 8000cb8:	3304      	adds	r3, #4
 8000cba:	601a      	str	r2, [r3, #0]
}
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	b003      	add	sp, #12
 8000cc2:	bd90      	pop	{r4, r7, pc}
 8000cc4:	e000e100 	.word	0xe000e100
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60b9      	str	r1, [r7, #8]
 8000cd4:	607a      	str	r2, [r7, #4]
 8000cd6:	210f      	movs	r1, #15
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	1c02      	adds	r2, r0, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000cde:	68ba      	ldr	r2, [r7, #8]
 8000ce0:	187b      	adds	r3, r7, r1
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	b25b      	sxtb	r3, r3
 8000ce6:	0011      	movs	r1, r2
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f7ff ff81 	bl	8000bf0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	b004      	add	sp, #16
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	0002      	movs	r2, r0
 8000cfe:	1dfb      	adds	r3, r7, #7
 8000d00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d02:	1dfb      	adds	r3, r7, #7
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	b25b      	sxtb	r3, r3
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f7ff ff57 	bl	8000bbc <__NVIC_EnableIRQ>
}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	46bd      	mov	sp, r7
 8000d12:	b002      	add	sp, #8
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2221      	movs	r2, #33	; 0x21
 8000d22:	5c9b      	ldrb	r3, [r3, r2]
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d008      	beq.n	8000d3c <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2204      	movs	r2, #4
 8000d2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2220      	movs	r2, #32
 8000d34:	2100      	movs	r1, #0
 8000d36:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e020      	b.n	8000d7e <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	210e      	movs	r1, #14
 8000d48:	438a      	bics	r2, r1
 8000d4a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2101      	movs	r1, #1
 8000d58:	438a      	bics	r2, r1
 8000d5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d64:	2101      	movs	r1, #1
 8000d66:	4091      	lsls	r1, r2
 8000d68:	000a      	movs	r2, r1
 8000d6a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2221      	movs	r2, #33	; 0x21
 8000d70:	2101      	movs	r1, #1
 8000d72:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2220      	movs	r2, #32
 8000d78:	2100      	movs	r1, #0
 8000d7a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	0018      	movs	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	b002      	add	sp, #8
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b084      	sub	sp, #16
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d8e:	210f      	movs	r1, #15
 8000d90:	187b      	adds	r3, r7, r1
 8000d92:	2200      	movs	r2, #0
 8000d94:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2221      	movs	r2, #33	; 0x21
 8000d9a:	5c9b      	ldrb	r3, [r3, r2]
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d006      	beq.n	8000db0 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2204      	movs	r2, #4
 8000da6:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	2201      	movs	r2, #1
 8000dac:	701a      	strb	r2, [r3, #0]
 8000dae:	e028      	b.n	8000e02 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	210e      	movs	r1, #14
 8000dbc:	438a      	bics	r2, r1
 8000dbe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2101      	movs	r1, #1
 8000dcc:	438a      	bics	r2, r1
 8000dce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dd8:	2101      	movs	r1, #1
 8000dda:	4091      	lsls	r1, r2
 8000ddc:	000a      	movs	r2, r1
 8000dde:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2221      	movs	r2, #33	; 0x21
 8000de4:	2101      	movs	r1, #1
 8000de6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2220      	movs	r2, #32
 8000dec:	2100      	movs	r1, #0
 8000dee:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d004      	beq.n	8000e02 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	0010      	movs	r0, r2
 8000e00:	4798      	blx	r3
    }
  }
  return status;
 8000e02:	230f      	movs	r3, #15
 8000e04:	18fb      	adds	r3, r7, r3
 8000e06:	781b      	ldrb	r3, [r3, #0]
}
 8000e08:	0018      	movs	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	b004      	add	sp, #16
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e1e:	e149      	b.n	80010b4 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2101      	movs	r1, #1
 8000e26:	697a      	ldr	r2, [r7, #20]
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	000a      	movs	r2, r1
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d100      	bne.n	8000e38 <HAL_GPIO_Init+0x28>
 8000e36:	e13a      	b.n	80010ae <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	4013      	ands	r3, r2
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d005      	beq.n	8000e50 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	2203      	movs	r2, #3
 8000e4a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d130      	bne.n	8000eb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	409a      	lsls	r2, r3
 8000e5e:	0013      	movs	r3, r2
 8000e60:	43da      	mvns	r2, r3
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	4013      	ands	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	68da      	ldr	r2, [r3, #12]
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	409a      	lsls	r2, r3
 8000e72:	0013      	movs	r3, r2
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e86:	2201      	movs	r2, #1
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	409a      	lsls	r2, r3
 8000e8c:	0013      	movs	r3, r2
 8000e8e:	43da      	mvns	r2, r3
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	4013      	ands	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	091b      	lsrs	r3, r3, #4
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	409a      	lsls	r2, r3
 8000ea4:	0013      	movs	r3, r2
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	4013      	ands	r3, r2
 8000eba:	2b03      	cmp	r3, #3
 8000ebc:	d017      	beq.n	8000eee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	2203      	movs	r2, #3
 8000eca:	409a      	lsls	r2, r3
 8000ecc:	0013      	movs	r3, r2
 8000ece:	43da      	mvns	r2, r3
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	689a      	ldr	r2, [r3, #8]
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	409a      	lsls	r2, r3
 8000ee0:	0013      	movs	r3, r2
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d123      	bne.n	8000f42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	08da      	lsrs	r2, r3, #3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	3208      	adds	r2, #8
 8000f02:	0092      	lsls	r2, r2, #2
 8000f04:	58d3      	ldr	r3, [r2, r3]
 8000f06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	2207      	movs	r2, #7
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	220f      	movs	r2, #15
 8000f12:	409a      	lsls	r2, r3
 8000f14:	0013      	movs	r3, r2
 8000f16:	43da      	mvns	r2, r3
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	691a      	ldr	r2, [r3, #16]
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	2107      	movs	r1, #7
 8000f26:	400b      	ands	r3, r1
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	409a      	lsls	r2, r3
 8000f2c:	0013      	movs	r3, r2
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	08da      	lsrs	r2, r3, #3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3208      	adds	r2, #8
 8000f3c:	0092      	lsls	r2, r2, #2
 8000f3e:	6939      	ldr	r1, [r7, #16]
 8000f40:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	409a      	lsls	r2, r3
 8000f50:	0013      	movs	r3, r2
 8000f52:	43da      	mvns	r2, r3
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	4013      	ands	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	2203      	movs	r2, #3
 8000f60:	401a      	ands	r2, r3
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	409a      	lsls	r2, r3
 8000f68:	0013      	movs	r3, r2
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685a      	ldr	r2, [r3, #4]
 8000f7a:	23c0      	movs	r3, #192	; 0xc0
 8000f7c:	029b      	lsls	r3, r3, #10
 8000f7e:	4013      	ands	r3, r2
 8000f80:	d100      	bne.n	8000f84 <HAL_GPIO_Init+0x174>
 8000f82:	e094      	b.n	80010ae <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f84:	4b51      	ldr	r3, [pc, #324]	; (80010cc <HAL_GPIO_Init+0x2bc>)
 8000f86:	699a      	ldr	r2, [r3, #24]
 8000f88:	4b50      	ldr	r3, [pc, #320]	; (80010cc <HAL_GPIO_Init+0x2bc>)
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	619a      	str	r2, [r3, #24]
 8000f90:	4b4e      	ldr	r3, [pc, #312]	; (80010cc <HAL_GPIO_Init+0x2bc>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	2201      	movs	r2, #1
 8000f96:	4013      	ands	r3, r2
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f9c:	4a4c      	ldr	r2, [pc, #304]	; (80010d0 <HAL_GPIO_Init+0x2c0>)
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	089b      	lsrs	r3, r3, #2
 8000fa2:	3302      	adds	r3, #2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	589b      	ldr	r3, [r3, r2]
 8000fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	2203      	movs	r2, #3
 8000fae:	4013      	ands	r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	220f      	movs	r2, #15
 8000fb4:	409a      	lsls	r2, r3
 8000fb6:	0013      	movs	r3, r2
 8000fb8:	43da      	mvns	r2, r3
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	2390      	movs	r3, #144	; 0x90
 8000fc4:	05db      	lsls	r3, r3, #23
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d00d      	beq.n	8000fe6 <HAL_GPIO_Init+0x1d6>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a41      	ldr	r2, [pc, #260]	; (80010d4 <HAL_GPIO_Init+0x2c4>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d007      	beq.n	8000fe2 <HAL_GPIO_Init+0x1d2>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a40      	ldr	r2, [pc, #256]	; (80010d8 <HAL_GPIO_Init+0x2c8>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d101      	bne.n	8000fde <HAL_GPIO_Init+0x1ce>
 8000fda:	2302      	movs	r3, #2
 8000fdc:	e004      	b.n	8000fe8 <HAL_GPIO_Init+0x1d8>
 8000fde:	2305      	movs	r3, #5
 8000fe0:	e002      	b.n	8000fe8 <HAL_GPIO_Init+0x1d8>
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e000      	b.n	8000fe8 <HAL_GPIO_Init+0x1d8>
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	697a      	ldr	r2, [r7, #20]
 8000fea:	2103      	movs	r1, #3
 8000fec:	400a      	ands	r2, r1
 8000fee:	0092      	lsls	r2, r2, #2
 8000ff0:	4093      	lsls	r3, r2
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ff8:	4935      	ldr	r1, [pc, #212]	; (80010d0 <HAL_GPIO_Init+0x2c0>)
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	089b      	lsrs	r3, r3, #2
 8000ffe:	3302      	adds	r3, #2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001006:	4b35      	ldr	r3, [pc, #212]	; (80010dc <HAL_GPIO_Init+0x2cc>)
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	43da      	mvns	r2, r3
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685a      	ldr	r2, [r3, #4]
 800101a:	2380      	movs	r3, #128	; 0x80
 800101c:	035b      	lsls	r3, r3, #13
 800101e:	4013      	ands	r3, r2
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4313      	orrs	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800102a:	4b2c      	ldr	r3, [pc, #176]	; (80010dc <HAL_GPIO_Init+0x2cc>)
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001030:	4b2a      	ldr	r3, [pc, #168]	; (80010dc <HAL_GPIO_Init+0x2cc>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	43da      	mvns	r2, r3
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685a      	ldr	r2, [r3, #4]
 8001044:	2380      	movs	r3, #128	; 0x80
 8001046:	039b      	lsls	r3, r3, #14
 8001048:	4013      	ands	r3, r2
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001054:	4b21      	ldr	r3, [pc, #132]	; (80010dc <HAL_GPIO_Init+0x2cc>)
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800105a:	4b20      	ldr	r3, [pc, #128]	; (80010dc <HAL_GPIO_Init+0x2cc>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	43da      	mvns	r2, r3
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	2380      	movs	r3, #128	; 0x80
 8001070:	029b      	lsls	r3, r3, #10
 8001072:	4013      	ands	r3, r2
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800107e:	4b17      	ldr	r3, [pc, #92]	; (80010dc <HAL_GPIO_Init+0x2cc>)
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001084:	4b15      	ldr	r3, [pc, #84]	; (80010dc <HAL_GPIO_Init+0x2cc>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	43da      	mvns	r2, r3
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	2380      	movs	r3, #128	; 0x80
 800109a:	025b      	lsls	r3, r3, #9
 800109c:	4013      	ands	r3, r2
 800109e:	d003      	beq.n	80010a8 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <HAL_GPIO_Init+0x2cc>)
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	3301      	adds	r3, #1
 80010b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	40da      	lsrs	r2, r3
 80010bc:	1e13      	subs	r3, r2, #0
 80010be:	d000      	beq.n	80010c2 <HAL_GPIO_Init+0x2b2>
 80010c0:	e6ae      	b.n	8000e20 <HAL_GPIO_Init+0x10>
  } 
}
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	46c0      	nop			; (mov r8, r8)
 80010c6:	46bd      	mov	sp, r7
 80010c8:	b006      	add	sp, #24
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40010000 	.word	0x40010000
 80010d4:	48000400 	.word	0x48000400
 80010d8:	48000800 	.word	0x48000800
 80010dc:	40010400 	.word	0x40010400

080010e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	000a      	movs	r2, r1
 80010ea:	1cbb      	adds	r3, r7, #2
 80010ec:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	691b      	ldr	r3, [r3, #16]
 80010f2:	1cba      	adds	r2, r7, #2
 80010f4:	8812      	ldrh	r2, [r2, #0]
 80010f6:	4013      	ands	r3, r2
 80010f8:	d004      	beq.n	8001104 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80010fa:	230f      	movs	r3, #15
 80010fc:	18fb      	adds	r3, r7, r3
 80010fe:	2201      	movs	r2, #1
 8001100:	701a      	strb	r2, [r3, #0]
 8001102:	e003      	b.n	800110c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001104:	230f      	movs	r3, #15
 8001106:	18fb      	adds	r3, r7, r3
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800110c:	230f      	movs	r3, #15
 800110e:	18fb      	adds	r3, r7, r3
 8001110:	781b      	ldrb	r3, [r3, #0]
  }
 8001112:	0018      	movs	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	b004      	add	sp, #16
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
 8001122:	0008      	movs	r0, r1
 8001124:	0011      	movs	r1, r2
 8001126:	1cbb      	adds	r3, r7, #2
 8001128:	1c02      	adds	r2, r0, #0
 800112a:	801a      	strh	r2, [r3, #0]
 800112c:	1c7b      	adds	r3, r7, #1
 800112e:	1c0a      	adds	r2, r1, #0
 8001130:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001132:	1c7b      	adds	r3, r7, #1
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d004      	beq.n	8001144 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800113a:	1cbb      	adds	r3, r7, #2
 800113c:	881a      	ldrh	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001142:	e003      	b.n	800114c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001144:	1cbb      	adds	r3, r7, #2
 8001146:	881a      	ldrh	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800114c:	46c0      	nop			; (mov r8, r8)
 800114e:	46bd      	mov	sp, r7
 8001150:	b002      	add	sp, #8
 8001152:	bd80      	pop	{r7, pc}

08001154 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d102      	bne.n	8001168 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	f000 fb76 	bl	8001854 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2201      	movs	r2, #1
 800116e:	4013      	ands	r3, r2
 8001170:	d100      	bne.n	8001174 <HAL_RCC_OscConfig+0x20>
 8001172:	e08e      	b.n	8001292 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001174:	4bc5      	ldr	r3, [pc, #788]	; (800148c <HAL_RCC_OscConfig+0x338>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	220c      	movs	r2, #12
 800117a:	4013      	ands	r3, r2
 800117c:	2b04      	cmp	r3, #4
 800117e:	d00e      	beq.n	800119e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001180:	4bc2      	ldr	r3, [pc, #776]	; (800148c <HAL_RCC_OscConfig+0x338>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	220c      	movs	r2, #12
 8001186:	4013      	ands	r3, r2
 8001188:	2b08      	cmp	r3, #8
 800118a:	d117      	bne.n	80011bc <HAL_RCC_OscConfig+0x68>
 800118c:	4bbf      	ldr	r3, [pc, #764]	; (800148c <HAL_RCC_OscConfig+0x338>)
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	23c0      	movs	r3, #192	; 0xc0
 8001192:	025b      	lsls	r3, r3, #9
 8001194:	401a      	ands	r2, r3
 8001196:	2380      	movs	r3, #128	; 0x80
 8001198:	025b      	lsls	r3, r3, #9
 800119a:	429a      	cmp	r2, r3
 800119c:	d10e      	bne.n	80011bc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800119e:	4bbb      	ldr	r3, [pc, #748]	; (800148c <HAL_RCC_OscConfig+0x338>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	2380      	movs	r3, #128	; 0x80
 80011a4:	029b      	lsls	r3, r3, #10
 80011a6:	4013      	ands	r3, r2
 80011a8:	d100      	bne.n	80011ac <HAL_RCC_OscConfig+0x58>
 80011aa:	e071      	b.n	8001290 <HAL_RCC_OscConfig+0x13c>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d000      	beq.n	80011b6 <HAL_RCC_OscConfig+0x62>
 80011b4:	e06c      	b.n	8001290 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	f000 fb4c 	bl	8001854 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d107      	bne.n	80011d4 <HAL_RCC_OscConfig+0x80>
 80011c4:	4bb1      	ldr	r3, [pc, #708]	; (800148c <HAL_RCC_OscConfig+0x338>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4bb0      	ldr	r3, [pc, #704]	; (800148c <HAL_RCC_OscConfig+0x338>)
 80011ca:	2180      	movs	r1, #128	; 0x80
 80011cc:	0249      	lsls	r1, r1, #9
 80011ce:	430a      	orrs	r2, r1
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	e02f      	b.n	8001234 <HAL_RCC_OscConfig+0xe0>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d10c      	bne.n	80011f6 <HAL_RCC_OscConfig+0xa2>
 80011dc:	4bab      	ldr	r3, [pc, #684]	; (800148c <HAL_RCC_OscConfig+0x338>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4baa      	ldr	r3, [pc, #680]	; (800148c <HAL_RCC_OscConfig+0x338>)
 80011e2:	49ab      	ldr	r1, [pc, #684]	; (8001490 <HAL_RCC_OscConfig+0x33c>)
 80011e4:	400a      	ands	r2, r1
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	4ba8      	ldr	r3, [pc, #672]	; (800148c <HAL_RCC_OscConfig+0x338>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4ba7      	ldr	r3, [pc, #668]	; (800148c <HAL_RCC_OscConfig+0x338>)
 80011ee:	49a9      	ldr	r1, [pc, #676]	; (8001494 <HAL_RCC_OscConfig+0x340>)
 80011f0:	400a      	ands	r2, r1
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	e01e      	b.n	8001234 <HAL_RCC_OscConfig+0xe0>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b05      	cmp	r3, #5
 80011fc:	d10e      	bne.n	800121c <HAL_RCC_OscConfig+0xc8>
 80011fe:	4ba3      	ldr	r3, [pc, #652]	; (800148c <HAL_RCC_OscConfig+0x338>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	4ba2      	ldr	r3, [pc, #648]	; (800148c <HAL_RCC_OscConfig+0x338>)
 8001204:	2180      	movs	r1, #128	; 0x80
 8001206:	02c9      	lsls	r1, r1, #11
 8001208:	430a      	orrs	r2, r1
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	4b9f      	ldr	r3, [pc, #636]	; (800148c <HAL_RCC_OscConfig+0x338>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b9e      	ldr	r3, [pc, #632]	; (800148c <HAL_RCC_OscConfig+0x338>)
 8001212:	2180      	movs	r1, #128	; 0x80
 8001214:	0249      	lsls	r1, r1, #9
 8001216:	430a      	orrs	r2, r1
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	e00b      	b.n	8001234 <HAL_RCC_OscConfig+0xe0>
 800121c:	4b9b      	ldr	r3, [pc, #620]	; (800148c <HAL_RCC_OscConfig+0x338>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b9a      	ldr	r3, [pc, #616]	; (800148c <HAL_RCC_OscConfig+0x338>)
 8001222:	499b      	ldr	r1, [pc, #620]	; (8001490 <HAL_RCC_OscConfig+0x33c>)
 8001224:	400a      	ands	r2, r1
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	4b98      	ldr	r3, [pc, #608]	; (800148c <HAL_RCC_OscConfig+0x338>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b97      	ldr	r3, [pc, #604]	; (800148c <HAL_RCC_OscConfig+0x338>)
 800122e:	4999      	ldr	r1, [pc, #612]	; (8001494 <HAL_RCC_OscConfig+0x340>)
 8001230:	400a      	ands	r2, r1
 8001232:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d014      	beq.n	8001266 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123c:	f7ff fcb4 	bl	8000ba8 <HAL_GetTick>
 8001240:	0003      	movs	r3, r0
 8001242:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001244:	e008      	b.n	8001258 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001246:	f7ff fcaf 	bl	8000ba8 <HAL_GetTick>
 800124a:	0002      	movs	r2, r0
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b64      	cmp	r3, #100	; 0x64
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e2fd      	b.n	8001854 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001258:	4b8c      	ldr	r3, [pc, #560]	; (800148c <HAL_RCC_OscConfig+0x338>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	2380      	movs	r3, #128	; 0x80
 800125e:	029b      	lsls	r3, r3, #10
 8001260:	4013      	ands	r3, r2
 8001262:	d0f0      	beq.n	8001246 <HAL_RCC_OscConfig+0xf2>
 8001264:	e015      	b.n	8001292 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001266:	f7ff fc9f 	bl	8000ba8 <HAL_GetTick>
 800126a:	0003      	movs	r3, r0
 800126c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001270:	f7ff fc9a 	bl	8000ba8 <HAL_GetTick>
 8001274:	0002      	movs	r2, r0
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b64      	cmp	r3, #100	; 0x64
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e2e8      	b.n	8001854 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001282:	4b82      	ldr	r3, [pc, #520]	; (800148c <HAL_RCC_OscConfig+0x338>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	2380      	movs	r3, #128	; 0x80
 8001288:	029b      	lsls	r3, r3, #10
 800128a:	4013      	ands	r3, r2
 800128c:	d1f0      	bne.n	8001270 <HAL_RCC_OscConfig+0x11c>
 800128e:	e000      	b.n	8001292 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001290:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2202      	movs	r2, #2
 8001298:	4013      	ands	r3, r2
 800129a:	d100      	bne.n	800129e <HAL_RCC_OscConfig+0x14a>
 800129c:	e06c      	b.n	8001378 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800129e:	4b7b      	ldr	r3, [pc, #492]	; (800148c <HAL_RCC_OscConfig+0x338>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	220c      	movs	r2, #12
 80012a4:	4013      	ands	r3, r2
 80012a6:	d00e      	beq.n	80012c6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80012a8:	4b78      	ldr	r3, [pc, #480]	; (800148c <HAL_RCC_OscConfig+0x338>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	220c      	movs	r2, #12
 80012ae:	4013      	ands	r3, r2
 80012b0:	2b08      	cmp	r3, #8
 80012b2:	d11f      	bne.n	80012f4 <HAL_RCC_OscConfig+0x1a0>
 80012b4:	4b75      	ldr	r3, [pc, #468]	; (800148c <HAL_RCC_OscConfig+0x338>)
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	23c0      	movs	r3, #192	; 0xc0
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	401a      	ands	r2, r3
 80012be:	2380      	movs	r3, #128	; 0x80
 80012c0:	021b      	lsls	r3, r3, #8
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d116      	bne.n	80012f4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012c6:	4b71      	ldr	r3, [pc, #452]	; (800148c <HAL_RCC_OscConfig+0x338>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2202      	movs	r2, #2
 80012cc:	4013      	ands	r3, r2
 80012ce:	d005      	beq.n	80012dc <HAL_RCC_OscConfig+0x188>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d001      	beq.n	80012dc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e2bb      	b.n	8001854 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012dc:	4b6b      	ldr	r3, [pc, #428]	; (800148c <HAL_RCC_OscConfig+0x338>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	22f8      	movs	r2, #248	; 0xf8
 80012e2:	4393      	bics	r3, r2
 80012e4:	0019      	movs	r1, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	00da      	lsls	r2, r3, #3
 80012ec:	4b67      	ldr	r3, [pc, #412]	; (800148c <HAL_RCC_OscConfig+0x338>)
 80012ee:	430a      	orrs	r2, r1
 80012f0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012f2:	e041      	b.n	8001378 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d024      	beq.n	8001346 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012fc:	4b63      	ldr	r3, [pc, #396]	; (800148c <HAL_RCC_OscConfig+0x338>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b62      	ldr	r3, [pc, #392]	; (800148c <HAL_RCC_OscConfig+0x338>)
 8001302:	2101      	movs	r1, #1
 8001304:	430a      	orrs	r2, r1
 8001306:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff fc4e 	bl	8000ba8 <HAL_GetTick>
 800130c:	0003      	movs	r3, r0
 800130e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001312:	f7ff fc49 	bl	8000ba8 <HAL_GetTick>
 8001316:	0002      	movs	r2, r0
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e297      	b.n	8001854 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001324:	4b59      	ldr	r3, [pc, #356]	; (800148c <HAL_RCC_OscConfig+0x338>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2202      	movs	r2, #2
 800132a:	4013      	ands	r3, r2
 800132c:	d0f1      	beq.n	8001312 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132e:	4b57      	ldr	r3, [pc, #348]	; (800148c <HAL_RCC_OscConfig+0x338>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	22f8      	movs	r2, #248	; 0xf8
 8001334:	4393      	bics	r3, r2
 8001336:	0019      	movs	r1, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	691b      	ldr	r3, [r3, #16]
 800133c:	00da      	lsls	r2, r3, #3
 800133e:	4b53      	ldr	r3, [pc, #332]	; (800148c <HAL_RCC_OscConfig+0x338>)
 8001340:	430a      	orrs	r2, r1
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	e018      	b.n	8001378 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001346:	4b51      	ldr	r3, [pc, #324]	; (800148c <HAL_RCC_OscConfig+0x338>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	4b50      	ldr	r3, [pc, #320]	; (800148c <HAL_RCC_OscConfig+0x338>)
 800134c:	2101      	movs	r1, #1
 800134e:	438a      	bics	r2, r1
 8001350:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001352:	f7ff fc29 	bl	8000ba8 <HAL_GetTick>
 8001356:	0003      	movs	r3, r0
 8001358:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800135c:	f7ff fc24 	bl	8000ba8 <HAL_GetTick>
 8001360:	0002      	movs	r2, r0
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e272      	b.n	8001854 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800136e:	4b47      	ldr	r3, [pc, #284]	; (800148c <HAL_RCC_OscConfig+0x338>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2202      	movs	r2, #2
 8001374:	4013      	ands	r3, r2
 8001376:	d1f1      	bne.n	800135c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2208      	movs	r2, #8
 800137e:	4013      	ands	r3, r2
 8001380:	d036      	beq.n	80013f0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d019      	beq.n	80013be <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800138a:	4b40      	ldr	r3, [pc, #256]	; (800148c <HAL_RCC_OscConfig+0x338>)
 800138c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800138e:	4b3f      	ldr	r3, [pc, #252]	; (800148c <HAL_RCC_OscConfig+0x338>)
 8001390:	2101      	movs	r1, #1
 8001392:	430a      	orrs	r2, r1
 8001394:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001396:	f7ff fc07 	bl	8000ba8 <HAL_GetTick>
 800139a:	0003      	movs	r3, r0
 800139c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013a0:	f7ff fc02 	bl	8000ba8 <HAL_GetTick>
 80013a4:	0002      	movs	r2, r0
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e250      	b.n	8001854 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b2:	4b36      	ldr	r3, [pc, #216]	; (800148c <HAL_RCC_OscConfig+0x338>)
 80013b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b6:	2202      	movs	r2, #2
 80013b8:	4013      	ands	r3, r2
 80013ba:	d0f1      	beq.n	80013a0 <HAL_RCC_OscConfig+0x24c>
 80013bc:	e018      	b.n	80013f0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013be:	4b33      	ldr	r3, [pc, #204]	; (800148c <HAL_RCC_OscConfig+0x338>)
 80013c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013c2:	4b32      	ldr	r3, [pc, #200]	; (800148c <HAL_RCC_OscConfig+0x338>)
 80013c4:	2101      	movs	r1, #1
 80013c6:	438a      	bics	r2, r1
 80013c8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ca:	f7ff fbed 	bl	8000ba8 <HAL_GetTick>
 80013ce:	0003      	movs	r3, r0
 80013d0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013d4:	f7ff fbe8 	bl	8000ba8 <HAL_GetTick>
 80013d8:	0002      	movs	r2, r0
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e236      	b.n	8001854 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e6:	4b29      	ldr	r3, [pc, #164]	; (800148c <HAL_RCC_OscConfig+0x338>)
 80013e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ea:	2202      	movs	r2, #2
 80013ec:	4013      	ands	r3, r2
 80013ee:	d1f1      	bne.n	80013d4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2204      	movs	r2, #4
 80013f6:	4013      	ands	r3, r2
 80013f8:	d100      	bne.n	80013fc <HAL_RCC_OscConfig+0x2a8>
 80013fa:	e0b5      	b.n	8001568 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013fc:	201f      	movs	r0, #31
 80013fe:	183b      	adds	r3, r7, r0
 8001400:	2200      	movs	r2, #0
 8001402:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001404:	4b21      	ldr	r3, [pc, #132]	; (800148c <HAL_RCC_OscConfig+0x338>)
 8001406:	69da      	ldr	r2, [r3, #28]
 8001408:	2380      	movs	r3, #128	; 0x80
 800140a:	055b      	lsls	r3, r3, #21
 800140c:	4013      	ands	r3, r2
 800140e:	d110      	bne.n	8001432 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001410:	4b1e      	ldr	r3, [pc, #120]	; (800148c <HAL_RCC_OscConfig+0x338>)
 8001412:	69da      	ldr	r2, [r3, #28]
 8001414:	4b1d      	ldr	r3, [pc, #116]	; (800148c <HAL_RCC_OscConfig+0x338>)
 8001416:	2180      	movs	r1, #128	; 0x80
 8001418:	0549      	lsls	r1, r1, #21
 800141a:	430a      	orrs	r2, r1
 800141c:	61da      	str	r2, [r3, #28]
 800141e:	4b1b      	ldr	r3, [pc, #108]	; (800148c <HAL_RCC_OscConfig+0x338>)
 8001420:	69da      	ldr	r2, [r3, #28]
 8001422:	2380      	movs	r3, #128	; 0x80
 8001424:	055b      	lsls	r3, r3, #21
 8001426:	4013      	ands	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800142c:	183b      	adds	r3, r7, r0
 800142e:	2201      	movs	r2, #1
 8001430:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001432:	4b19      	ldr	r3, [pc, #100]	; (8001498 <HAL_RCC_OscConfig+0x344>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	2380      	movs	r3, #128	; 0x80
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	4013      	ands	r3, r2
 800143c:	d11a      	bne.n	8001474 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800143e:	4b16      	ldr	r3, [pc, #88]	; (8001498 <HAL_RCC_OscConfig+0x344>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <HAL_RCC_OscConfig+0x344>)
 8001444:	2180      	movs	r1, #128	; 0x80
 8001446:	0049      	lsls	r1, r1, #1
 8001448:	430a      	orrs	r2, r1
 800144a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800144c:	f7ff fbac 	bl	8000ba8 <HAL_GetTick>
 8001450:	0003      	movs	r3, r0
 8001452:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001456:	f7ff fba7 	bl	8000ba8 <HAL_GetTick>
 800145a:	0002      	movs	r2, r0
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b64      	cmp	r3, #100	; 0x64
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e1f5      	b.n	8001854 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001468:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <HAL_RCC_OscConfig+0x344>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	2380      	movs	r3, #128	; 0x80
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	4013      	ands	r3, r2
 8001472:	d0f0      	beq.n	8001456 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d10f      	bne.n	800149c <HAL_RCC_OscConfig+0x348>
 800147c:	4b03      	ldr	r3, [pc, #12]	; (800148c <HAL_RCC_OscConfig+0x338>)
 800147e:	6a1a      	ldr	r2, [r3, #32]
 8001480:	4b02      	ldr	r3, [pc, #8]	; (800148c <HAL_RCC_OscConfig+0x338>)
 8001482:	2101      	movs	r1, #1
 8001484:	430a      	orrs	r2, r1
 8001486:	621a      	str	r2, [r3, #32]
 8001488:	e036      	b.n	80014f8 <HAL_RCC_OscConfig+0x3a4>
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	40021000 	.word	0x40021000
 8001490:	fffeffff 	.word	0xfffeffff
 8001494:	fffbffff 	.word	0xfffbffff
 8001498:	40007000 	.word	0x40007000
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d10c      	bne.n	80014be <HAL_RCC_OscConfig+0x36a>
 80014a4:	4bca      	ldr	r3, [pc, #808]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 80014a6:	6a1a      	ldr	r2, [r3, #32]
 80014a8:	4bc9      	ldr	r3, [pc, #804]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 80014aa:	2101      	movs	r1, #1
 80014ac:	438a      	bics	r2, r1
 80014ae:	621a      	str	r2, [r3, #32]
 80014b0:	4bc7      	ldr	r3, [pc, #796]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 80014b2:	6a1a      	ldr	r2, [r3, #32]
 80014b4:	4bc6      	ldr	r3, [pc, #792]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 80014b6:	2104      	movs	r1, #4
 80014b8:	438a      	bics	r2, r1
 80014ba:	621a      	str	r2, [r3, #32]
 80014bc:	e01c      	b.n	80014f8 <HAL_RCC_OscConfig+0x3a4>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	2b05      	cmp	r3, #5
 80014c4:	d10c      	bne.n	80014e0 <HAL_RCC_OscConfig+0x38c>
 80014c6:	4bc2      	ldr	r3, [pc, #776]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 80014c8:	6a1a      	ldr	r2, [r3, #32]
 80014ca:	4bc1      	ldr	r3, [pc, #772]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 80014cc:	2104      	movs	r1, #4
 80014ce:	430a      	orrs	r2, r1
 80014d0:	621a      	str	r2, [r3, #32]
 80014d2:	4bbf      	ldr	r3, [pc, #764]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 80014d4:	6a1a      	ldr	r2, [r3, #32]
 80014d6:	4bbe      	ldr	r3, [pc, #760]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 80014d8:	2101      	movs	r1, #1
 80014da:	430a      	orrs	r2, r1
 80014dc:	621a      	str	r2, [r3, #32]
 80014de:	e00b      	b.n	80014f8 <HAL_RCC_OscConfig+0x3a4>
 80014e0:	4bbb      	ldr	r3, [pc, #748]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 80014e2:	6a1a      	ldr	r2, [r3, #32]
 80014e4:	4bba      	ldr	r3, [pc, #744]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 80014e6:	2101      	movs	r1, #1
 80014e8:	438a      	bics	r2, r1
 80014ea:	621a      	str	r2, [r3, #32]
 80014ec:	4bb8      	ldr	r3, [pc, #736]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 80014ee:	6a1a      	ldr	r2, [r3, #32]
 80014f0:	4bb7      	ldr	r3, [pc, #732]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 80014f2:	2104      	movs	r1, #4
 80014f4:	438a      	bics	r2, r1
 80014f6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d014      	beq.n	800152a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001500:	f7ff fb52 	bl	8000ba8 <HAL_GetTick>
 8001504:	0003      	movs	r3, r0
 8001506:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001508:	e009      	b.n	800151e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800150a:	f7ff fb4d 	bl	8000ba8 <HAL_GetTick>
 800150e:	0002      	movs	r2, r0
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	4aaf      	ldr	r2, [pc, #700]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e19a      	b.n	8001854 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800151e:	4bac      	ldr	r3, [pc, #688]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 8001520:	6a1b      	ldr	r3, [r3, #32]
 8001522:	2202      	movs	r2, #2
 8001524:	4013      	ands	r3, r2
 8001526:	d0f0      	beq.n	800150a <HAL_RCC_OscConfig+0x3b6>
 8001528:	e013      	b.n	8001552 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800152a:	f7ff fb3d 	bl	8000ba8 <HAL_GetTick>
 800152e:	0003      	movs	r3, r0
 8001530:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001532:	e009      	b.n	8001548 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001534:	f7ff fb38 	bl	8000ba8 <HAL_GetTick>
 8001538:	0002      	movs	r2, r0
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	4aa5      	ldr	r2, [pc, #660]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e185      	b.n	8001854 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001548:	4ba1      	ldr	r3, [pc, #644]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	2202      	movs	r2, #2
 800154e:	4013      	ands	r3, r2
 8001550:	d1f0      	bne.n	8001534 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001552:	231f      	movs	r3, #31
 8001554:	18fb      	adds	r3, r7, r3
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d105      	bne.n	8001568 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800155c:	4b9c      	ldr	r3, [pc, #624]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 800155e:	69da      	ldr	r2, [r3, #28]
 8001560:	4b9b      	ldr	r3, [pc, #620]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 8001562:	499d      	ldr	r1, [pc, #628]	; (80017d8 <HAL_RCC_OscConfig+0x684>)
 8001564:	400a      	ands	r2, r1
 8001566:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2210      	movs	r2, #16
 800156e:	4013      	ands	r3, r2
 8001570:	d063      	beq.n	800163a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d12a      	bne.n	80015d0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800157a:	4b95      	ldr	r3, [pc, #596]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 800157c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800157e:	4b94      	ldr	r3, [pc, #592]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 8001580:	2104      	movs	r1, #4
 8001582:	430a      	orrs	r2, r1
 8001584:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001586:	4b92      	ldr	r3, [pc, #584]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 8001588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800158a:	4b91      	ldr	r3, [pc, #580]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 800158c:	2101      	movs	r1, #1
 800158e:	430a      	orrs	r2, r1
 8001590:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001592:	f7ff fb09 	bl	8000ba8 <HAL_GetTick>
 8001596:	0003      	movs	r3, r0
 8001598:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800159c:	f7ff fb04 	bl	8000ba8 <HAL_GetTick>
 80015a0:	0002      	movs	r2, r0
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e152      	b.n	8001854 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015ae:	4b88      	ldr	r3, [pc, #544]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 80015b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015b2:	2202      	movs	r2, #2
 80015b4:	4013      	ands	r3, r2
 80015b6:	d0f1      	beq.n	800159c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015b8:	4b85      	ldr	r3, [pc, #532]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 80015ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015bc:	22f8      	movs	r2, #248	; 0xf8
 80015be:	4393      	bics	r3, r2
 80015c0:	0019      	movs	r1, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	00da      	lsls	r2, r3, #3
 80015c8:	4b81      	ldr	r3, [pc, #516]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 80015ca:	430a      	orrs	r2, r1
 80015cc:	635a      	str	r2, [r3, #52]	; 0x34
 80015ce:	e034      	b.n	800163a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	3305      	adds	r3, #5
 80015d6:	d111      	bne.n	80015fc <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80015d8:	4b7d      	ldr	r3, [pc, #500]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 80015da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015dc:	4b7c      	ldr	r3, [pc, #496]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 80015de:	2104      	movs	r1, #4
 80015e0:	438a      	bics	r2, r1
 80015e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015e4:	4b7a      	ldr	r3, [pc, #488]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 80015e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015e8:	22f8      	movs	r2, #248	; 0xf8
 80015ea:	4393      	bics	r3, r2
 80015ec:	0019      	movs	r1, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	00da      	lsls	r2, r3, #3
 80015f4:	4b76      	ldr	r3, [pc, #472]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 80015f6:	430a      	orrs	r2, r1
 80015f8:	635a      	str	r2, [r3, #52]	; 0x34
 80015fa:	e01e      	b.n	800163a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80015fc:	4b74      	ldr	r3, [pc, #464]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 80015fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001600:	4b73      	ldr	r3, [pc, #460]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 8001602:	2104      	movs	r1, #4
 8001604:	430a      	orrs	r2, r1
 8001606:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001608:	4b71      	ldr	r3, [pc, #452]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 800160a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800160c:	4b70      	ldr	r3, [pc, #448]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 800160e:	2101      	movs	r1, #1
 8001610:	438a      	bics	r2, r1
 8001612:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001614:	f7ff fac8 	bl	8000ba8 <HAL_GetTick>
 8001618:	0003      	movs	r3, r0
 800161a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800161e:	f7ff fac3 	bl	8000ba8 <HAL_GetTick>
 8001622:	0002      	movs	r2, r0
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e111      	b.n	8001854 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001630:	4b67      	ldr	r3, [pc, #412]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 8001632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001634:	2202      	movs	r2, #2
 8001636:	4013      	ands	r3, r2
 8001638:	d1f1      	bne.n	800161e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2220      	movs	r2, #32
 8001640:	4013      	ands	r3, r2
 8001642:	d05c      	beq.n	80016fe <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001644:	4b62      	ldr	r3, [pc, #392]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	220c      	movs	r2, #12
 800164a:	4013      	ands	r3, r2
 800164c:	2b0c      	cmp	r3, #12
 800164e:	d00e      	beq.n	800166e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001650:	4b5f      	ldr	r3, [pc, #380]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	220c      	movs	r2, #12
 8001656:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001658:	2b08      	cmp	r3, #8
 800165a:	d114      	bne.n	8001686 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800165c:	4b5c      	ldr	r3, [pc, #368]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 800165e:	685a      	ldr	r2, [r3, #4]
 8001660:	23c0      	movs	r3, #192	; 0xc0
 8001662:	025b      	lsls	r3, r3, #9
 8001664:	401a      	ands	r2, r3
 8001666:	23c0      	movs	r3, #192	; 0xc0
 8001668:	025b      	lsls	r3, r3, #9
 800166a:	429a      	cmp	r2, r3
 800166c:	d10b      	bne.n	8001686 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800166e:	4b58      	ldr	r3, [pc, #352]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 8001670:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001672:	2380      	movs	r3, #128	; 0x80
 8001674:	029b      	lsls	r3, r3, #10
 8001676:	4013      	ands	r3, r2
 8001678:	d040      	beq.n	80016fc <HAL_RCC_OscConfig+0x5a8>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d03c      	beq.n	80016fc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e0e6      	b.n	8001854 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a1b      	ldr	r3, [r3, #32]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d01b      	beq.n	80016c6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800168e:	4b50      	ldr	r3, [pc, #320]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 8001690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001692:	4b4f      	ldr	r3, [pc, #316]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 8001694:	2180      	movs	r1, #128	; 0x80
 8001696:	0249      	lsls	r1, r1, #9
 8001698:	430a      	orrs	r2, r1
 800169a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169c:	f7ff fa84 	bl	8000ba8 <HAL_GetTick>
 80016a0:	0003      	movs	r3, r0
 80016a2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016a6:	f7ff fa7f 	bl	8000ba8 <HAL_GetTick>
 80016aa:	0002      	movs	r2, r0
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e0cd      	b.n	8001854 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80016b8:	4b45      	ldr	r3, [pc, #276]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 80016ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016bc:	2380      	movs	r3, #128	; 0x80
 80016be:	029b      	lsls	r3, r3, #10
 80016c0:	4013      	ands	r3, r2
 80016c2:	d0f0      	beq.n	80016a6 <HAL_RCC_OscConfig+0x552>
 80016c4:	e01b      	b.n	80016fe <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80016c6:	4b42      	ldr	r3, [pc, #264]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 80016c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016ca:	4b41      	ldr	r3, [pc, #260]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 80016cc:	4943      	ldr	r1, [pc, #268]	; (80017dc <HAL_RCC_OscConfig+0x688>)
 80016ce:	400a      	ands	r2, r1
 80016d0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d2:	f7ff fa69 	bl	8000ba8 <HAL_GetTick>
 80016d6:	0003      	movs	r3, r0
 80016d8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016dc:	f7ff fa64 	bl	8000ba8 <HAL_GetTick>
 80016e0:	0002      	movs	r2, r0
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e0b2      	b.n	8001854 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80016ee:	4b38      	ldr	r3, [pc, #224]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 80016f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	029b      	lsls	r3, r3, #10
 80016f6:	4013      	ands	r3, r2
 80016f8:	d1f0      	bne.n	80016dc <HAL_RCC_OscConfig+0x588>
 80016fa:	e000      	b.n	80016fe <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80016fc:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001702:	2b00      	cmp	r3, #0
 8001704:	d100      	bne.n	8001708 <HAL_RCC_OscConfig+0x5b4>
 8001706:	e0a4      	b.n	8001852 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001708:	4b31      	ldr	r3, [pc, #196]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	220c      	movs	r2, #12
 800170e:	4013      	ands	r3, r2
 8001710:	2b08      	cmp	r3, #8
 8001712:	d100      	bne.n	8001716 <HAL_RCC_OscConfig+0x5c2>
 8001714:	e078      	b.n	8001808 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171a:	2b02      	cmp	r3, #2
 800171c:	d14c      	bne.n	80017b8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800171e:	4b2c      	ldr	r3, [pc, #176]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	4b2b      	ldr	r3, [pc, #172]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 8001724:	492e      	ldr	r1, [pc, #184]	; (80017e0 <HAL_RCC_OscConfig+0x68c>)
 8001726:	400a      	ands	r2, r1
 8001728:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172a:	f7ff fa3d 	bl	8000ba8 <HAL_GetTick>
 800172e:	0003      	movs	r3, r0
 8001730:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001734:	f7ff fa38 	bl	8000ba8 <HAL_GetTick>
 8001738:	0002      	movs	r2, r0
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e086      	b.n	8001854 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001746:	4b22      	ldr	r3, [pc, #136]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	2380      	movs	r3, #128	; 0x80
 800174c:	049b      	lsls	r3, r3, #18
 800174e:	4013      	ands	r3, r2
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001752:	4b1f      	ldr	r3, [pc, #124]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 8001754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001756:	220f      	movs	r2, #15
 8001758:	4393      	bics	r3, r2
 800175a:	0019      	movs	r1, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001760:	4b1b      	ldr	r3, [pc, #108]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 8001762:	430a      	orrs	r2, r1
 8001764:	62da      	str	r2, [r3, #44]	; 0x2c
 8001766:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	4a1e      	ldr	r2, [pc, #120]	; (80017e4 <HAL_RCC_OscConfig+0x690>)
 800176c:	4013      	ands	r3, r2
 800176e:	0019      	movs	r1, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001778:	431a      	orrs	r2, r3
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 800177c:	430a      	orrs	r2, r1
 800177e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001780:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 8001786:	2180      	movs	r1, #128	; 0x80
 8001788:	0449      	lsls	r1, r1, #17
 800178a:	430a      	orrs	r2, r1
 800178c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178e:	f7ff fa0b 	bl	8000ba8 <HAL_GetTick>
 8001792:	0003      	movs	r3, r0
 8001794:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001798:	f7ff fa06 	bl	8000ba8 <HAL_GetTick>
 800179c:	0002      	movs	r2, r0
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e054      	b.n	8001854 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	2380      	movs	r3, #128	; 0x80
 80017b0:	049b      	lsls	r3, r3, #18
 80017b2:	4013      	ands	r3, r2
 80017b4:	d0f0      	beq.n	8001798 <HAL_RCC_OscConfig+0x644>
 80017b6:	e04c      	b.n	8001852 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b8:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <HAL_RCC_OscConfig+0x67c>)
 80017be:	4908      	ldr	r1, [pc, #32]	; (80017e0 <HAL_RCC_OscConfig+0x68c>)
 80017c0:	400a      	ands	r2, r1
 80017c2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c4:	f7ff f9f0 	bl	8000ba8 <HAL_GetTick>
 80017c8:	0003      	movs	r3, r0
 80017ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017cc:	e015      	b.n	80017fa <HAL_RCC_OscConfig+0x6a6>
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	40021000 	.word	0x40021000
 80017d4:	00001388 	.word	0x00001388
 80017d8:	efffffff 	.word	0xefffffff
 80017dc:	fffeffff 	.word	0xfffeffff
 80017e0:	feffffff 	.word	0xfeffffff
 80017e4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e8:	f7ff f9de 	bl	8000ba8 <HAL_GetTick>
 80017ec:	0002      	movs	r2, r0
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e02c      	b.n	8001854 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017fa:	4b18      	ldr	r3, [pc, #96]	; (800185c <HAL_RCC_OscConfig+0x708>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	2380      	movs	r3, #128	; 0x80
 8001800:	049b      	lsls	r3, r3, #18
 8001802:	4013      	ands	r3, r2
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x694>
 8001806:	e024      	b.n	8001852 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180c:	2b01      	cmp	r3, #1
 800180e:	d101      	bne.n	8001814 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e01f      	b.n	8001854 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <HAL_RCC_OscConfig+0x708>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800181a:	4b10      	ldr	r3, [pc, #64]	; (800185c <HAL_RCC_OscConfig+0x708>)
 800181c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	23c0      	movs	r3, #192	; 0xc0
 8001824:	025b      	lsls	r3, r3, #9
 8001826:	401a      	ands	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182c:	429a      	cmp	r2, r3
 800182e:	d10e      	bne.n	800184e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	220f      	movs	r2, #15
 8001834:	401a      	ands	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800183a:	429a      	cmp	r2, r3
 800183c:	d107      	bne.n	800184e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	23f0      	movs	r3, #240	; 0xf0
 8001842:	039b      	lsls	r3, r3, #14
 8001844:	401a      	ands	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800184a:	429a      	cmp	r2, r3
 800184c:	d001      	beq.n	8001852 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e000      	b.n	8001854 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	0018      	movs	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	b008      	add	sp, #32
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40021000 	.word	0x40021000

08001860 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e0bf      	b.n	80019f4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001874:	4b61      	ldr	r3, [pc, #388]	; (80019fc <HAL_RCC_ClockConfig+0x19c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2201      	movs	r2, #1
 800187a:	4013      	ands	r3, r2
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	429a      	cmp	r2, r3
 8001880:	d911      	bls.n	80018a6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001882:	4b5e      	ldr	r3, [pc, #376]	; (80019fc <HAL_RCC_ClockConfig+0x19c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2201      	movs	r2, #1
 8001888:	4393      	bics	r3, r2
 800188a:	0019      	movs	r1, r3
 800188c:	4b5b      	ldr	r3, [pc, #364]	; (80019fc <HAL_RCC_ClockConfig+0x19c>)
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	430a      	orrs	r2, r1
 8001892:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001894:	4b59      	ldr	r3, [pc, #356]	; (80019fc <HAL_RCC_ClockConfig+0x19c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2201      	movs	r2, #1
 800189a:	4013      	ands	r3, r2
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d001      	beq.n	80018a6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e0a6      	b.n	80019f4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2202      	movs	r2, #2
 80018ac:	4013      	ands	r3, r2
 80018ae:	d015      	beq.n	80018dc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2204      	movs	r2, #4
 80018b6:	4013      	ands	r3, r2
 80018b8:	d006      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80018ba:	4b51      	ldr	r3, [pc, #324]	; (8001a00 <HAL_RCC_ClockConfig+0x1a0>)
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	4b50      	ldr	r3, [pc, #320]	; (8001a00 <HAL_RCC_ClockConfig+0x1a0>)
 80018c0:	21e0      	movs	r1, #224	; 0xe0
 80018c2:	00c9      	lsls	r1, r1, #3
 80018c4:	430a      	orrs	r2, r1
 80018c6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c8:	4b4d      	ldr	r3, [pc, #308]	; (8001a00 <HAL_RCC_ClockConfig+0x1a0>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	22f0      	movs	r2, #240	; 0xf0
 80018ce:	4393      	bics	r3, r2
 80018d0:	0019      	movs	r1, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689a      	ldr	r2, [r3, #8]
 80018d6:	4b4a      	ldr	r3, [pc, #296]	; (8001a00 <HAL_RCC_ClockConfig+0x1a0>)
 80018d8:	430a      	orrs	r2, r1
 80018da:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2201      	movs	r2, #1
 80018e2:	4013      	ands	r3, r2
 80018e4:	d04c      	beq.n	8001980 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d107      	bne.n	80018fe <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ee:	4b44      	ldr	r3, [pc, #272]	; (8001a00 <HAL_RCC_ClockConfig+0x1a0>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	2380      	movs	r3, #128	; 0x80
 80018f4:	029b      	lsls	r3, r3, #10
 80018f6:	4013      	ands	r3, r2
 80018f8:	d120      	bne.n	800193c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e07a      	b.n	80019f4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b02      	cmp	r3, #2
 8001904:	d107      	bne.n	8001916 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001906:	4b3e      	ldr	r3, [pc, #248]	; (8001a00 <HAL_RCC_ClockConfig+0x1a0>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	2380      	movs	r3, #128	; 0x80
 800190c:	049b      	lsls	r3, r3, #18
 800190e:	4013      	ands	r3, r2
 8001910:	d114      	bne.n	800193c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e06e      	b.n	80019f4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b03      	cmp	r3, #3
 800191c:	d107      	bne.n	800192e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800191e:	4b38      	ldr	r3, [pc, #224]	; (8001a00 <HAL_RCC_ClockConfig+0x1a0>)
 8001920:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001922:	2380      	movs	r3, #128	; 0x80
 8001924:	029b      	lsls	r3, r3, #10
 8001926:	4013      	ands	r3, r2
 8001928:	d108      	bne.n	800193c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e062      	b.n	80019f4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800192e:	4b34      	ldr	r3, [pc, #208]	; (8001a00 <HAL_RCC_ClockConfig+0x1a0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2202      	movs	r2, #2
 8001934:	4013      	ands	r3, r2
 8001936:	d101      	bne.n	800193c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e05b      	b.n	80019f4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800193c:	4b30      	ldr	r3, [pc, #192]	; (8001a00 <HAL_RCC_ClockConfig+0x1a0>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2203      	movs	r2, #3
 8001942:	4393      	bics	r3, r2
 8001944:	0019      	movs	r1, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	4b2d      	ldr	r3, [pc, #180]	; (8001a00 <HAL_RCC_ClockConfig+0x1a0>)
 800194c:	430a      	orrs	r2, r1
 800194e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001950:	f7ff f92a 	bl	8000ba8 <HAL_GetTick>
 8001954:	0003      	movs	r3, r0
 8001956:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001958:	e009      	b.n	800196e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800195a:	f7ff f925 	bl	8000ba8 <HAL_GetTick>
 800195e:	0002      	movs	r2, r0
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	4a27      	ldr	r2, [pc, #156]	; (8001a04 <HAL_RCC_ClockConfig+0x1a4>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d901      	bls.n	800196e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e042      	b.n	80019f4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800196e:	4b24      	ldr	r3, [pc, #144]	; (8001a00 <HAL_RCC_ClockConfig+0x1a0>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	220c      	movs	r2, #12
 8001974:	401a      	ands	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	429a      	cmp	r2, r3
 800197e:	d1ec      	bne.n	800195a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001980:	4b1e      	ldr	r3, [pc, #120]	; (80019fc <HAL_RCC_ClockConfig+0x19c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2201      	movs	r2, #1
 8001986:	4013      	ands	r3, r2
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	429a      	cmp	r2, r3
 800198c:	d211      	bcs.n	80019b2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198e:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <HAL_RCC_ClockConfig+0x19c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2201      	movs	r2, #1
 8001994:	4393      	bics	r3, r2
 8001996:	0019      	movs	r1, r3
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <HAL_RCC_ClockConfig+0x19c>)
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	430a      	orrs	r2, r1
 800199e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a0:	4b16      	ldr	r3, [pc, #88]	; (80019fc <HAL_RCC_ClockConfig+0x19c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2201      	movs	r2, #1
 80019a6:	4013      	ands	r3, r2
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d001      	beq.n	80019b2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e020      	b.n	80019f4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2204      	movs	r2, #4
 80019b8:	4013      	ands	r3, r2
 80019ba:	d009      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80019bc:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <HAL_RCC_ClockConfig+0x1a0>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	4a11      	ldr	r2, [pc, #68]	; (8001a08 <HAL_RCC_ClockConfig+0x1a8>)
 80019c2:	4013      	ands	r3, r2
 80019c4:	0019      	movs	r1, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68da      	ldr	r2, [r3, #12]
 80019ca:	4b0d      	ldr	r3, [pc, #52]	; (8001a00 <HAL_RCC_ClockConfig+0x1a0>)
 80019cc:	430a      	orrs	r2, r1
 80019ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80019d0:	f000 f820 	bl	8001a14 <HAL_RCC_GetSysClockFreq>
 80019d4:	0001      	movs	r1, r0
 80019d6:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <HAL_RCC_ClockConfig+0x1a0>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	091b      	lsrs	r3, r3, #4
 80019dc:	220f      	movs	r2, #15
 80019de:	4013      	ands	r3, r2
 80019e0:	4a0a      	ldr	r2, [pc, #40]	; (8001a0c <HAL_RCC_ClockConfig+0x1ac>)
 80019e2:	5cd3      	ldrb	r3, [r2, r3]
 80019e4:	000a      	movs	r2, r1
 80019e6:	40da      	lsrs	r2, r3
 80019e8:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <HAL_RCC_ClockConfig+0x1b0>)
 80019ea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80019ec:	2003      	movs	r0, #3
 80019ee:	f7fe ff93 	bl	8000918 <HAL_InitTick>
  
  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	0018      	movs	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	b004      	add	sp, #16
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40022000 	.word	0x40022000
 8001a00:	40021000 	.word	0x40021000
 8001a04:	00001388 	.word	0x00001388
 8001a08:	fffff8ff 	.word	0xfffff8ff
 8001a0c:	080053f8 	.word	0x080053f8
 8001a10:	20000000 	.word	0x20000000

08001a14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	2300      	movs	r3, #0
 8001a28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001a2e:	4b2d      	ldr	r3, [pc, #180]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	220c      	movs	r2, #12
 8001a38:	4013      	ands	r3, r2
 8001a3a:	2b0c      	cmp	r3, #12
 8001a3c:	d046      	beq.n	8001acc <HAL_RCC_GetSysClockFreq+0xb8>
 8001a3e:	d848      	bhi.n	8001ad2 <HAL_RCC_GetSysClockFreq+0xbe>
 8001a40:	2b04      	cmp	r3, #4
 8001a42:	d002      	beq.n	8001a4a <HAL_RCC_GetSysClockFreq+0x36>
 8001a44:	2b08      	cmp	r3, #8
 8001a46:	d003      	beq.n	8001a50 <HAL_RCC_GetSysClockFreq+0x3c>
 8001a48:	e043      	b.n	8001ad2 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a4a:	4b27      	ldr	r3, [pc, #156]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001a4c:	613b      	str	r3, [r7, #16]
      break;
 8001a4e:	e043      	b.n	8001ad8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	0c9b      	lsrs	r3, r3, #18
 8001a54:	220f      	movs	r2, #15
 8001a56:	4013      	ands	r3, r2
 8001a58:	4a24      	ldr	r2, [pc, #144]	; (8001aec <HAL_RCC_GetSysClockFreq+0xd8>)
 8001a5a:	5cd3      	ldrb	r3, [r2, r3]
 8001a5c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001a5e:	4b21      	ldr	r3, [pc, #132]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a62:	220f      	movs	r2, #15
 8001a64:	4013      	ands	r3, r2
 8001a66:	4a22      	ldr	r2, [pc, #136]	; (8001af0 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001a68:	5cd3      	ldrb	r3, [r2, r3]
 8001a6a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	23c0      	movs	r3, #192	; 0xc0
 8001a70:	025b      	lsls	r3, r3, #9
 8001a72:	401a      	ands	r2, r3
 8001a74:	2380      	movs	r3, #128	; 0x80
 8001a76:	025b      	lsls	r3, r3, #9
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d109      	bne.n	8001a90 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a7c:	68b9      	ldr	r1, [r7, #8]
 8001a7e:	481a      	ldr	r0, [pc, #104]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001a80:	f7fe fb4c 	bl	800011c <__udivsi3>
 8001a84:	0003      	movs	r3, r0
 8001a86:	001a      	movs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4353      	muls	r3, r2
 8001a8c:	617b      	str	r3, [r7, #20]
 8001a8e:	e01a      	b.n	8001ac6 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	23c0      	movs	r3, #192	; 0xc0
 8001a94:	025b      	lsls	r3, r3, #9
 8001a96:	401a      	ands	r2, r3
 8001a98:	23c0      	movs	r3, #192	; 0xc0
 8001a9a:	025b      	lsls	r3, r3, #9
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d109      	bne.n	8001ab4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001aa0:	68b9      	ldr	r1, [r7, #8]
 8001aa2:	4814      	ldr	r0, [pc, #80]	; (8001af4 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001aa4:	f7fe fb3a 	bl	800011c <__udivsi3>
 8001aa8:	0003      	movs	r3, r0
 8001aaa:	001a      	movs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4353      	muls	r3, r2
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ab4:	68b9      	ldr	r1, [r7, #8]
 8001ab6:	480c      	ldr	r0, [pc, #48]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001ab8:	f7fe fb30 	bl	800011c <__udivsi3>
 8001abc:	0003      	movs	r3, r0
 8001abe:	001a      	movs	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4353      	muls	r3, r2
 8001ac4:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	613b      	str	r3, [r7, #16]
      break;
 8001aca:	e005      	b.n	8001ad8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001acc:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001ace:	613b      	str	r3, [r7, #16]
      break;
 8001ad0:	e002      	b.n	8001ad8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ad2:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001ad4:	613b      	str	r3, [r7, #16]
      break;
 8001ad6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001ad8:	693b      	ldr	r3, [r7, #16]
}
 8001ada:	0018      	movs	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	b006      	add	sp, #24
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	007a1200 	.word	0x007a1200
 8001aec:	08005410 	.word	0x08005410
 8001af0:	08005420 	.word	0x08005420
 8001af4:	02dc6c00 	.word	0x02dc6c00

08001af8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001afc:	4b02      	ldr	r3, [pc, #8]	; (8001b08 <HAL_RCC_GetHCLKFreq+0x10>)
 8001afe:	681b      	ldr	r3, [r3, #0]
}
 8001b00:	0018      	movs	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	46c0      	nop			; (mov r8, r8)
 8001b08:	20000000 	.word	0x20000000

08001b0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001b10:	f7ff fff2 	bl	8001af8 <HAL_RCC_GetHCLKFreq>
 8001b14:	0001      	movs	r1, r0
 8001b16:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	0a1b      	lsrs	r3, r3, #8
 8001b1c:	2207      	movs	r2, #7
 8001b1e:	4013      	ands	r3, r2
 8001b20:	4a04      	ldr	r2, [pc, #16]	; (8001b34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b22:	5cd3      	ldrb	r3, [r2, r3]
 8001b24:	40d9      	lsrs	r1, r3
 8001b26:	000b      	movs	r3, r1
}    
 8001b28:	0018      	movs	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	40021000 	.word	0x40021000
 8001b34:	08005408 	.word	0x08005408

08001b38 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2207      	movs	r2, #7
 8001b46:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b48:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <HAL_RCC_GetClockConfig+0x4c>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	401a      	ands	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_RCC_GetClockConfig+0x4c>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	22f0      	movs	r2, #240	; 0xf0
 8001b5a:	401a      	ands	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8001b60:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <HAL_RCC_GetClockConfig+0x4c>)
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	23e0      	movs	r3, #224	; 0xe0
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	401a      	ands	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8001b6e:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <HAL_RCC_GetClockConfig+0x50>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2201      	movs	r2, #1
 8001b74:	401a      	ands	r2, r3
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	601a      	str	r2, [r3, #0]
}
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	b002      	add	sp, #8
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40022000 	.word	0x40022000

08001b8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	025b      	lsls	r3, r3, #9
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d100      	bne.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001ba8:	e08e      	b.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001baa:	2017      	movs	r0, #23
 8001bac:	183b      	adds	r3, r7, r0
 8001bae:	2200      	movs	r2, #0
 8001bb0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bb2:	4b67      	ldr	r3, [pc, #412]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001bb4:	69da      	ldr	r2, [r3, #28]
 8001bb6:	2380      	movs	r3, #128	; 0x80
 8001bb8:	055b      	lsls	r3, r3, #21
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d110      	bne.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bbe:	4b64      	ldr	r3, [pc, #400]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001bc0:	69da      	ldr	r2, [r3, #28]
 8001bc2:	4b63      	ldr	r3, [pc, #396]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001bc4:	2180      	movs	r1, #128	; 0x80
 8001bc6:	0549      	lsls	r1, r1, #21
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	61da      	str	r2, [r3, #28]
 8001bcc:	4b60      	ldr	r3, [pc, #384]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001bce:	69da      	ldr	r2, [r3, #28]
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	055b      	lsls	r3, r3, #21
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bda:	183b      	adds	r3, r7, r0
 8001bdc:	2201      	movs	r2, #1
 8001bde:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be0:	4b5c      	ldr	r3, [pc, #368]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	2380      	movs	r3, #128	; 0x80
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	4013      	ands	r3, r2
 8001bea:	d11a      	bne.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bec:	4b59      	ldr	r3, [pc, #356]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4b58      	ldr	r3, [pc, #352]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001bf2:	2180      	movs	r1, #128	; 0x80
 8001bf4:	0049      	lsls	r1, r1, #1
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bfa:	f7fe ffd5 	bl	8000ba8 <HAL_GetTick>
 8001bfe:	0003      	movs	r3, r0
 8001c00:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c02:	e008      	b.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c04:	f7fe ffd0 	bl	8000ba8 <HAL_GetTick>
 8001c08:	0002      	movs	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b64      	cmp	r3, #100	; 0x64
 8001c10:	d901      	bls.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e097      	b.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c16:	4b4f      	ldr	r3, [pc, #316]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	2380      	movs	r3, #128	; 0x80
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d0f0      	beq.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c22:	4b4b      	ldr	r3, [pc, #300]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001c24:	6a1a      	ldr	r2, [r3, #32]
 8001c26:	23c0      	movs	r3, #192	; 0xc0
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d034      	beq.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	23c0      	movs	r3, #192	; 0xc0
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d02c      	beq.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c44:	4b42      	ldr	r3, [pc, #264]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	4a43      	ldr	r2, [pc, #268]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c4e:	4b40      	ldr	r3, [pc, #256]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001c50:	6a1a      	ldr	r2, [r3, #32]
 8001c52:	4b3f      	ldr	r3, [pc, #252]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001c54:	2180      	movs	r1, #128	; 0x80
 8001c56:	0249      	lsls	r1, r1, #9
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c5c:	4b3c      	ldr	r3, [pc, #240]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001c5e:	6a1a      	ldr	r2, [r3, #32]
 8001c60:	4b3b      	ldr	r3, [pc, #236]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001c62:	493e      	ldr	r1, [pc, #248]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c64:	400a      	ands	r2, r1
 8001c66:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001c68:	4b39      	ldr	r3, [pc, #228]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2201      	movs	r2, #1
 8001c72:	4013      	ands	r3, r2
 8001c74:	d013      	beq.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c76:	f7fe ff97 	bl	8000ba8 <HAL_GetTick>
 8001c7a:	0003      	movs	r3, r0
 8001c7c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c7e:	e009      	b.n	8001c94 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c80:	f7fe ff92 	bl	8000ba8 <HAL_GetTick>
 8001c84:	0002      	movs	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	4a35      	ldr	r2, [pc, #212]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e058      	b.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c94:	4b2e      	ldr	r3, [pc, #184]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	2202      	movs	r2, #2
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c9e:	4b2c      	ldr	r3, [pc, #176]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	4a2d      	ldr	r2, [pc, #180]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	0019      	movs	r1, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	4b28      	ldr	r3, [pc, #160]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cb2:	2317      	movs	r3, #23
 8001cb4:	18fb      	adds	r3, r7, r3
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d105      	bne.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cbc:	4b24      	ldr	r3, [pc, #144]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001cbe:	69da      	ldr	r2, [r3, #28]
 8001cc0:	4b23      	ldr	r3, [pc, #140]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001cc2:	4928      	ldr	r1, [pc, #160]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001cc4:	400a      	ands	r2, r1
 8001cc6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d009      	beq.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001cd2:	4b1f      	ldr	r3, [pc, #124]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	2203      	movs	r2, #3
 8001cd8:	4393      	bics	r3, r2
 8001cda:	0019      	movs	r1, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2220      	movs	r2, #32
 8001cec:	4013      	ands	r3, r2
 8001cee:	d009      	beq.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001cf0:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf4:	2210      	movs	r2, #16
 8001cf6:	4393      	bics	r3, r2
 8001cf8:	0019      	movs	r1, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68da      	ldr	r2, [r3, #12]
 8001cfe:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001d00:	430a      	orrs	r2, r1
 8001d02:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	2380      	movs	r3, #128	; 0x80
 8001d0a:	029b      	lsls	r3, r3, #10
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d009      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d10:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d14:	2280      	movs	r2, #128	; 0x80
 8001d16:	4393      	bics	r3, r2
 8001d18:	0019      	movs	r1, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695a      	ldr	r2, [r3, #20]
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001d20:	430a      	orrs	r2, r1
 8001d22:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	2380      	movs	r3, #128	; 0x80
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	d009      	beq.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001d30:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d34:	2240      	movs	r2, #64	; 0x40
 8001d36:	4393      	bics	r3, r2
 8001d38:	0019      	movs	r1, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691a      	ldr	r2, [r3, #16]
 8001d3e:	4b04      	ldr	r3, [pc, #16]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001d40:	430a      	orrs	r2, r1
 8001d42:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	0018      	movs	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	b006      	add	sp, #24
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	46c0      	nop			; (mov r8, r8)
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40007000 	.word	0x40007000
 8001d58:	fffffcff 	.word	0xfffffcff
 8001d5c:	fffeffff 	.word	0xfffeffff
 8001d60:	00001388 	.word	0x00001388
 8001d64:	efffffff 	.word	0xefffffff

08001d68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e042      	b.n	8001e00 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	223d      	movs	r2, #61	; 0x3d
 8001d7e:	5c9b      	ldrb	r3, [r3, r2]
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d107      	bne.n	8001d96 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	223c      	movs	r2, #60	; 0x3c
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	0018      	movs	r0, r3
 8001d92:	f000 f839 	bl	8001e08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	223d      	movs	r2, #61	; 0x3d
 8001d9a:	2102      	movs	r1, #2
 8001d9c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	3304      	adds	r3, #4
 8001da6:	0019      	movs	r1, r3
 8001da8:	0010      	movs	r0, r2
 8001daa:	f000 f98f 	bl	80020cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2246      	movs	r2, #70	; 0x46
 8001db2:	2101      	movs	r1, #1
 8001db4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	223e      	movs	r2, #62	; 0x3e
 8001dba:	2101      	movs	r1, #1
 8001dbc:	5499      	strb	r1, [r3, r2]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	223f      	movs	r2, #63	; 0x3f
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	5499      	strb	r1, [r3, r2]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2240      	movs	r2, #64	; 0x40
 8001dca:	2101      	movs	r1, #1
 8001dcc:	5499      	strb	r1, [r3, r2]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2241      	movs	r2, #65	; 0x41
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2242      	movs	r2, #66	; 0x42
 8001dda:	2101      	movs	r1, #1
 8001ddc:	5499      	strb	r1, [r3, r2]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2243      	movs	r2, #67	; 0x43
 8001de2:	2101      	movs	r1, #1
 8001de4:	5499      	strb	r1, [r3, r2]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2244      	movs	r2, #68	; 0x44
 8001dea:	2101      	movs	r1, #1
 8001dec:	5499      	strb	r1, [r3, r2]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2245      	movs	r2, #69	; 0x45
 8001df2:	2101      	movs	r1, #1
 8001df4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	223d      	movs	r2, #61	; 0x3d
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	0018      	movs	r0, r3
 8001e02:	46bd      	mov	sp, r7
 8001e04:	b002      	add	sp, #8
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e10:	46c0      	nop			; (mov r8, r8)
 8001e12:	46bd      	mov	sp, r7
 8001e14:	b002      	add	sp, #8
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	223d      	movs	r2, #61	; 0x3d
 8001e24:	5c9b      	ldrb	r3, [r3, r2]
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d001      	beq.n	8001e30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e036      	b.n	8001e9e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	223d      	movs	r2, #61	; 0x3d
 8001e34:	2102      	movs	r1, #2
 8001e36:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2101      	movs	r1, #1
 8001e44:	430a      	orrs	r2, r1
 8001e46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a16      	ldr	r2, [pc, #88]	; (8001ea8 <HAL_TIM_Base_Start_IT+0x90>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d00a      	beq.n	8001e68 <HAL_TIM_Base_Start_IT+0x50>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	2380      	movs	r3, #128	; 0x80
 8001e58:	05db      	lsls	r3, r3, #23
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d004      	beq.n	8001e68 <HAL_TIM_Base_Start_IT+0x50>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a12      	ldr	r2, [pc, #72]	; (8001eac <HAL_TIM_Base_Start_IT+0x94>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d111      	bne.n	8001e8c <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2207      	movs	r2, #7
 8001e70:	4013      	ands	r3, r2
 8001e72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2b06      	cmp	r3, #6
 8001e78:	d010      	beq.n	8001e9c <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2101      	movs	r1, #1
 8001e86:	430a      	orrs	r2, r1
 8001e88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e8a:	e007      	b.n	8001e9c <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2101      	movs	r1, #1
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	b004      	add	sp, #16
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	40012c00 	.word	0x40012c00
 8001eac:	40000400 	.word	0x40000400

08001eb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	2202      	movs	r2, #2
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d021      	beq.n	8001f14 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d01d      	beq.n	8001f14 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2203      	movs	r2, #3
 8001ede:	4252      	negs	r2, r2
 8001ee0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	2203      	movs	r2, #3
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d004      	beq.n	8001efe <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	0018      	movs	r0, r3
 8001ef8:	f000 f8d0 	bl	800209c <HAL_TIM_IC_CaptureCallback>
 8001efc:	e007      	b.n	8001f0e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	0018      	movs	r0, r3
 8001f02:	f000 f8c3 	bl	800208c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f000 f8cf 	bl	80020ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	2204      	movs	r2, #4
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d022      	beq.n	8001f62 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2204      	movs	r2, #4
 8001f20:	4013      	ands	r3, r2
 8001f22:	d01e      	beq.n	8001f62 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2205      	movs	r2, #5
 8001f2a:	4252      	negs	r2, r2
 8001f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2202      	movs	r2, #2
 8001f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	699a      	ldr	r2, [r3, #24]
 8001f3a:	23c0      	movs	r3, #192	; 0xc0
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d004      	beq.n	8001f4c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	0018      	movs	r0, r3
 8001f46:	f000 f8a9 	bl	800209c <HAL_TIM_IC_CaptureCallback>
 8001f4a:	e007      	b.n	8001f5c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	0018      	movs	r0, r3
 8001f50:	f000 f89c 	bl	800208c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	0018      	movs	r0, r3
 8001f58:	f000 f8a8 	bl	80020ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	2208      	movs	r2, #8
 8001f66:	4013      	ands	r3, r2
 8001f68:	d021      	beq.n	8001fae <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2208      	movs	r2, #8
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d01d      	beq.n	8001fae <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2209      	movs	r2, #9
 8001f78:	4252      	negs	r2, r2
 8001f7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2204      	movs	r2, #4
 8001f80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	69db      	ldr	r3, [r3, #28]
 8001f88:	2203      	movs	r2, #3
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d004      	beq.n	8001f98 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	0018      	movs	r0, r3
 8001f92:	f000 f883 	bl	800209c <HAL_TIM_IC_CaptureCallback>
 8001f96:	e007      	b.n	8001fa8 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	f000 f876 	bl	800208c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	f000 f882 	bl	80020ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	2210      	movs	r2, #16
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d022      	beq.n	8001ffc <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2210      	movs	r2, #16
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d01e      	beq.n	8001ffc <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2211      	movs	r2, #17
 8001fc4:	4252      	negs	r2, r2
 8001fc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2208      	movs	r2, #8
 8001fcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	69da      	ldr	r2, [r3, #28]
 8001fd4:	23c0      	movs	r3, #192	; 0xc0
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d004      	beq.n	8001fe6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	0018      	movs	r0, r3
 8001fe0:	f000 f85c 	bl	800209c <HAL_TIM_IC_CaptureCallback>
 8001fe4:	e007      	b.n	8001ff6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	0018      	movs	r0, r3
 8001fea:	f000 f84f 	bl	800208c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	f000 f85b 	bl	80020ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	2201      	movs	r2, #1
 8002000:	4013      	ands	r3, r2
 8002002:	d00c      	beq.n	800201e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2201      	movs	r2, #1
 8002008:	4013      	ands	r3, r2
 800200a:	d008      	beq.n	800201e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2202      	movs	r2, #2
 8002012:	4252      	negs	r2, r2
 8002014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	0018      	movs	r0, r3
 800201a:	f7fe fbe5 	bl	80007e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	2280      	movs	r2, #128	; 0x80
 8002022:	4013      	ands	r3, r2
 8002024:	d00c      	beq.n	8002040 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2280      	movs	r2, #128	; 0x80
 800202a:	4013      	ands	r3, r2
 800202c:	d008      	beq.n	8002040 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2281      	movs	r2, #129	; 0x81
 8002034:	4252      	negs	r2, r2
 8002036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	0018      	movs	r0, r3
 800203c:	f000 f8d2 	bl	80021e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	2240      	movs	r2, #64	; 0x40
 8002044:	4013      	ands	r3, r2
 8002046:	d00c      	beq.n	8002062 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2240      	movs	r2, #64	; 0x40
 800204c:	4013      	ands	r3, r2
 800204e:	d008      	beq.n	8002062 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2241      	movs	r2, #65	; 0x41
 8002056:	4252      	negs	r2, r2
 8002058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	0018      	movs	r0, r3
 800205e:	f000 f82d 	bl	80020bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	2220      	movs	r2, #32
 8002066:	4013      	ands	r3, r2
 8002068:	d00c      	beq.n	8002084 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2220      	movs	r2, #32
 800206e:	4013      	ands	r3, r2
 8002070:	d008      	beq.n	8002084 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2221      	movs	r2, #33	; 0x21
 8002078:	4252      	negs	r2, r2
 800207a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	0018      	movs	r0, r3
 8002080:	f000 f8a8 	bl	80021d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002084:	46c0      	nop			; (mov r8, r8)
 8002086:	46bd      	mov	sp, r7
 8002088:	b004      	add	sp, #16
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002094:	46c0      	nop			; (mov r8, r8)
 8002096:	46bd      	mov	sp, r7
 8002098:	b002      	add	sp, #8
 800209a:	bd80      	pop	{r7, pc}

0800209c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020a4:	46c0      	nop			; (mov r8, r8)
 80020a6:	46bd      	mov	sp, r7
 80020a8:	b002      	add	sp, #8
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020b4:	46c0      	nop			; (mov r8, r8)
 80020b6:	46bd      	mov	sp, r7
 80020b8:	b002      	add	sp, #8
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020c4:	46c0      	nop			; (mov r8, r8)
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b002      	add	sp, #8
 80020ca:	bd80      	pop	{r7, pc}

080020cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a37      	ldr	r2, [pc, #220]	; (80021bc <TIM_Base_SetConfig+0xf0>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d008      	beq.n	80020f6 <TIM_Base_SetConfig+0x2a>
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	2380      	movs	r3, #128	; 0x80
 80020e8:	05db      	lsls	r3, r3, #23
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d003      	beq.n	80020f6 <TIM_Base_SetConfig+0x2a>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a33      	ldr	r2, [pc, #204]	; (80021c0 <TIM_Base_SetConfig+0xf4>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d108      	bne.n	8002108 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2270      	movs	r2, #112	; 0x70
 80020fa:	4393      	bics	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	4313      	orrs	r3, r2
 8002106:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a2c      	ldr	r2, [pc, #176]	; (80021bc <TIM_Base_SetConfig+0xf0>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d014      	beq.n	800213a <TIM_Base_SetConfig+0x6e>
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	2380      	movs	r3, #128	; 0x80
 8002114:	05db      	lsls	r3, r3, #23
 8002116:	429a      	cmp	r2, r3
 8002118:	d00f      	beq.n	800213a <TIM_Base_SetConfig+0x6e>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a28      	ldr	r2, [pc, #160]	; (80021c0 <TIM_Base_SetConfig+0xf4>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d00b      	beq.n	800213a <TIM_Base_SetConfig+0x6e>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a27      	ldr	r2, [pc, #156]	; (80021c4 <TIM_Base_SetConfig+0xf8>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d007      	beq.n	800213a <TIM_Base_SetConfig+0x6e>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a26      	ldr	r2, [pc, #152]	; (80021c8 <TIM_Base_SetConfig+0xfc>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d003      	beq.n	800213a <TIM_Base_SetConfig+0x6e>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a25      	ldr	r2, [pc, #148]	; (80021cc <TIM_Base_SetConfig+0x100>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d108      	bne.n	800214c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	4a24      	ldr	r2, [pc, #144]	; (80021d0 <TIM_Base_SetConfig+0x104>)
 800213e:	4013      	ands	r3, r2
 8002140:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	4313      	orrs	r3, r2
 800214a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2280      	movs	r2, #128	; 0x80
 8002150:	4393      	bics	r3, r2
 8002152:	001a      	movs	r2, r3
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	4313      	orrs	r3, r2
 800215a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	689a      	ldr	r2, [r3, #8]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a11      	ldr	r2, [pc, #68]	; (80021bc <TIM_Base_SetConfig+0xf0>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d007      	beq.n	800218a <TIM_Base_SetConfig+0xbe>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a12      	ldr	r2, [pc, #72]	; (80021c8 <TIM_Base_SetConfig+0xfc>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d003      	beq.n	800218a <TIM_Base_SetConfig+0xbe>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a11      	ldr	r2, [pc, #68]	; (80021cc <TIM_Base_SetConfig+0x100>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d103      	bne.n	8002192 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	691a      	ldr	r2, [r3, #16]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	2201      	movs	r2, #1
 800219e:	4013      	ands	r3, r2
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d106      	bne.n	80021b2 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	2201      	movs	r2, #1
 80021aa:	4393      	bics	r3, r2
 80021ac:	001a      	movs	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	611a      	str	r2, [r3, #16]
  }
}
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	46bd      	mov	sp, r7
 80021b6:	b004      	add	sp, #16
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	46c0      	nop			; (mov r8, r8)
 80021bc:	40012c00 	.word	0x40012c00
 80021c0:	40000400 	.word	0x40000400
 80021c4:	40002000 	.word	0x40002000
 80021c8:	40014400 	.word	0x40014400
 80021cc:	40014800 	.word	0x40014800
 80021d0:	fffffcff 	.word	0xfffffcff

080021d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021dc:	46c0      	nop			; (mov r8, r8)
 80021de:	46bd      	mov	sp, r7
 80021e0:	b002      	add	sp, #8
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021ec:	46c0      	nop			; (mov r8, r8)
 80021ee:	46bd      	mov	sp, r7
 80021f0:	b002      	add	sp, #8
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e044      	b.n	8002290 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800220a:	2b00      	cmp	r3, #0
 800220c:	d107      	bne.n	800221e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2278      	movs	r2, #120	; 0x78
 8002212:	2100      	movs	r1, #0
 8002214:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	0018      	movs	r0, r3
 800221a:	f7fe fb27 	bl	800086c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2224      	movs	r2, #36	; 0x24
 8002222:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2101      	movs	r1, #1
 8002230:	438a      	bics	r2, r1
 8002232:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	0018      	movs	r0, r3
 8002240:	f000 fd60 	bl	8002d04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	0018      	movs	r0, r3
 8002248:	f000 fc1c 	bl	8002a84 <UART_SetConfig>
 800224c:	0003      	movs	r3, r0
 800224e:	2b01      	cmp	r3, #1
 8002250:	d101      	bne.n	8002256 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e01c      	b.n	8002290 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	490d      	ldr	r1, [pc, #52]	; (8002298 <HAL_UART_Init+0xa4>)
 8002262:	400a      	ands	r2, r1
 8002264:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	212a      	movs	r1, #42	; 0x2a
 8002272:	438a      	bics	r2, r1
 8002274:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2101      	movs	r1, #1
 8002282:	430a      	orrs	r2, r1
 8002284:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	0018      	movs	r0, r3
 800228a:	f000 fdef 	bl	8002e6c <UART_CheckIdleState>
 800228e:	0003      	movs	r3, r0
}
 8002290:	0018      	movs	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	b002      	add	sp, #8
 8002296:	bd80      	pop	{r7, pc}
 8002298:	ffffb7ff 	.word	0xffffb7ff

0800229c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08a      	sub	sp, #40	; 0x28
 80022a0:	af02      	add	r7, sp, #8
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	603b      	str	r3, [r7, #0]
 80022a8:	1dbb      	adds	r3, r7, #6
 80022aa:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022b0:	2b20      	cmp	r3, #32
 80022b2:	d000      	beq.n	80022b6 <HAL_UART_Transmit+0x1a>
 80022b4:	e08d      	b.n	80023d2 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <HAL_UART_Transmit+0x28>
 80022bc:	1dbb      	adds	r3, r7, #6
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e085      	b.n	80023d4 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	2380      	movs	r3, #128	; 0x80
 80022ce:	015b      	lsls	r3, r3, #5
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d109      	bne.n	80022e8 <HAL_UART_Transmit+0x4c>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d105      	bne.n	80022e8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	2201      	movs	r2, #1
 80022e0:	4013      	ands	r3, r2
 80022e2:	d001      	beq.n	80022e8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e075      	b.n	80023d4 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2284      	movs	r2, #132	; 0x84
 80022ec:	2100      	movs	r1, #0
 80022ee:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2221      	movs	r2, #33	; 0x21
 80022f4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022f6:	f7fe fc57 	bl	8000ba8 <HAL_GetTick>
 80022fa:	0003      	movs	r3, r0
 80022fc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	1dba      	adds	r2, r7, #6
 8002302:	2150      	movs	r1, #80	; 0x50
 8002304:	8812      	ldrh	r2, [r2, #0]
 8002306:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	1dba      	adds	r2, r7, #6
 800230c:	2152      	movs	r1, #82	; 0x52
 800230e:	8812      	ldrh	r2, [r2, #0]
 8002310:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	2380      	movs	r3, #128	; 0x80
 8002318:	015b      	lsls	r3, r3, #5
 800231a:	429a      	cmp	r2, r3
 800231c:	d108      	bne.n	8002330 <HAL_UART_Transmit+0x94>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d104      	bne.n	8002330 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	61bb      	str	r3, [r7, #24]
 800232e:	e003      	b.n	8002338 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002334:	2300      	movs	r3, #0
 8002336:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002338:	e030      	b.n	800239c <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	68f8      	ldr	r0, [r7, #12]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	0013      	movs	r3, r2
 8002344:	2200      	movs	r2, #0
 8002346:	2180      	movs	r1, #128	; 0x80
 8002348:	f000 fe38 	bl	8002fbc <UART_WaitOnFlagUntilTimeout>
 800234c:	1e03      	subs	r3, r0, #0
 800234e:	d004      	beq.n	800235a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2220      	movs	r2, #32
 8002354:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e03c      	b.n	80023d4 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10b      	bne.n	8002378 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	881a      	ldrh	r2, [r3, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	05d2      	lsls	r2, r2, #23
 800236a:	0dd2      	lsrs	r2, r2, #23
 800236c:	b292      	uxth	r2, r2
 800236e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	3302      	adds	r3, #2
 8002374:	61bb      	str	r3, [r7, #24]
 8002376:	e008      	b.n	800238a <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	781a      	ldrb	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	b292      	uxth	r2, r2
 8002382:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	3301      	adds	r3, #1
 8002388:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2252      	movs	r2, #82	; 0x52
 800238e:	5a9b      	ldrh	r3, [r3, r2]
 8002390:	b29b      	uxth	r3, r3
 8002392:	3b01      	subs	r3, #1
 8002394:	b299      	uxth	r1, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2252      	movs	r2, #82	; 0x52
 800239a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2252      	movs	r2, #82	; 0x52
 80023a0:	5a9b      	ldrh	r3, [r3, r2]
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1c8      	bne.n	800233a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	0013      	movs	r3, r2
 80023b2:	2200      	movs	r2, #0
 80023b4:	2140      	movs	r1, #64	; 0x40
 80023b6:	f000 fe01 	bl	8002fbc <UART_WaitOnFlagUntilTimeout>
 80023ba:	1e03      	subs	r3, r0, #0
 80023bc:	d004      	beq.n	80023c8 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2220      	movs	r2, #32
 80023c2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e005      	b.n	80023d4 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2220      	movs	r2, #32
 80023cc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80023ce:	2300      	movs	r3, #0
 80023d0:	e000      	b.n	80023d4 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 80023d2:	2302      	movs	r3, #2
  }
}
 80023d4:	0018      	movs	r0, r3
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b008      	add	sp, #32
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	1dbb      	adds	r3, r7, #6
 80023e8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2280      	movs	r2, #128	; 0x80
 80023ee:	589b      	ldr	r3, [r3, r2]
 80023f0:	2b20      	cmp	r3, #32
 80023f2:	d145      	bne.n	8002480 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_UART_Receive_IT+0x26>
 80023fa:	1dbb      	adds	r3, r7, #6
 80023fc:	881b      	ldrh	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e03d      	b.n	8002482 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	2380      	movs	r3, #128	; 0x80
 800240c:	015b      	lsls	r3, r3, #5
 800240e:	429a      	cmp	r2, r3
 8002410:	d109      	bne.n	8002426 <HAL_UART_Receive_IT+0x4a>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d105      	bne.n	8002426 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2201      	movs	r2, #1
 800241e:	4013      	ands	r3, r2
 8002420:	d001      	beq.n	8002426 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e02d      	b.n	8002482 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	2380      	movs	r3, #128	; 0x80
 8002434:	041b      	lsls	r3, r3, #16
 8002436:	4013      	ands	r3, r2
 8002438:	d019      	beq.n	800246e <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800243a:	f3ef 8310 	mrs	r3, PRIMASK
 800243e:	613b      	str	r3, [r7, #16]
  return(result);
 8002440:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002442:	61fb      	str	r3, [r7, #28]
 8002444:	2301      	movs	r3, #1
 8002446:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	f383 8810 	msr	PRIMASK, r3
}
 800244e:	46c0      	nop			; (mov r8, r8)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2180      	movs	r1, #128	; 0x80
 800245c:	04c9      	lsls	r1, r1, #19
 800245e:	430a      	orrs	r2, r1
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	f383 8810 	msr	PRIMASK, r3
}
 800246c:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800246e:	1dbb      	adds	r3, r7, #6
 8002470:	881a      	ldrh	r2, [r3, #0]
 8002472:	68b9      	ldr	r1, [r7, #8]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	0018      	movs	r0, r3
 8002478:	f000 fe10 	bl	800309c <UART_Start_Receive_IT>
 800247c:	0003      	movs	r3, r0
 800247e:	e000      	b.n	8002482 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8002480:	2302      	movs	r3, #2
  }
}
 8002482:	0018      	movs	r0, r3
 8002484:	46bd      	mov	sp, r7
 8002486:	b008      	add	sp, #32
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800248c:	b590      	push	{r4, r7, lr}
 800248e:	b0ab      	sub	sp, #172	; 0xac
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	22a4      	movs	r2, #164	; 0xa4
 800249c:	18b9      	adds	r1, r7, r2
 800249e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	20a0      	movs	r0, #160	; 0xa0
 80024a8:	1839      	adds	r1, r7, r0
 80024aa:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	219c      	movs	r1, #156	; 0x9c
 80024b4:	1879      	adds	r1, r7, r1
 80024b6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80024b8:	0011      	movs	r1, r2
 80024ba:	18bb      	adds	r3, r7, r2
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a99      	ldr	r2, [pc, #612]	; (8002724 <HAL_UART_IRQHandler+0x298>)
 80024c0:	4013      	ands	r3, r2
 80024c2:	2298      	movs	r2, #152	; 0x98
 80024c4:	18bc      	adds	r4, r7, r2
 80024c6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80024c8:	18bb      	adds	r3, r7, r2
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d114      	bne.n	80024fa <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80024d0:	187b      	adds	r3, r7, r1
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2220      	movs	r2, #32
 80024d6:	4013      	ands	r3, r2
 80024d8:	d00f      	beq.n	80024fa <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80024da:	183b      	adds	r3, r7, r0
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2220      	movs	r2, #32
 80024e0:	4013      	ands	r3, r2
 80024e2:	d00a      	beq.n	80024fa <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d100      	bne.n	80024ee <HAL_UART_IRQHandler+0x62>
 80024ec:	e29e      	b.n	8002a2c <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	0010      	movs	r0, r2
 80024f6:	4798      	blx	r3
      }
      return;
 80024f8:	e298      	b.n	8002a2c <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80024fa:	2398      	movs	r3, #152	; 0x98
 80024fc:	18fb      	adds	r3, r7, r3
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d100      	bne.n	8002506 <HAL_UART_IRQHandler+0x7a>
 8002504:	e114      	b.n	8002730 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002506:	239c      	movs	r3, #156	; 0x9c
 8002508:	18fb      	adds	r3, r7, r3
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2201      	movs	r2, #1
 800250e:	4013      	ands	r3, r2
 8002510:	d106      	bne.n	8002520 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002512:	23a0      	movs	r3, #160	; 0xa0
 8002514:	18fb      	adds	r3, r7, r3
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a83      	ldr	r2, [pc, #524]	; (8002728 <HAL_UART_IRQHandler+0x29c>)
 800251a:	4013      	ands	r3, r2
 800251c:	d100      	bne.n	8002520 <HAL_UART_IRQHandler+0x94>
 800251e:	e107      	b.n	8002730 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002520:	23a4      	movs	r3, #164	; 0xa4
 8002522:	18fb      	adds	r3, r7, r3
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2201      	movs	r2, #1
 8002528:	4013      	ands	r3, r2
 800252a:	d012      	beq.n	8002552 <HAL_UART_IRQHandler+0xc6>
 800252c:	23a0      	movs	r3, #160	; 0xa0
 800252e:	18fb      	adds	r3, r7, r3
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	2380      	movs	r3, #128	; 0x80
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	4013      	ands	r3, r2
 8002538:	d00b      	beq.n	8002552 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2201      	movs	r2, #1
 8002540:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2284      	movs	r2, #132	; 0x84
 8002546:	589b      	ldr	r3, [r3, r2]
 8002548:	2201      	movs	r2, #1
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2184      	movs	r1, #132	; 0x84
 8002550:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002552:	23a4      	movs	r3, #164	; 0xa4
 8002554:	18fb      	adds	r3, r7, r3
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2202      	movs	r2, #2
 800255a:	4013      	ands	r3, r2
 800255c:	d011      	beq.n	8002582 <HAL_UART_IRQHandler+0xf6>
 800255e:	239c      	movs	r3, #156	; 0x9c
 8002560:	18fb      	adds	r3, r7, r3
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2201      	movs	r2, #1
 8002566:	4013      	ands	r3, r2
 8002568:	d00b      	beq.n	8002582 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2202      	movs	r2, #2
 8002570:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2284      	movs	r2, #132	; 0x84
 8002576:	589b      	ldr	r3, [r3, r2]
 8002578:	2204      	movs	r2, #4
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2184      	movs	r1, #132	; 0x84
 8002580:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002582:	23a4      	movs	r3, #164	; 0xa4
 8002584:	18fb      	adds	r3, r7, r3
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2204      	movs	r2, #4
 800258a:	4013      	ands	r3, r2
 800258c:	d011      	beq.n	80025b2 <HAL_UART_IRQHandler+0x126>
 800258e:	239c      	movs	r3, #156	; 0x9c
 8002590:	18fb      	adds	r3, r7, r3
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2201      	movs	r2, #1
 8002596:	4013      	ands	r3, r2
 8002598:	d00b      	beq.n	80025b2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2204      	movs	r2, #4
 80025a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2284      	movs	r2, #132	; 0x84
 80025a6:	589b      	ldr	r3, [r3, r2]
 80025a8:	2202      	movs	r2, #2
 80025aa:	431a      	orrs	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2184      	movs	r1, #132	; 0x84
 80025b0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80025b2:	23a4      	movs	r3, #164	; 0xa4
 80025b4:	18fb      	adds	r3, r7, r3
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2208      	movs	r2, #8
 80025ba:	4013      	ands	r3, r2
 80025bc:	d017      	beq.n	80025ee <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80025be:	23a0      	movs	r3, #160	; 0xa0
 80025c0:	18fb      	adds	r3, r7, r3
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2220      	movs	r2, #32
 80025c6:	4013      	ands	r3, r2
 80025c8:	d105      	bne.n	80025d6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80025ca:	239c      	movs	r3, #156	; 0x9c
 80025cc:	18fb      	adds	r3, r7, r3
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2201      	movs	r2, #1
 80025d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80025d4:	d00b      	beq.n	80025ee <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2208      	movs	r2, #8
 80025dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2284      	movs	r2, #132	; 0x84
 80025e2:	589b      	ldr	r3, [r3, r2]
 80025e4:	2208      	movs	r2, #8
 80025e6:	431a      	orrs	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2184      	movs	r1, #132	; 0x84
 80025ec:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80025ee:	23a4      	movs	r3, #164	; 0xa4
 80025f0:	18fb      	adds	r3, r7, r3
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	2380      	movs	r3, #128	; 0x80
 80025f6:	011b      	lsls	r3, r3, #4
 80025f8:	4013      	ands	r3, r2
 80025fa:	d013      	beq.n	8002624 <HAL_UART_IRQHandler+0x198>
 80025fc:	23a0      	movs	r3, #160	; 0xa0
 80025fe:	18fb      	adds	r3, r7, r3
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	2380      	movs	r3, #128	; 0x80
 8002604:	04db      	lsls	r3, r3, #19
 8002606:	4013      	ands	r3, r2
 8002608:	d00c      	beq.n	8002624 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2280      	movs	r2, #128	; 0x80
 8002610:	0112      	lsls	r2, r2, #4
 8002612:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2284      	movs	r2, #132	; 0x84
 8002618:	589b      	ldr	r3, [r3, r2]
 800261a:	2220      	movs	r2, #32
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2184      	movs	r1, #132	; 0x84
 8002622:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2284      	movs	r2, #132	; 0x84
 8002628:	589b      	ldr	r3, [r3, r2]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d100      	bne.n	8002630 <HAL_UART_IRQHandler+0x1a4>
 800262e:	e1ff      	b.n	8002a30 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002630:	23a4      	movs	r3, #164	; 0xa4
 8002632:	18fb      	adds	r3, r7, r3
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2220      	movs	r2, #32
 8002638:	4013      	ands	r3, r2
 800263a:	d00e      	beq.n	800265a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800263c:	23a0      	movs	r3, #160	; 0xa0
 800263e:	18fb      	adds	r3, r7, r3
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2220      	movs	r2, #32
 8002644:	4013      	ands	r3, r2
 8002646:	d008      	beq.n	800265a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800264c:	2b00      	cmp	r3, #0
 800264e:	d004      	beq.n	800265a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	0010      	movs	r0, r2
 8002658:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2284      	movs	r2, #132	; 0x84
 800265e:	589b      	ldr	r3, [r3, r2]
 8002660:	2194      	movs	r1, #148	; 0x94
 8002662:	187a      	adds	r2, r7, r1
 8002664:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	2240      	movs	r2, #64	; 0x40
 800266e:	4013      	ands	r3, r2
 8002670:	2b40      	cmp	r3, #64	; 0x40
 8002672:	d004      	beq.n	800267e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002674:	187b      	adds	r3, r7, r1
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2228      	movs	r2, #40	; 0x28
 800267a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800267c:	d047      	beq.n	800270e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	0018      	movs	r0, r3
 8002682:	f000 fdd5 	bl	8003230 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2240      	movs	r2, #64	; 0x40
 800268e:	4013      	ands	r3, r2
 8002690:	2b40      	cmp	r3, #64	; 0x40
 8002692:	d137      	bne.n	8002704 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002694:	f3ef 8310 	mrs	r3, PRIMASK
 8002698:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800269a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800269c:	2090      	movs	r0, #144	; 0x90
 800269e:	183a      	adds	r2, r7, r0
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	2301      	movs	r3, #1
 80026a4:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026a8:	f383 8810 	msr	PRIMASK, r3
}
 80026ac:	46c0      	nop			; (mov r8, r8)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2140      	movs	r1, #64	; 0x40
 80026ba:	438a      	bics	r2, r1
 80026bc:	609a      	str	r2, [r3, #8]
 80026be:	183b      	adds	r3, r7, r0
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026c6:	f383 8810 	msr	PRIMASK, r3
}
 80026ca:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d012      	beq.n	80026fa <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d8:	4a14      	ldr	r2, [pc, #80]	; (800272c <HAL_UART_IRQHandler+0x2a0>)
 80026da:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e0:	0018      	movs	r0, r3
 80026e2:	f7fe fb50 	bl	8000d86 <HAL_DMA_Abort_IT>
 80026e6:	1e03      	subs	r3, r0, #0
 80026e8:	d01a      	beq.n	8002720 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f4:	0018      	movs	r0, r3
 80026f6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026f8:	e012      	b.n	8002720 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	0018      	movs	r0, r3
 80026fe:	f000 f9ad 	bl	8002a5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002702:	e00d      	b.n	8002720 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	0018      	movs	r0, r3
 8002708:	f000 f9a8 	bl	8002a5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800270c:	e008      	b.n	8002720 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	0018      	movs	r0, r3
 8002712:	f000 f9a3 	bl	8002a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2284      	movs	r2, #132	; 0x84
 800271a:	2100      	movs	r1, #0
 800271c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800271e:	e187      	b.n	8002a30 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002720:	46c0      	nop			; (mov r8, r8)
    return;
 8002722:	e185      	b.n	8002a30 <HAL_UART_IRQHandler+0x5a4>
 8002724:	0000080f 	.word	0x0000080f
 8002728:	04000120 	.word	0x04000120
 800272c:	080032f9 	.word	0x080032f9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002734:	2b01      	cmp	r3, #1
 8002736:	d000      	beq.n	800273a <HAL_UART_IRQHandler+0x2ae>
 8002738:	e139      	b.n	80029ae <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800273a:	23a4      	movs	r3, #164	; 0xa4
 800273c:	18fb      	adds	r3, r7, r3
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2210      	movs	r2, #16
 8002742:	4013      	ands	r3, r2
 8002744:	d100      	bne.n	8002748 <HAL_UART_IRQHandler+0x2bc>
 8002746:	e132      	b.n	80029ae <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002748:	23a0      	movs	r3, #160	; 0xa0
 800274a:	18fb      	adds	r3, r7, r3
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2210      	movs	r2, #16
 8002750:	4013      	ands	r3, r2
 8002752:	d100      	bne.n	8002756 <HAL_UART_IRQHandler+0x2ca>
 8002754:	e12b      	b.n	80029ae <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2210      	movs	r2, #16
 800275c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	2240      	movs	r2, #64	; 0x40
 8002766:	4013      	ands	r3, r2
 8002768:	2b40      	cmp	r3, #64	; 0x40
 800276a:	d000      	beq.n	800276e <HAL_UART_IRQHandler+0x2e2>
 800276c:	e09f      	b.n	80028ae <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	217e      	movs	r1, #126	; 0x7e
 8002778:	187b      	adds	r3, r7, r1
 800277a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800277c:	187b      	adds	r3, r7, r1
 800277e:	881b      	ldrh	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d100      	bne.n	8002786 <HAL_UART_IRQHandler+0x2fa>
 8002784:	e156      	b.n	8002a34 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2258      	movs	r2, #88	; 0x58
 800278a:	5a9b      	ldrh	r3, [r3, r2]
 800278c:	187a      	adds	r2, r7, r1
 800278e:	8812      	ldrh	r2, [r2, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d300      	bcc.n	8002796 <HAL_UART_IRQHandler+0x30a>
 8002794:	e14e      	b.n	8002a34 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	187a      	adds	r2, r7, r1
 800279a:	215a      	movs	r1, #90	; 0x5a
 800279c:	8812      	ldrh	r2, [r2, #0]
 800279e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	2b20      	cmp	r3, #32
 80027a8:	d06f      	beq.n	800288a <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027aa:	f3ef 8310 	mrs	r3, PRIMASK
 80027ae:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80027b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80027b4:	2301      	movs	r3, #1
 80027b6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ba:	f383 8810 	msr	PRIMASK, r3
}
 80027be:	46c0      	nop			; (mov r8, r8)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	499e      	ldr	r1, [pc, #632]	; (8002a44 <HAL_UART_IRQHandler+0x5b8>)
 80027cc:	400a      	ands	r2, r1
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027d2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d6:	f383 8810 	msr	PRIMASK, r3
}
 80027da:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027dc:	f3ef 8310 	mrs	r3, PRIMASK
 80027e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80027e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027e4:	677b      	str	r3, [r7, #116]	; 0x74
 80027e6:	2301      	movs	r3, #1
 80027e8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027ec:	f383 8810 	msr	PRIMASK, r3
}
 80027f0:	46c0      	nop			; (mov r8, r8)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2101      	movs	r1, #1
 80027fe:	438a      	bics	r2, r1
 8002800:	609a      	str	r2, [r3, #8]
 8002802:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002804:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002808:	f383 8810 	msr	PRIMASK, r3
}
 800280c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800280e:	f3ef 8310 	mrs	r3, PRIMASK
 8002812:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002814:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002816:	673b      	str	r3, [r7, #112]	; 0x70
 8002818:	2301      	movs	r3, #1
 800281a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800281c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800281e:	f383 8810 	msr	PRIMASK, r3
}
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2140      	movs	r1, #64	; 0x40
 8002830:	438a      	bics	r2, r1
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002836:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002838:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800283a:	f383 8810 	msr	PRIMASK, r3
}
 800283e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2280      	movs	r2, #128	; 0x80
 8002844:	2120      	movs	r1, #32
 8002846:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800284e:	f3ef 8310 	mrs	r3, PRIMASK
 8002852:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002854:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002856:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002858:	2301      	movs	r3, #1
 800285a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800285c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800285e:	f383 8810 	msr	PRIMASK, r3
}
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2110      	movs	r1, #16
 8002870:	438a      	bics	r2, r1
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002876:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002878:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800287a:	f383 8810 	msr	PRIMASK, r3
}
 800287e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002884:	0018      	movs	r0, r3
 8002886:	f7fe fa46 	bl	8000d16 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2202      	movs	r2, #2
 800288e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2258      	movs	r2, #88	; 0x58
 8002894:	5a9a      	ldrh	r2, [r3, r2]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	215a      	movs	r1, #90	; 0x5a
 800289a:	5a5b      	ldrh	r3, [r3, r1]
 800289c:	b29b      	uxth	r3, r3
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	0011      	movs	r1, r2
 80028a6:	0018      	movs	r0, r3
 80028a8:	f000 f8e0 	bl	8002a6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80028ac:	e0c2      	b.n	8002a34 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2258      	movs	r2, #88	; 0x58
 80028b2:	5a99      	ldrh	r1, [r3, r2]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	225a      	movs	r2, #90	; 0x5a
 80028b8:	5a9b      	ldrh	r3, [r3, r2]
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	208e      	movs	r0, #142	; 0x8e
 80028be:	183b      	adds	r3, r7, r0
 80028c0:	1a8a      	subs	r2, r1, r2
 80028c2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	225a      	movs	r2, #90	; 0x5a
 80028c8:	5a9b      	ldrh	r3, [r3, r2]
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d100      	bne.n	80028d2 <HAL_UART_IRQHandler+0x446>
 80028d0:	e0b2      	b.n	8002a38 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 80028d2:	183b      	adds	r3, r7, r0
 80028d4:	881b      	ldrh	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d100      	bne.n	80028dc <HAL_UART_IRQHandler+0x450>
 80028da:	e0ad      	b.n	8002a38 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028dc:	f3ef 8310 	mrs	r3, PRIMASK
 80028e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80028e2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028e4:	2488      	movs	r4, #136	; 0x88
 80028e6:	193a      	adds	r2, r7, r4
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	2301      	movs	r3, #1
 80028ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	f383 8810 	msr	PRIMASK, r3
}
 80028f4:	46c0      	nop			; (mov r8, r8)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4951      	ldr	r1, [pc, #324]	; (8002a48 <HAL_UART_IRQHandler+0x5bc>)
 8002902:	400a      	ands	r2, r1
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	193b      	adds	r3, r7, r4
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f383 8810 	msr	PRIMASK, r3
}
 8002912:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002914:	f3ef 8310 	mrs	r3, PRIMASK
 8002918:	61bb      	str	r3, [r7, #24]
  return(result);
 800291a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800291c:	2484      	movs	r4, #132	; 0x84
 800291e:	193a      	adds	r2, r7, r4
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	2301      	movs	r3, #1
 8002924:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	f383 8810 	msr	PRIMASK, r3
}
 800292c:	46c0      	nop			; (mov r8, r8)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2101      	movs	r1, #1
 800293a:	438a      	bics	r2, r1
 800293c:	609a      	str	r2, [r3, #8]
 800293e:	193b      	adds	r3, r7, r4
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002944:	6a3b      	ldr	r3, [r7, #32]
 8002946:	f383 8810 	msr	PRIMASK, r3
}
 800294a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2280      	movs	r2, #128	; 0x80
 8002950:	2120      	movs	r1, #32
 8002952:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002960:	f3ef 8310 	mrs	r3, PRIMASK
 8002964:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002968:	2480      	movs	r4, #128	; 0x80
 800296a:	193a      	adds	r2, r7, r4
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	2301      	movs	r3, #1
 8002970:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002974:	f383 8810 	msr	PRIMASK, r3
}
 8002978:	46c0      	nop			; (mov r8, r8)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2110      	movs	r1, #16
 8002986:	438a      	bics	r2, r1
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	193b      	adds	r3, r7, r4
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002992:	f383 8810 	msr	PRIMASK, r3
}
 8002996:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800299e:	183b      	adds	r3, r7, r0
 80029a0:	881a      	ldrh	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	0011      	movs	r1, r2
 80029a6:	0018      	movs	r0, r3
 80029a8:	f000 f860 	bl	8002a6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80029ac:	e044      	b.n	8002a38 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80029ae:	23a4      	movs	r3, #164	; 0xa4
 80029b0:	18fb      	adds	r3, r7, r3
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	2380      	movs	r3, #128	; 0x80
 80029b6:	035b      	lsls	r3, r3, #13
 80029b8:	4013      	ands	r3, r2
 80029ba:	d010      	beq.n	80029de <HAL_UART_IRQHandler+0x552>
 80029bc:	239c      	movs	r3, #156	; 0x9c
 80029be:	18fb      	adds	r3, r7, r3
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	2380      	movs	r3, #128	; 0x80
 80029c4:	03db      	lsls	r3, r3, #15
 80029c6:	4013      	ands	r3, r2
 80029c8:	d009      	beq.n	80029de <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2280      	movs	r2, #128	; 0x80
 80029d0:	0352      	lsls	r2, r2, #13
 80029d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	0018      	movs	r0, r3
 80029d8:	f000 fe88 	bl	80036ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80029dc:	e02f      	b.n	8002a3e <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80029de:	23a4      	movs	r3, #164	; 0xa4
 80029e0:	18fb      	adds	r3, r7, r3
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2280      	movs	r2, #128	; 0x80
 80029e6:	4013      	ands	r3, r2
 80029e8:	d00f      	beq.n	8002a0a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80029ea:	23a0      	movs	r3, #160	; 0xa0
 80029ec:	18fb      	adds	r3, r7, r3
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2280      	movs	r2, #128	; 0x80
 80029f2:	4013      	ands	r3, r2
 80029f4:	d009      	beq.n	8002a0a <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d01e      	beq.n	8002a3c <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	0010      	movs	r0, r2
 8002a06:	4798      	blx	r3
    }
    return;
 8002a08:	e018      	b.n	8002a3c <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002a0a:	23a4      	movs	r3, #164	; 0xa4
 8002a0c:	18fb      	adds	r3, r7, r3
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2240      	movs	r2, #64	; 0x40
 8002a12:	4013      	ands	r3, r2
 8002a14:	d013      	beq.n	8002a3e <HAL_UART_IRQHandler+0x5b2>
 8002a16:	23a0      	movs	r3, #160	; 0xa0
 8002a18:	18fb      	adds	r3, r7, r3
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2240      	movs	r2, #64	; 0x40
 8002a1e:	4013      	ands	r3, r2
 8002a20:	d00d      	beq.n	8002a3e <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	0018      	movs	r0, r3
 8002a26:	f000 fc7e 	bl	8003326 <UART_EndTransmit_IT>
    return;
 8002a2a:	e008      	b.n	8002a3e <HAL_UART_IRQHandler+0x5b2>
      return;
 8002a2c:	46c0      	nop			; (mov r8, r8)
 8002a2e:	e006      	b.n	8002a3e <HAL_UART_IRQHandler+0x5b2>
    return;
 8002a30:	46c0      	nop			; (mov r8, r8)
 8002a32:	e004      	b.n	8002a3e <HAL_UART_IRQHandler+0x5b2>
      return;
 8002a34:	46c0      	nop			; (mov r8, r8)
 8002a36:	e002      	b.n	8002a3e <HAL_UART_IRQHandler+0x5b2>
      return;
 8002a38:	46c0      	nop			; (mov r8, r8)
 8002a3a:	e000      	b.n	8002a3e <HAL_UART_IRQHandler+0x5b2>
    return;
 8002a3c:	46c0      	nop			; (mov r8, r8)
  }

}
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	b02b      	add	sp, #172	; 0xac
 8002a42:	bd90      	pop	{r4, r7, pc}
 8002a44:	fffffeff 	.word	0xfffffeff
 8002a48:	fffffedf 	.word	0xfffffedf

08002a4c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002a54:	46c0      	nop			; (mov r8, r8)
 8002a56:	46bd      	mov	sp, r7
 8002a58:	b002      	add	sp, #8
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002a64:	46c0      	nop			; (mov r8, r8)
 8002a66:	46bd      	mov	sp, r7
 8002a68:	b002      	add	sp, #8
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	000a      	movs	r2, r1
 8002a76:	1cbb      	adds	r3, r7, #2
 8002a78:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	b002      	add	sp, #8
 8002a80:	bd80      	pop	{r7, pc}
	...

08002a84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b088      	sub	sp, #32
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a8c:	231e      	movs	r3, #30
 8002a8e:	18fb      	adds	r3, r7, r3
 8002a90:	2200      	movs	r2, #0
 8002a92:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	69db      	ldr	r3, [r3, #28]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a8d      	ldr	r2, [pc, #564]	; (8002ce8 <UART_SetConfig+0x264>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	0019      	movs	r1, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	4a88      	ldr	r2, [pc, #544]	; (8002cec <UART_SetConfig+0x268>)
 8002aca:	4013      	ands	r3, r2
 8002acc:	0019      	movs	r1, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	4a7f      	ldr	r2, [pc, #508]	; (8002cf0 <UART_SetConfig+0x26c>)
 8002af2:	4013      	ands	r3, r2
 8002af4:	0019      	movs	r1, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a7b      	ldr	r2, [pc, #492]	; (8002cf4 <UART_SetConfig+0x270>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d127      	bne.n	8002b5a <UART_SetConfig+0xd6>
 8002b0a:	4b7b      	ldr	r3, [pc, #492]	; (8002cf8 <UART_SetConfig+0x274>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	2203      	movs	r2, #3
 8002b10:	4013      	ands	r3, r2
 8002b12:	2b03      	cmp	r3, #3
 8002b14:	d00d      	beq.n	8002b32 <UART_SetConfig+0xae>
 8002b16:	d81b      	bhi.n	8002b50 <UART_SetConfig+0xcc>
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d014      	beq.n	8002b46 <UART_SetConfig+0xc2>
 8002b1c:	d818      	bhi.n	8002b50 <UART_SetConfig+0xcc>
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d002      	beq.n	8002b28 <UART_SetConfig+0xa4>
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d00a      	beq.n	8002b3c <UART_SetConfig+0xb8>
 8002b26:	e013      	b.n	8002b50 <UART_SetConfig+0xcc>
 8002b28:	231f      	movs	r3, #31
 8002b2a:	18fb      	adds	r3, r7, r3
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	701a      	strb	r2, [r3, #0]
 8002b30:	e021      	b.n	8002b76 <UART_SetConfig+0xf2>
 8002b32:	231f      	movs	r3, #31
 8002b34:	18fb      	adds	r3, r7, r3
 8002b36:	2202      	movs	r2, #2
 8002b38:	701a      	strb	r2, [r3, #0]
 8002b3a:	e01c      	b.n	8002b76 <UART_SetConfig+0xf2>
 8002b3c:	231f      	movs	r3, #31
 8002b3e:	18fb      	adds	r3, r7, r3
 8002b40:	2204      	movs	r2, #4
 8002b42:	701a      	strb	r2, [r3, #0]
 8002b44:	e017      	b.n	8002b76 <UART_SetConfig+0xf2>
 8002b46:	231f      	movs	r3, #31
 8002b48:	18fb      	adds	r3, r7, r3
 8002b4a:	2208      	movs	r2, #8
 8002b4c:	701a      	strb	r2, [r3, #0]
 8002b4e:	e012      	b.n	8002b76 <UART_SetConfig+0xf2>
 8002b50:	231f      	movs	r3, #31
 8002b52:	18fb      	adds	r3, r7, r3
 8002b54:	2210      	movs	r2, #16
 8002b56:	701a      	strb	r2, [r3, #0]
 8002b58:	e00d      	b.n	8002b76 <UART_SetConfig+0xf2>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a67      	ldr	r2, [pc, #412]	; (8002cfc <UART_SetConfig+0x278>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d104      	bne.n	8002b6e <UART_SetConfig+0xea>
 8002b64:	231f      	movs	r3, #31
 8002b66:	18fb      	adds	r3, r7, r3
 8002b68:	2200      	movs	r2, #0
 8002b6a:	701a      	strb	r2, [r3, #0]
 8002b6c:	e003      	b.n	8002b76 <UART_SetConfig+0xf2>
 8002b6e:	231f      	movs	r3, #31
 8002b70:	18fb      	adds	r3, r7, r3
 8002b72:	2210      	movs	r2, #16
 8002b74:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69da      	ldr	r2, [r3, #28]
 8002b7a:	2380      	movs	r3, #128	; 0x80
 8002b7c:	021b      	lsls	r3, r3, #8
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d15c      	bne.n	8002c3c <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8002b82:	231f      	movs	r3, #31
 8002b84:	18fb      	adds	r3, r7, r3
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d015      	beq.n	8002bb8 <UART_SetConfig+0x134>
 8002b8c:	dc18      	bgt.n	8002bc0 <UART_SetConfig+0x13c>
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d00d      	beq.n	8002bae <UART_SetConfig+0x12a>
 8002b92:	dc15      	bgt.n	8002bc0 <UART_SetConfig+0x13c>
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d002      	beq.n	8002b9e <UART_SetConfig+0x11a>
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d005      	beq.n	8002ba8 <UART_SetConfig+0x124>
 8002b9c:	e010      	b.n	8002bc0 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b9e:	f7fe ffb5 	bl	8001b0c <HAL_RCC_GetPCLK1Freq>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	61bb      	str	r3, [r7, #24]
        break;
 8002ba6:	e012      	b.n	8002bce <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ba8:	4b55      	ldr	r3, [pc, #340]	; (8002d00 <UART_SetConfig+0x27c>)
 8002baa:	61bb      	str	r3, [r7, #24]
        break;
 8002bac:	e00f      	b.n	8002bce <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bae:	f7fe ff31 	bl	8001a14 <HAL_RCC_GetSysClockFreq>
 8002bb2:	0003      	movs	r3, r0
 8002bb4:	61bb      	str	r3, [r7, #24]
        break;
 8002bb6:	e00a      	b.n	8002bce <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bb8:	2380      	movs	r3, #128	; 0x80
 8002bba:	021b      	lsls	r3, r3, #8
 8002bbc:	61bb      	str	r3, [r7, #24]
        break;
 8002bbe:	e006      	b.n	8002bce <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002bc4:	231e      	movs	r3, #30
 8002bc6:	18fb      	adds	r3, r7, r3
 8002bc8:	2201      	movs	r2, #1
 8002bca:	701a      	strb	r2, [r3, #0]
        break;
 8002bcc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d100      	bne.n	8002bd6 <UART_SetConfig+0x152>
 8002bd4:	e07a      	b.n	8002ccc <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	005a      	lsls	r2, r3, #1
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	085b      	lsrs	r3, r3, #1
 8002be0:	18d2      	adds	r2, r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	0019      	movs	r1, r3
 8002be8:	0010      	movs	r0, r2
 8002bea:	f7fd fa97 	bl	800011c <__udivsi3>
 8002bee:	0003      	movs	r3, r0
 8002bf0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	2b0f      	cmp	r3, #15
 8002bf6:	d91c      	bls.n	8002c32 <UART_SetConfig+0x1ae>
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	2380      	movs	r3, #128	; 0x80
 8002bfc:	025b      	lsls	r3, r3, #9
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d217      	bcs.n	8002c32 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	200e      	movs	r0, #14
 8002c08:	183b      	adds	r3, r7, r0
 8002c0a:	210f      	movs	r1, #15
 8002c0c:	438a      	bics	r2, r1
 8002c0e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	085b      	lsrs	r3, r3, #1
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	2207      	movs	r2, #7
 8002c18:	4013      	ands	r3, r2
 8002c1a:	b299      	uxth	r1, r3
 8002c1c:	183b      	adds	r3, r7, r0
 8002c1e:	183a      	adds	r2, r7, r0
 8002c20:	8812      	ldrh	r2, [r2, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	183a      	adds	r2, r7, r0
 8002c2c:	8812      	ldrh	r2, [r2, #0]
 8002c2e:	60da      	str	r2, [r3, #12]
 8002c30:	e04c      	b.n	8002ccc <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002c32:	231e      	movs	r3, #30
 8002c34:	18fb      	adds	r3, r7, r3
 8002c36:	2201      	movs	r2, #1
 8002c38:	701a      	strb	r2, [r3, #0]
 8002c3a:	e047      	b.n	8002ccc <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c3c:	231f      	movs	r3, #31
 8002c3e:	18fb      	adds	r3, r7, r3
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b08      	cmp	r3, #8
 8002c44:	d015      	beq.n	8002c72 <UART_SetConfig+0x1ee>
 8002c46:	dc18      	bgt.n	8002c7a <UART_SetConfig+0x1f6>
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d00d      	beq.n	8002c68 <UART_SetConfig+0x1e4>
 8002c4c:	dc15      	bgt.n	8002c7a <UART_SetConfig+0x1f6>
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <UART_SetConfig+0x1d4>
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d005      	beq.n	8002c62 <UART_SetConfig+0x1de>
 8002c56:	e010      	b.n	8002c7a <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c58:	f7fe ff58 	bl	8001b0c <HAL_RCC_GetPCLK1Freq>
 8002c5c:	0003      	movs	r3, r0
 8002c5e:	61bb      	str	r3, [r7, #24]
        break;
 8002c60:	e012      	b.n	8002c88 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c62:	4b27      	ldr	r3, [pc, #156]	; (8002d00 <UART_SetConfig+0x27c>)
 8002c64:	61bb      	str	r3, [r7, #24]
        break;
 8002c66:	e00f      	b.n	8002c88 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c68:	f7fe fed4 	bl	8001a14 <HAL_RCC_GetSysClockFreq>
 8002c6c:	0003      	movs	r3, r0
 8002c6e:	61bb      	str	r3, [r7, #24]
        break;
 8002c70:	e00a      	b.n	8002c88 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c72:	2380      	movs	r3, #128	; 0x80
 8002c74:	021b      	lsls	r3, r3, #8
 8002c76:	61bb      	str	r3, [r7, #24]
        break;
 8002c78:	e006      	b.n	8002c88 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c7e:	231e      	movs	r3, #30
 8002c80:	18fb      	adds	r3, r7, r3
 8002c82:	2201      	movs	r2, #1
 8002c84:	701a      	strb	r2, [r3, #0]
        break;
 8002c86:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d01e      	beq.n	8002ccc <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	085a      	lsrs	r2, r3, #1
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	18d2      	adds	r2, r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	0019      	movs	r1, r3
 8002c9e:	0010      	movs	r0, r2
 8002ca0:	f7fd fa3c 	bl	800011c <__udivsi3>
 8002ca4:	0003      	movs	r3, r0
 8002ca6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	2b0f      	cmp	r3, #15
 8002cac:	d90a      	bls.n	8002cc4 <UART_SetConfig+0x240>
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	2380      	movs	r3, #128	; 0x80
 8002cb2:	025b      	lsls	r3, r3, #9
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d205      	bcs.n	8002cc4 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	60da      	str	r2, [r3, #12]
 8002cc2:	e003      	b.n	8002ccc <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002cc4:	231e      	movs	r3, #30
 8002cc6:	18fb      	adds	r3, r7, r3
 8002cc8:	2201      	movs	r2, #1
 8002cca:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002cd8:	231e      	movs	r3, #30
 8002cda:	18fb      	adds	r3, r7, r3
 8002cdc:	781b      	ldrb	r3, [r3, #0]
}
 8002cde:	0018      	movs	r0, r3
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	b008      	add	sp, #32
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	efff69f3 	.word	0xefff69f3
 8002cec:	ffffcfff 	.word	0xffffcfff
 8002cf0:	fffff4ff 	.word	0xfffff4ff
 8002cf4:	40013800 	.word	0x40013800
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	40004400 	.word	0x40004400
 8002d00:	007a1200 	.word	0x007a1200

08002d04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	2208      	movs	r2, #8
 8002d12:	4013      	ands	r3, r2
 8002d14:	d00b      	beq.n	8002d2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	4a4a      	ldr	r2, [pc, #296]	; (8002e48 <UART_AdvFeatureConfig+0x144>)
 8002d1e:	4013      	ands	r3, r2
 8002d20:	0019      	movs	r1, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	2201      	movs	r2, #1
 8002d34:	4013      	ands	r3, r2
 8002d36:	d00b      	beq.n	8002d50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	4a43      	ldr	r2, [pc, #268]	; (8002e4c <UART_AdvFeatureConfig+0x148>)
 8002d40:	4013      	ands	r3, r2
 8002d42:	0019      	movs	r1, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d54:	2202      	movs	r2, #2
 8002d56:	4013      	ands	r3, r2
 8002d58:	d00b      	beq.n	8002d72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	4a3b      	ldr	r2, [pc, #236]	; (8002e50 <UART_AdvFeatureConfig+0x14c>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	0019      	movs	r1, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	2204      	movs	r2, #4
 8002d78:	4013      	ands	r3, r2
 8002d7a:	d00b      	beq.n	8002d94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	4a34      	ldr	r2, [pc, #208]	; (8002e54 <UART_AdvFeatureConfig+0x150>)
 8002d84:	4013      	ands	r3, r2
 8002d86:	0019      	movs	r1, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	2210      	movs	r2, #16
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	d00b      	beq.n	8002db6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	4a2c      	ldr	r2, [pc, #176]	; (8002e58 <UART_AdvFeatureConfig+0x154>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	0019      	movs	r1, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	2220      	movs	r2, #32
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	d00b      	beq.n	8002dd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	4a25      	ldr	r2, [pc, #148]	; (8002e5c <UART_AdvFeatureConfig+0x158>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	0019      	movs	r1, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	2240      	movs	r2, #64	; 0x40
 8002dde:	4013      	ands	r3, r2
 8002de0:	d01d      	beq.n	8002e1e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	4a1d      	ldr	r2, [pc, #116]	; (8002e60 <UART_AdvFeatureConfig+0x15c>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	0019      	movs	r1, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dfe:	2380      	movs	r3, #128	; 0x80
 8002e00:	035b      	lsls	r3, r3, #13
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d10b      	bne.n	8002e1e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	4a15      	ldr	r2, [pc, #84]	; (8002e64 <UART_AdvFeatureConfig+0x160>)
 8002e0e:	4013      	ands	r3, r2
 8002e10:	0019      	movs	r1, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	2280      	movs	r2, #128	; 0x80
 8002e24:	4013      	ands	r3, r2
 8002e26:	d00b      	beq.n	8002e40 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	4a0e      	ldr	r2, [pc, #56]	; (8002e68 <UART_AdvFeatureConfig+0x164>)
 8002e30:	4013      	ands	r3, r2
 8002e32:	0019      	movs	r1, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	605a      	str	r2, [r3, #4]
  }
}
 8002e40:	46c0      	nop			; (mov r8, r8)
 8002e42:	46bd      	mov	sp, r7
 8002e44:	b002      	add	sp, #8
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	ffff7fff 	.word	0xffff7fff
 8002e4c:	fffdffff 	.word	0xfffdffff
 8002e50:	fffeffff 	.word	0xfffeffff
 8002e54:	fffbffff 	.word	0xfffbffff
 8002e58:	ffffefff 	.word	0xffffefff
 8002e5c:	ffffdfff 	.word	0xffffdfff
 8002e60:	ffefffff 	.word	0xffefffff
 8002e64:	ff9fffff 	.word	0xff9fffff
 8002e68:	fff7ffff 	.word	0xfff7ffff

08002e6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b092      	sub	sp, #72	; 0x48
 8002e70:	af02      	add	r7, sp, #8
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2284      	movs	r2, #132	; 0x84
 8002e78:	2100      	movs	r1, #0
 8002e7a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e7c:	f7fd fe94 	bl	8000ba8 <HAL_GetTick>
 8002e80:	0003      	movs	r3, r0
 8002e82:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2208      	movs	r2, #8
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	2b08      	cmp	r3, #8
 8002e90:	d12c      	bne.n	8002eec <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e94:	2280      	movs	r2, #128	; 0x80
 8002e96:	0391      	lsls	r1, r2, #14
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	4a46      	ldr	r2, [pc, #280]	; (8002fb4 <UART_CheckIdleState+0x148>)
 8002e9c:	9200      	str	r2, [sp, #0]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f000 f88c 	bl	8002fbc <UART_WaitOnFlagUntilTimeout>
 8002ea4:	1e03      	subs	r3, r0, #0
 8002ea6:	d021      	beq.n	8002eec <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ea8:	f3ef 8310 	mrs	r3, PRIMASK
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002eb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb8:	f383 8810 	msr	PRIMASK, r3
}
 8002ebc:	46c0      	nop			; (mov r8, r8)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2180      	movs	r1, #128	; 0x80
 8002eca:	438a      	bics	r2, r1
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed4:	f383 8810 	msr	PRIMASK, r3
}
 8002ed8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2220      	movs	r2, #32
 8002ede:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2278      	movs	r2, #120	; 0x78
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e05f      	b.n	8002fac <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2204      	movs	r2, #4
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d146      	bne.n	8002f88 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002efc:	2280      	movs	r2, #128	; 0x80
 8002efe:	03d1      	lsls	r1, r2, #15
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	4a2c      	ldr	r2, [pc, #176]	; (8002fb4 <UART_CheckIdleState+0x148>)
 8002f04:	9200      	str	r2, [sp, #0]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f000 f858 	bl	8002fbc <UART_WaitOnFlagUntilTimeout>
 8002f0c:	1e03      	subs	r3, r0, #0
 8002f0e:	d03b      	beq.n	8002f88 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f10:	f3ef 8310 	mrs	r3, PRIMASK
 8002f14:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f16:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f18:	637b      	str	r3, [r7, #52]	; 0x34
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	f383 8810 	msr	PRIMASK, r3
}
 8002f24:	46c0      	nop			; (mov r8, r8)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4921      	ldr	r1, [pc, #132]	; (8002fb8 <UART_CheckIdleState+0x14c>)
 8002f32:	400a      	ands	r2, r1
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	f383 8810 	msr	PRIMASK, r3
}
 8002f40:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f42:	f3ef 8310 	mrs	r3, PRIMASK
 8002f46:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f48:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f4a:	633b      	str	r3, [r7, #48]	; 0x30
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f383 8810 	msr	PRIMASK, r3
}
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689a      	ldr	r2, [r3, #8]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2101      	movs	r1, #1
 8002f64:	438a      	bics	r2, r1
 8002f66:	609a      	str	r2, [r3, #8]
 8002f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	f383 8810 	msr	PRIMASK, r3
}
 8002f72:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2280      	movs	r2, #128	; 0x80
 8002f78:	2120      	movs	r1, #32
 8002f7a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2278      	movs	r2, #120	; 0x78
 8002f80:	2100      	movs	r1, #0
 8002f82:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e011      	b.n	8002fac <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2280      	movs	r2, #128	; 0x80
 8002f92:	2120      	movs	r1, #32
 8002f94:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2278      	movs	r2, #120	; 0x78
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	0018      	movs	r0, r3
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	b010      	add	sp, #64	; 0x40
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	01ffffff 	.word	0x01ffffff
 8002fb8:	fffffedf 	.word	0xfffffedf

08002fbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	603b      	str	r3, [r7, #0]
 8002fc8:	1dfb      	adds	r3, r7, #7
 8002fca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fcc:	e051      	b.n	8003072 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	d04e      	beq.n	8003072 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd4:	f7fd fde8 	bl	8000ba8 <HAL_GetTick>
 8002fd8:	0002      	movs	r2, r0
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d302      	bcc.n	8002fea <UART_WaitOnFlagUntilTimeout+0x2e>
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e051      	b.n	8003092 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2204      	movs	r2, #4
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d03b      	beq.n	8003072 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2b80      	cmp	r3, #128	; 0x80
 8002ffe:	d038      	beq.n	8003072 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2b40      	cmp	r3, #64	; 0x40
 8003004:	d035      	beq.n	8003072 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	69db      	ldr	r3, [r3, #28]
 800300c:	2208      	movs	r2, #8
 800300e:	4013      	ands	r3, r2
 8003010:	2b08      	cmp	r3, #8
 8003012:	d111      	bne.n	8003038 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2208      	movs	r2, #8
 800301a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	0018      	movs	r0, r3
 8003020:	f000 f906 	bl	8003230 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2284      	movs	r2, #132	; 0x84
 8003028:	2108      	movs	r1, #8
 800302a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2278      	movs	r2, #120	; 0x78
 8003030:	2100      	movs	r1, #0
 8003032:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e02c      	b.n	8003092 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	69da      	ldr	r2, [r3, #28]
 800303e:	2380      	movs	r3, #128	; 0x80
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	401a      	ands	r2, r3
 8003044:	2380      	movs	r3, #128	; 0x80
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	429a      	cmp	r2, r3
 800304a:	d112      	bne.n	8003072 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2280      	movs	r2, #128	; 0x80
 8003052:	0112      	lsls	r2, r2, #4
 8003054:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	0018      	movs	r0, r3
 800305a:	f000 f8e9 	bl	8003230 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2284      	movs	r2, #132	; 0x84
 8003062:	2120      	movs	r1, #32
 8003064:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2278      	movs	r2, #120	; 0x78
 800306a:	2100      	movs	r1, #0
 800306c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e00f      	b.n	8003092 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	69db      	ldr	r3, [r3, #28]
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	4013      	ands	r3, r2
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	425a      	negs	r2, r3
 8003082:	4153      	adcs	r3, r2
 8003084:	b2db      	uxtb	r3, r3
 8003086:	001a      	movs	r2, r3
 8003088:	1dfb      	adds	r3, r7, #7
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	429a      	cmp	r2, r3
 800308e:	d09e      	beq.n	8002fce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	0018      	movs	r0, r3
 8003094:	46bd      	mov	sp, r7
 8003096:	b004      	add	sp, #16
 8003098:	bd80      	pop	{r7, pc}
	...

0800309c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b090      	sub	sp, #64	; 0x40
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	1dbb      	adds	r3, r7, #6
 80030a8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	1dba      	adds	r2, r7, #6
 80030b4:	2158      	movs	r1, #88	; 0x58
 80030b6:	8812      	ldrh	r2, [r2, #0]
 80030b8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	1dba      	adds	r2, r7, #6
 80030be:	215a      	movs	r1, #90	; 0x5a
 80030c0:	8812      	ldrh	r2, [r2, #0]
 80030c2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	2380      	movs	r3, #128	; 0x80
 80030d0:	015b      	lsls	r3, r3, #5
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d10d      	bne.n	80030f2 <UART_Start_Receive_IT+0x56>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d104      	bne.n	80030e8 <UART_Start_Receive_IT+0x4c>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	225c      	movs	r2, #92	; 0x5c
 80030e2:	4950      	ldr	r1, [pc, #320]	; (8003224 <UART_Start_Receive_IT+0x188>)
 80030e4:	5299      	strh	r1, [r3, r2]
 80030e6:	e02e      	b.n	8003146 <UART_Start_Receive_IT+0xaa>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	225c      	movs	r2, #92	; 0x5c
 80030ec:	21ff      	movs	r1, #255	; 0xff
 80030ee:	5299      	strh	r1, [r3, r2]
 80030f0:	e029      	b.n	8003146 <UART_Start_Receive_IT+0xaa>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10d      	bne.n	8003116 <UART_Start_Receive_IT+0x7a>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d104      	bne.n	800310c <UART_Start_Receive_IT+0x70>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	225c      	movs	r2, #92	; 0x5c
 8003106:	21ff      	movs	r1, #255	; 0xff
 8003108:	5299      	strh	r1, [r3, r2]
 800310a:	e01c      	b.n	8003146 <UART_Start_Receive_IT+0xaa>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	225c      	movs	r2, #92	; 0x5c
 8003110:	217f      	movs	r1, #127	; 0x7f
 8003112:	5299      	strh	r1, [r3, r2]
 8003114:	e017      	b.n	8003146 <UART_Start_Receive_IT+0xaa>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	2380      	movs	r3, #128	; 0x80
 800311c:	055b      	lsls	r3, r3, #21
 800311e:	429a      	cmp	r2, r3
 8003120:	d10d      	bne.n	800313e <UART_Start_Receive_IT+0xa2>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d104      	bne.n	8003134 <UART_Start_Receive_IT+0x98>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	225c      	movs	r2, #92	; 0x5c
 800312e:	217f      	movs	r1, #127	; 0x7f
 8003130:	5299      	strh	r1, [r3, r2]
 8003132:	e008      	b.n	8003146 <UART_Start_Receive_IT+0xaa>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	225c      	movs	r2, #92	; 0x5c
 8003138:	213f      	movs	r1, #63	; 0x3f
 800313a:	5299      	strh	r1, [r3, r2]
 800313c:	e003      	b.n	8003146 <UART_Start_Receive_IT+0xaa>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	225c      	movs	r2, #92	; 0x5c
 8003142:	2100      	movs	r1, #0
 8003144:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2284      	movs	r2, #132	; 0x84
 800314a:	2100      	movs	r1, #0
 800314c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2280      	movs	r2, #128	; 0x80
 8003152:	2122      	movs	r1, #34	; 0x22
 8003154:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003156:	f3ef 8310 	mrs	r3, PRIMASK
 800315a:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800315c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800315e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003160:	2301      	movs	r3, #1
 8003162:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003166:	f383 8810 	msr	PRIMASK, r3
}
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2101      	movs	r1, #1
 8003178:	430a      	orrs	r2, r1
 800317a:	609a      	str	r2, [r3, #8]
 800317c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800317e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003182:	f383 8810 	msr	PRIMASK, r3
}
 8003186:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	2380      	movs	r3, #128	; 0x80
 800318e:	015b      	lsls	r3, r3, #5
 8003190:	429a      	cmp	r2, r3
 8003192:	d107      	bne.n	80031a4 <UART_Start_Receive_IT+0x108>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d103      	bne.n	80031a4 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4a22      	ldr	r2, [pc, #136]	; (8003228 <UART_Start_Receive_IT+0x18c>)
 80031a0:	669a      	str	r2, [r3, #104]	; 0x68
 80031a2:	e002      	b.n	80031aa <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	4a21      	ldr	r2, [pc, #132]	; (800322c <UART_Start_Receive_IT+0x190>)
 80031a8:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d019      	beq.n	80031e6 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031b2:	f3ef 8310 	mrs	r3, PRIMASK
 80031b6:	61fb      	str	r3, [r7, #28]
  return(result);
 80031b8:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80031ba:	637b      	str	r3, [r7, #52]	; 0x34
 80031bc:	2301      	movs	r3, #1
 80031be:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031c0:	6a3b      	ldr	r3, [r7, #32]
 80031c2:	f383 8810 	msr	PRIMASK, r3
}
 80031c6:	46c0      	nop			; (mov r8, r8)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2190      	movs	r1, #144	; 0x90
 80031d4:	0049      	lsls	r1, r1, #1
 80031d6:	430a      	orrs	r2, r1
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e0:	f383 8810 	msr	PRIMASK, r3
}
 80031e4:	e018      	b.n	8003218 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031e6:	f3ef 8310 	mrs	r3, PRIMASK
 80031ea:	613b      	str	r3, [r7, #16]
  return(result);
 80031ec:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80031ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80031f0:	2301      	movs	r3, #1
 80031f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f383 8810 	msr	PRIMASK, r3
}
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2120      	movs	r1, #32
 8003208:	430a      	orrs	r2, r1
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800320e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	f383 8810 	msr	PRIMASK, r3
}
 8003216:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	0018      	movs	r0, r3
 800321c:	46bd      	mov	sp, r7
 800321e:	b010      	add	sp, #64	; 0x40
 8003220:	bd80      	pop	{r7, pc}
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	000001ff 	.word	0x000001ff
 8003228:	08003535 	.word	0x08003535
 800322c:	0800337d 	.word	0x0800337d

08003230 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b08e      	sub	sp, #56	; 0x38
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003238:	f3ef 8310 	mrs	r3, PRIMASK
 800323c:	617b      	str	r3, [r7, #20]
  return(result);
 800323e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003240:	637b      	str	r3, [r7, #52]	; 0x34
 8003242:	2301      	movs	r3, #1
 8003244:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	f383 8810 	msr	PRIMASK, r3
}
 800324c:	46c0      	nop			; (mov r8, r8)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4926      	ldr	r1, [pc, #152]	; (80032f4 <UART_EndRxTransfer+0xc4>)
 800325a:	400a      	ands	r2, r1
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003260:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	f383 8810 	msr	PRIMASK, r3
}
 8003268:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800326a:	f3ef 8310 	mrs	r3, PRIMASK
 800326e:	623b      	str	r3, [r7, #32]
  return(result);
 8003270:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003272:	633b      	str	r3, [r7, #48]	; 0x30
 8003274:	2301      	movs	r3, #1
 8003276:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	f383 8810 	msr	PRIMASK, r3
}
 800327e:	46c0      	nop			; (mov r8, r8)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2101      	movs	r1, #1
 800328c:	438a      	bics	r2, r1
 800328e:	609a      	str	r2, [r3, #8]
 8003290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003292:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003296:	f383 8810 	msr	PRIMASK, r3
}
 800329a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d118      	bne.n	80032d6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032a4:	f3ef 8310 	mrs	r3, PRIMASK
 80032a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80032aa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032ae:	2301      	movs	r3, #1
 80032b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f383 8810 	msr	PRIMASK, r3
}
 80032b8:	46c0      	nop			; (mov r8, r8)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2110      	movs	r1, #16
 80032c6:	438a      	bics	r2, r1
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	f383 8810 	msr	PRIMASK, r3
}
 80032d4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2280      	movs	r2, #128	; 0x80
 80032da:	2120      	movs	r1, #32
 80032dc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80032ea:	46c0      	nop			; (mov r8, r8)
 80032ec:	46bd      	mov	sp, r7
 80032ee:	b00e      	add	sp, #56	; 0x38
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	fffffedf 	.word	0xfffffedf

080032f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	225a      	movs	r2, #90	; 0x5a
 800330a:	2100      	movs	r1, #0
 800330c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2252      	movs	r2, #82	; 0x52
 8003312:	2100      	movs	r1, #0
 8003314:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	0018      	movs	r0, r3
 800331a:	f7ff fb9f 	bl	8002a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800331e:	46c0      	nop			; (mov r8, r8)
 8003320:	46bd      	mov	sp, r7
 8003322:	b004      	add	sp, #16
 8003324:	bd80      	pop	{r7, pc}

08003326 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b086      	sub	sp, #24
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800332e:	f3ef 8310 	mrs	r3, PRIMASK
 8003332:	60bb      	str	r3, [r7, #8]
  return(result);
 8003334:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003336:	617b      	str	r3, [r7, #20]
 8003338:	2301      	movs	r3, #1
 800333a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f383 8810 	msr	PRIMASK, r3
}
 8003342:	46c0      	nop			; (mov r8, r8)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2140      	movs	r1, #64	; 0x40
 8003350:	438a      	bics	r2, r1
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	f383 8810 	msr	PRIMASK, r3
}
 800335e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2220      	movs	r2, #32
 8003364:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	0018      	movs	r0, r3
 8003370:	f7ff fb6c 	bl	8002a4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003374:	46c0      	nop			; (mov r8, r8)
 8003376:	46bd      	mov	sp, r7
 8003378:	b006      	add	sp, #24
 800337a:	bd80      	pop	{r7, pc}

0800337c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b094      	sub	sp, #80	; 0x50
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003384:	204e      	movs	r0, #78	; 0x4e
 8003386:	183b      	adds	r3, r7, r0
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	215c      	movs	r1, #92	; 0x5c
 800338c:	5a52      	ldrh	r2, [r2, r1]
 800338e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2280      	movs	r2, #128	; 0x80
 8003394:	589b      	ldr	r3, [r3, r2]
 8003396:	2b22      	cmp	r3, #34	; 0x22
 8003398:	d000      	beq.n	800339c <UART_RxISR_8BIT+0x20>
 800339a:	e0ba      	b.n	8003512 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	214c      	movs	r1, #76	; 0x4c
 80033a2:	187b      	adds	r3, r7, r1
 80033a4:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80033a6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80033a8:	187b      	adds	r3, r7, r1
 80033aa:	881b      	ldrh	r3, [r3, #0]
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	183b      	adds	r3, r7, r0
 80033b0:	881b      	ldrh	r3, [r3, #0]
 80033b2:	b2d9      	uxtb	r1, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b8:	400a      	ands	r2, r1
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c2:	1c5a      	adds	r2, r3, #1
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	225a      	movs	r2, #90	; 0x5a
 80033cc:	5a9b      	ldrh	r3, [r3, r2]
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b299      	uxth	r1, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	225a      	movs	r2, #90	; 0x5a
 80033d8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	225a      	movs	r2, #90	; 0x5a
 80033de:	5a9b      	ldrh	r3, [r3, r2]
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d000      	beq.n	80033e8 <UART_RxISR_8BIT+0x6c>
 80033e6:	e09c      	b.n	8003522 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033e8:	f3ef 8310 	mrs	r3, PRIMASK
 80033ec:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80033f2:	2301      	movs	r3, #1
 80033f4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f8:	f383 8810 	msr	PRIMASK, r3
}
 80033fc:	46c0      	nop			; (mov r8, r8)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4948      	ldr	r1, [pc, #288]	; (800352c <UART_RxISR_8BIT+0x1b0>)
 800340a:	400a      	ands	r2, r1
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003410:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003414:	f383 8810 	msr	PRIMASK, r3
}
 8003418:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800341a:	f3ef 8310 	mrs	r3, PRIMASK
 800341e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003420:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003422:	647b      	str	r3, [r7, #68]	; 0x44
 8003424:	2301      	movs	r3, #1
 8003426:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800342a:	f383 8810 	msr	PRIMASK, r3
}
 800342e:	46c0      	nop			; (mov r8, r8)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2101      	movs	r1, #1
 800343c:	438a      	bics	r2, r1
 800343e:	609a      	str	r2, [r3, #8]
 8003440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003442:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003446:	f383 8810 	msr	PRIMASK, r3
}
 800344a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2280      	movs	r2, #128	; 0x80
 8003450:	2120      	movs	r1, #32
 8003452:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	2380      	movs	r3, #128	; 0x80
 8003468:	041b      	lsls	r3, r3, #16
 800346a:	4013      	ands	r3, r2
 800346c:	d018      	beq.n	80034a0 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800346e:	f3ef 8310 	mrs	r3, PRIMASK
 8003472:	61bb      	str	r3, [r7, #24]
  return(result);
 8003474:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003476:	643b      	str	r3, [r7, #64]	; 0x40
 8003478:	2301      	movs	r3, #1
 800347a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f383 8810 	msr	PRIMASK, r3
}
 8003482:	46c0      	nop			; (mov r8, r8)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4928      	ldr	r1, [pc, #160]	; (8003530 <UART_RxISR_8BIT+0x1b4>)
 8003490:	400a      	ands	r2, r1
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003496:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	f383 8810 	msr	PRIMASK, r3
}
 800349e:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d12f      	bne.n	8003508 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034ae:	f3ef 8310 	mrs	r3, PRIMASK
 80034b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80034b4:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034b8:	2301      	movs	r3, #1
 80034ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	f383 8810 	msr	PRIMASK, r3
}
 80034c2:	46c0      	nop			; (mov r8, r8)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2110      	movs	r1, #16
 80034d0:	438a      	bics	r2, r1
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f383 8810 	msr	PRIMASK, r3
}
 80034de:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	2210      	movs	r2, #16
 80034e8:	4013      	ands	r3, r2
 80034ea:	2b10      	cmp	r3, #16
 80034ec:	d103      	bne.n	80034f6 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2210      	movs	r2, #16
 80034f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2258      	movs	r2, #88	; 0x58
 80034fa:	5a9a      	ldrh	r2, [r3, r2]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	0011      	movs	r1, r2
 8003500:	0018      	movs	r0, r3
 8003502:	f7ff fab3 	bl	8002a6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003506:	e00c      	b.n	8003522 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	0018      	movs	r0, r3
 800350c:	f7fc ffec 	bl	80004e8 <HAL_UART_RxCpltCallback>
}
 8003510:	e007      	b.n	8003522 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	699a      	ldr	r2, [r3, #24]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2108      	movs	r1, #8
 800351e:	430a      	orrs	r2, r1
 8003520:	619a      	str	r2, [r3, #24]
}
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	46bd      	mov	sp, r7
 8003526:	b014      	add	sp, #80	; 0x50
 8003528:	bd80      	pop	{r7, pc}
 800352a:	46c0      	nop			; (mov r8, r8)
 800352c:	fffffedf 	.word	0xfffffedf
 8003530:	fbffffff 	.word	0xfbffffff

08003534 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b094      	sub	sp, #80	; 0x50
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800353c:	204e      	movs	r0, #78	; 0x4e
 800353e:	183b      	adds	r3, r7, r0
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	215c      	movs	r1, #92	; 0x5c
 8003544:	5a52      	ldrh	r2, [r2, r1]
 8003546:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2280      	movs	r2, #128	; 0x80
 800354c:	589b      	ldr	r3, [r3, r2]
 800354e:	2b22      	cmp	r3, #34	; 0x22
 8003550:	d000      	beq.n	8003554 <UART_RxISR_16BIT+0x20>
 8003552:	e0ba      	b.n	80036ca <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	214c      	movs	r1, #76	; 0x4c
 800355a:	187b      	adds	r3, r7, r1
 800355c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800355e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003564:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8003566:	187b      	adds	r3, r7, r1
 8003568:	183a      	adds	r2, r7, r0
 800356a:	881b      	ldrh	r3, [r3, #0]
 800356c:	8812      	ldrh	r2, [r2, #0]
 800356e:	4013      	ands	r3, r2
 8003570:	b29a      	uxth	r2, r3
 8003572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003574:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357a:	1c9a      	adds	r2, r3, #2
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	225a      	movs	r2, #90	; 0x5a
 8003584:	5a9b      	ldrh	r3, [r3, r2]
 8003586:	b29b      	uxth	r3, r3
 8003588:	3b01      	subs	r3, #1
 800358a:	b299      	uxth	r1, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	225a      	movs	r2, #90	; 0x5a
 8003590:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	225a      	movs	r2, #90	; 0x5a
 8003596:	5a9b      	ldrh	r3, [r3, r2]
 8003598:	b29b      	uxth	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d000      	beq.n	80035a0 <UART_RxISR_16BIT+0x6c>
 800359e:	e09c      	b.n	80036da <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035a0:	f3ef 8310 	mrs	r3, PRIMASK
 80035a4:	623b      	str	r3, [r7, #32]
  return(result);
 80035a6:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035a8:	647b      	str	r3, [r7, #68]	; 0x44
 80035aa:	2301      	movs	r3, #1
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	f383 8810 	msr	PRIMASK, r3
}
 80035b4:	46c0      	nop			; (mov r8, r8)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4948      	ldr	r1, [pc, #288]	; (80036e4 <UART_RxISR_16BIT+0x1b0>)
 80035c2:	400a      	ands	r2, r1
 80035c4:	601a      	str	r2, [r3, #0]
 80035c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035c8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035cc:	f383 8810 	msr	PRIMASK, r3
}
 80035d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035d2:	f3ef 8310 	mrs	r3, PRIMASK
 80035d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80035d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035da:	643b      	str	r3, [r7, #64]	; 0x40
 80035dc:	2301      	movs	r3, #1
 80035de:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e2:	f383 8810 	msr	PRIMASK, r3
}
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2101      	movs	r1, #1
 80035f4:	438a      	bics	r2, r1
 80035f6:	609a      	str	r2, [r3, #8]
 80035f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035fa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035fe:	f383 8810 	msr	PRIMASK, r3
}
 8003602:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2280      	movs	r2, #128	; 0x80
 8003608:	2120      	movs	r1, #32
 800360a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	2380      	movs	r3, #128	; 0x80
 8003620:	041b      	lsls	r3, r3, #16
 8003622:	4013      	ands	r3, r2
 8003624:	d018      	beq.n	8003658 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003626:	f3ef 8310 	mrs	r3, PRIMASK
 800362a:	617b      	str	r3, [r7, #20]
  return(result);
 800362c:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800362e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003630:	2301      	movs	r3, #1
 8003632:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	f383 8810 	msr	PRIMASK, r3
}
 800363a:	46c0      	nop			; (mov r8, r8)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4928      	ldr	r1, [pc, #160]	; (80036e8 <UART_RxISR_16BIT+0x1b4>)
 8003648:	400a      	ands	r2, r1
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800364e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f383 8810 	msr	PRIMASK, r3
}
 8003656:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800365c:	2b01      	cmp	r3, #1
 800365e:	d12f      	bne.n	80036c0 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003666:	f3ef 8310 	mrs	r3, PRIMASK
 800366a:	60bb      	str	r3, [r7, #8]
  return(result);
 800366c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800366e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003670:	2301      	movs	r3, #1
 8003672:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f383 8810 	msr	PRIMASK, r3
}
 800367a:	46c0      	nop			; (mov r8, r8)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2110      	movs	r1, #16
 8003688:	438a      	bics	r2, r1
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800368e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	f383 8810 	msr	PRIMASK, r3
}
 8003696:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	2210      	movs	r2, #16
 80036a0:	4013      	ands	r3, r2
 80036a2:	2b10      	cmp	r3, #16
 80036a4:	d103      	bne.n	80036ae <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2210      	movs	r2, #16
 80036ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2258      	movs	r2, #88	; 0x58
 80036b2:	5a9a      	ldrh	r2, [r3, r2]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	0011      	movs	r1, r2
 80036b8:	0018      	movs	r0, r3
 80036ba:	f7ff f9d7 	bl	8002a6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80036be:	e00c      	b.n	80036da <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	0018      	movs	r0, r3
 80036c4:	f7fc ff10 	bl	80004e8 <HAL_UART_RxCpltCallback>
}
 80036c8:	e007      	b.n	80036da <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	699a      	ldr	r2, [r3, #24]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2108      	movs	r1, #8
 80036d6:	430a      	orrs	r2, r1
 80036d8:	619a      	str	r2, [r3, #24]
}
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	46bd      	mov	sp, r7
 80036de:	b014      	add	sp, #80	; 0x50
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	46c0      	nop			; (mov r8, r8)
 80036e4:	fffffedf 	.word	0xfffffedf
 80036e8:	fbffffff 	.word	0xfbffffff

080036ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80036f4:	46c0      	nop			; (mov r8, r8)
 80036f6:	46bd      	mov	sp, r7
 80036f8:	b002      	add	sp, #8
 80036fa:	bd80      	pop	{r7, pc}

080036fc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	0002      	movs	r2, r0
 8003704:	1dbb      	adds	r3, r7, #6
 8003706:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003708:	2300      	movs	r3, #0
 800370a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800370c:	1dbb      	adds	r3, r7, #6
 800370e:	2200      	movs	r2, #0
 8003710:	5e9b      	ldrsh	r3, [r3, r2]
 8003712:	2b84      	cmp	r3, #132	; 0x84
 8003714:	d006      	beq.n	8003724 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8003716:	1dbb      	adds	r3, r7, #6
 8003718:	2200      	movs	r2, #0
 800371a:	5e9a      	ldrsh	r2, [r3, r2]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	18d3      	adds	r3, r2, r3
 8003720:	3303      	adds	r3, #3
 8003722:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003724:	68fb      	ldr	r3, [r7, #12]
}
 8003726:	0018      	movs	r0, r3
 8003728:	46bd      	mov	sp, r7
 800372a:	b004      	add	sp, #16
 800372c:	bd80      	pop	{r7, pc}

0800372e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003732:	f000 fab7 	bl	8003ca4 <vTaskStartScheduler>
  
  return osOK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	0018      	movs	r0, r3
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800373e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003740:	b089      	sub	sp, #36	; 0x24
 8003742:	af04      	add	r7, sp, #16
 8003744:	6078      	str	r0, [r7, #4]
 8003746:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d020      	beq.n	8003792 <osThreadCreate+0x54>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d01c      	beq.n	8003792 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685c      	ldr	r4, [r3, #4]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681d      	ldr	r5, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	691e      	ldr	r6, [r3, #16]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2208      	movs	r2, #8
 8003768:	5e9b      	ldrsh	r3, [r3, r2]
 800376a:	0018      	movs	r0, r3
 800376c:	f7ff ffc6 	bl	80036fc <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	695a      	ldr	r2, [r3, #20]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003778:	6839      	ldr	r1, [r7, #0]
 800377a:	9302      	str	r3, [sp, #8]
 800377c:	9201      	str	r2, [sp, #4]
 800377e:	9000      	str	r0, [sp, #0]
 8003780:	000b      	movs	r3, r1
 8003782:	0032      	movs	r2, r6
 8003784:	0029      	movs	r1, r5
 8003786:	0020      	movs	r0, r4
 8003788:	f000 f8e3 	bl	8003952 <xTaskCreateStatic>
 800378c:	0003      	movs	r3, r0
 800378e:	60fb      	str	r3, [r7, #12]
 8003790:	e01d      	b.n	80037ce <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685c      	ldr	r4, [r3, #4]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800379e:	b29e      	uxth	r6, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2208      	movs	r2, #8
 80037a4:	5e9b      	ldrsh	r3, [r3, r2]
 80037a6:	0018      	movs	r0, r3
 80037a8:	f7ff ffa8 	bl	80036fc <makeFreeRtosPriority>
 80037ac:	0001      	movs	r1, r0
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	230c      	movs	r3, #12
 80037b2:	18fb      	adds	r3, r7, r3
 80037b4:	9301      	str	r3, [sp, #4]
 80037b6:	9100      	str	r1, [sp, #0]
 80037b8:	0013      	movs	r3, r2
 80037ba:	0032      	movs	r2, r6
 80037bc:	0029      	movs	r1, r5
 80037be:	0020      	movs	r0, r4
 80037c0:	f000 f90a 	bl	80039d8 <xTaskCreate>
 80037c4:	0003      	movs	r3, r0
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d001      	beq.n	80037ce <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 80037ca:	2300      	movs	r3, #0
 80037cc:	e000      	b.n	80037d0 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80037ce:	68fb      	ldr	r3, [r7, #12]
}
 80037d0:	0018      	movs	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	b005      	add	sp, #20
 80037d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037d8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <osDelay+0x16>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	e000      	b.n	80037f0 <osDelay+0x18>
 80037ee:	2301      	movs	r3, #1
 80037f0:	0018      	movs	r0, r3
 80037f2:	f000 fa31 	bl	8003c58 <vTaskDelay>
  
  return osOK;
 80037f6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80037f8:	0018      	movs	r0, r3
 80037fa:	46bd      	mov	sp, r7
 80037fc:	b004      	add	sp, #16
 80037fe:	bd80      	pop	{r7, pc}

08003800 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	3308      	adds	r3, #8
 800380c:	001a      	movs	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	4252      	negs	r2, r2
 8003818:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	3308      	adds	r3, #8
 800381e:	001a      	movs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3308      	adds	r3, #8
 8003828:	001a      	movs	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003834:	46c0      	nop			; (mov r8, r8)
 8003836:	46bd      	mov	sp, r7
 8003838:	b002      	add	sp, #8
 800383a:	bd80      	pop	{r7, pc}

0800383c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800384a:	46c0      	nop			; (mov r8, r8)
 800384c:	46bd      	mov	sp, r7
 800384e:	b002      	add	sp, #8
 8003850:	bd80      	pop	{r7, pc}

08003852 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b084      	sub	sp, #16
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
 800385a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	1c5a      	adds	r2, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	601a      	str	r2, [r3, #0]
}
 800388e:	46c0      	nop			; (mov r8, r8)
 8003890:	46bd      	mov	sp, r7
 8003892:	b004      	add	sp, #16
 8003894:	bd80      	pop	{r7, pc}

08003896 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b084      	sub	sp, #16
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
 800389e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	3301      	adds	r3, #1
 80038aa:	d103      	bne.n	80038b4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	e00c      	b.n	80038ce <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	3308      	adds	r3, #8
 80038b8:	60fb      	str	r3, [r7, #12]
 80038ba:	e002      	b.n	80038c2 <vListInsert+0x2c>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	60fb      	str	r3, [r7, #12]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d2f6      	bcs.n	80038bc <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	1c5a      	adds	r2, r3, #1
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	601a      	str	r2, [r3, #0]
}
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	46bd      	mov	sp, r7
 80038fe:	b004      	add	sp, #16
 8003900:	bd80      	pop	{r7, pc}

08003902 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b084      	sub	sp, #16
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6892      	ldr	r2, [r2, #8]
 8003918:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6852      	ldr	r2, [r2, #4]
 8003922:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	429a      	cmp	r2, r3
 800392c:	d103      	bne.n	8003936 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	1e5a      	subs	r2, r3, #1
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
}
 800394a:	0018      	movs	r0, r3
 800394c:	46bd      	mov	sp, r7
 800394e:	b004      	add	sp, #16
 8003950:	bd80      	pop	{r7, pc}

08003952 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003952:	b590      	push	{r4, r7, lr}
 8003954:	b08d      	sub	sp, #52	; 0x34
 8003956:	af04      	add	r7, sp, #16
 8003958:	60f8      	str	r0, [r7, #12]
 800395a:	60b9      	str	r1, [r7, #8]
 800395c:	607a      	str	r2, [r7, #4]
 800395e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <xTaskCreateStatic+0x18>
 8003966:	b672      	cpsid	i
 8003968:	e7fe      	b.n	8003968 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800396a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <xTaskCreateStatic+0x22>
 8003970:	b672      	cpsid	i
 8003972:	e7fe      	b.n	8003972 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003974:	23b4      	movs	r3, #180	; 0xb4
 8003976:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	2bb4      	cmp	r3, #180	; 0xb4
 800397c:	d001      	beq.n	8003982 <xTaskCreateStatic+0x30>
 800397e:	b672      	cpsid	i
 8003980:	e7fe      	b.n	8003980 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003984:	2b00      	cmp	r3, #0
 8003986:	d020      	beq.n	80039ca <xTaskCreateStatic+0x78>
 8003988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800398a:	2b00      	cmp	r3, #0
 800398c:	d01d      	beq.n	80039ca <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800398e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003990:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003996:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	22b1      	movs	r2, #177	; 0xb1
 800399c:	2102      	movs	r1, #2
 800399e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80039a0:	683c      	ldr	r4, [r7, #0]
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	68b9      	ldr	r1, [r7, #8]
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	2300      	movs	r3, #0
 80039aa:	9303      	str	r3, [sp, #12]
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	9302      	str	r3, [sp, #8]
 80039b0:	2318      	movs	r3, #24
 80039b2:	18fb      	adds	r3, r7, r3
 80039b4:	9301      	str	r3, [sp, #4]
 80039b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	0023      	movs	r3, r4
 80039bc:	f000 f858 	bl	8003a70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	0018      	movs	r0, r3
 80039c4:	f000 f8e4 	bl	8003b90 <prvAddNewTaskToReadyList>
 80039c8:	e001      	b.n	80039ce <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 80039ca:	2300      	movs	r3, #0
 80039cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80039ce:	69bb      	ldr	r3, [r7, #24]
	}
 80039d0:	0018      	movs	r0, r3
 80039d2:	46bd      	mov	sp, r7
 80039d4:	b009      	add	sp, #36	; 0x24
 80039d6:	bd90      	pop	{r4, r7, pc}

080039d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80039d8:	b590      	push	{r4, r7, lr}
 80039da:	b08d      	sub	sp, #52	; 0x34
 80039dc:	af04      	add	r7, sp, #16
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	603b      	str	r3, [r7, #0]
 80039e4:	1dbb      	adds	r3, r7, #6
 80039e6:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039e8:	1dbb      	adds	r3, r7, #6
 80039ea:	881b      	ldrh	r3, [r3, #0]
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	0018      	movs	r0, r3
 80039f0:	f000 fdae 	bl	8004550 <pvPortMalloc>
 80039f4:	0003      	movs	r3, r0
 80039f6:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d010      	beq.n	8003a20 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80039fe:	20b4      	movs	r0, #180	; 0xb4
 8003a00:	f000 fda6 	bl	8004550 <pvPortMalloc>
 8003a04:	0003      	movs	r3, r0
 8003a06:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	631a      	str	r2, [r3, #48]	; 0x30
 8003a14:	e006      	b.n	8003a24 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f000 fe3f 	bl	800469c <vPortFree>
 8003a1e:	e001      	b.n	8003a24 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a20:	2300      	movs	r3, #0
 8003a22:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d01a      	beq.n	8003a60 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	22b1      	movs	r2, #177	; 0xb1
 8003a2e:	2100      	movs	r1, #0
 8003a30:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a32:	1dbb      	adds	r3, r7, #6
 8003a34:	881a      	ldrh	r2, [r3, #0]
 8003a36:	683c      	ldr	r4, [r7, #0]
 8003a38:	68b9      	ldr	r1, [r7, #8]
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	9303      	str	r3, [sp, #12]
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	9302      	str	r3, [sp, #8]
 8003a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a46:	9301      	str	r3, [sp, #4]
 8003a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	0023      	movs	r3, r4
 8003a4e:	f000 f80f 	bl	8003a70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	0018      	movs	r0, r3
 8003a56:	f000 f89b 	bl	8003b90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	61bb      	str	r3, [r7, #24]
 8003a5e:	e002      	b.n	8003a66 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a60:	2301      	movs	r3, #1
 8003a62:	425b      	negs	r3, r3
 8003a64:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a66:	69bb      	ldr	r3, [r7, #24]
	}
 8003a68:	0018      	movs	r0, r3
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	b009      	add	sp, #36	; 0x24
 8003a6e:	bd90      	pop	{r4, r7, pc}

08003a70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
 8003a7c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	493e      	ldr	r1, [pc, #248]	; (8003b80 <prvInitialiseNewTask+0x110>)
 8003a86:	468c      	mov	ip, r1
 8003a88:	4463      	add	r3, ip
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	18d3      	adds	r3, r2, r3
 8003a8e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	2207      	movs	r2, #7
 8003a94:	4393      	bics	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	2207      	movs	r2, #7
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	d001      	beq.n	8003aa4 <prvInitialiseNewTask+0x34>
 8003aa0:	b672      	cpsid	i
 8003aa2:	e7fe      	b.n	8003aa2 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	e013      	b.n	8003ad2 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	18d3      	adds	r3, r2, r3
 8003ab0:	7818      	ldrb	r0, [r3, #0]
 8003ab2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ab4:	2134      	movs	r1, #52	; 0x34
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	18d3      	adds	r3, r2, r3
 8003aba:	185b      	adds	r3, r3, r1
 8003abc:	1c02      	adds	r2, r0, #0
 8003abe:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	18d3      	adds	r3, r2, r3
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d006      	beq.n	8003ada <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	617b      	str	r3, [r7, #20]
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	2b0f      	cmp	r3, #15
 8003ad6:	d9e8      	bls.n	8003aaa <prvInitialiseNewTask+0x3a>
 8003ad8:	e000      	b.n	8003adc <prvInitialiseNewTask+0x6c>
		{
			break;
 8003ada:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ade:	2243      	movs	r2, #67	; 0x43
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003ae4:	6a3b      	ldr	r3, [r7, #32]
 8003ae6:	2b06      	cmp	r3, #6
 8003ae8:	d901      	bls.n	8003aee <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003aea:	2306      	movs	r3, #6
 8003aec:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af0:	6a3a      	ldr	r2, [r7, #32]
 8003af2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af6:	6a3a      	ldr	r2, [r7, #32]
 8003af8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afc:	2200      	movs	r2, #0
 8003afe:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b02:	3304      	adds	r3, #4
 8003b04:	0018      	movs	r0, r3
 8003b06:	f7ff fe99 	bl	800383c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0c:	3318      	adds	r3, #24
 8003b0e:	0018      	movs	r0, r3
 8003b10:	f7ff fe94 	bl	800383c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b18:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b1a:	6a3b      	ldr	r3, [r7, #32]
 8003b1c:	2207      	movs	r2, #7
 8003b1e:	1ad2      	subs	r2, r2, r3
 8003b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b22:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b28:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2c:	22ac      	movs	r2, #172	; 0xac
 8003b2e:	2100      	movs	r1, #0
 8003b30:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b34:	22b0      	movs	r2, #176	; 0xb0
 8003b36:	2100      	movs	r1, #0
 8003b38:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3c:	334c      	adds	r3, #76	; 0x4c
 8003b3e:	2260      	movs	r2, #96	; 0x60
 8003b40:	2100      	movs	r1, #0
 8003b42:	0018      	movs	r0, r3
 8003b44:	f000 fedf 	bl	8004906 <memset>
 8003b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4a:	4a0e      	ldr	r2, [pc, #56]	; (8003b84 <prvInitialiseNewTask+0x114>)
 8003b4c:	651a      	str	r2, [r3, #80]	; 0x50
 8003b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b50:	4a0d      	ldr	r2, [pc, #52]	; (8003b88 <prvInitialiseNewTask+0x118>)
 8003b52:	655a      	str	r2, [r3, #84]	; 0x54
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b56:	4a0d      	ldr	r2, [pc, #52]	; (8003b8c <prvInitialiseNewTask+0x11c>)
 8003b58:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	68f9      	ldr	r1, [r7, #12]
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	0018      	movs	r0, r3
 8003b62:	f000 fbc5 	bl	80042f0 <pxPortInitialiseStack>
 8003b66:	0002      	movs	r2, r0
 8003b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d002      	beq.n	8003b78 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b76:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b78:	46c0      	nop			; (mov r8, r8)
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	b006      	add	sp, #24
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	3fffffff 	.word	0x3fffffff
 8003b84:	08005450 	.word	0x08005450
 8003b88:	08005470 	.word	0x08005470
 8003b8c:	08005430 	.word	0x08005430

08003b90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b98:	f000 fc42 	bl	8004420 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b9c:	4b28      	ldr	r3, [pc, #160]	; (8003c40 <prvAddNewTaskToReadyList+0xb0>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	1c5a      	adds	r2, r3, #1
 8003ba2:	4b27      	ldr	r3, [pc, #156]	; (8003c40 <prvAddNewTaskToReadyList+0xb0>)
 8003ba4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003ba6:	4b27      	ldr	r3, [pc, #156]	; (8003c44 <prvAddNewTaskToReadyList+0xb4>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d109      	bne.n	8003bc2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003bae:	4b25      	ldr	r3, [pc, #148]	; (8003c44 <prvAddNewTaskToReadyList+0xb4>)
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003bb4:	4b22      	ldr	r3, [pc, #136]	; (8003c40 <prvAddNewTaskToReadyList+0xb0>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d110      	bne.n	8003bde <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003bbc:	f000 fa80 	bl	80040c0 <prvInitialiseTaskLists>
 8003bc0:	e00d      	b.n	8003bde <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003bc2:	4b21      	ldr	r3, [pc, #132]	; (8003c48 <prvAddNewTaskToReadyList+0xb8>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d109      	bne.n	8003bde <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003bca:	4b1e      	ldr	r3, [pc, #120]	; (8003c44 <prvAddNewTaskToReadyList+0xb4>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d802      	bhi.n	8003bde <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003bd8:	4b1a      	ldr	r3, [pc, #104]	; (8003c44 <prvAddNewTaskToReadyList+0xb4>)
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003bde:	4b1b      	ldr	r3, [pc, #108]	; (8003c4c <prvAddNewTaskToReadyList+0xbc>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	1c5a      	adds	r2, r3, #1
 8003be4:	4b19      	ldr	r3, [pc, #100]	; (8003c4c <prvAddNewTaskToReadyList+0xbc>)
 8003be6:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bec:	4b18      	ldr	r3, [pc, #96]	; (8003c50 <prvAddNewTaskToReadyList+0xc0>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d903      	bls.n	8003bfc <prvAddNewTaskToReadyList+0x6c>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf8:	4b15      	ldr	r3, [pc, #84]	; (8003c50 <prvAddNewTaskToReadyList+0xc0>)
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c00:	0013      	movs	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	189b      	adds	r3, r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4a12      	ldr	r2, [pc, #72]	; (8003c54 <prvAddNewTaskToReadyList+0xc4>)
 8003c0a:	189a      	adds	r2, r3, r2
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3304      	adds	r3, #4
 8003c10:	0019      	movs	r1, r3
 8003c12:	0010      	movs	r0, r2
 8003c14:	f7ff fe1d 	bl	8003852 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c18:	f000 fc14 	bl	8004444 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c1c:	4b0a      	ldr	r3, [pc, #40]	; (8003c48 <prvAddNewTaskToReadyList+0xb8>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d008      	beq.n	8003c36 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c24:	4b07      	ldr	r3, [pc, #28]	; (8003c44 <prvAddNewTaskToReadyList+0xb4>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d201      	bcs.n	8003c36 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c32:	f000 fbe5 	bl	8004400 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	b002      	add	sp, #8
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	46c0      	nop			; (mov r8, r8)
 8003c40:	2000055c 	.word	0x2000055c
 8003c44:	2000045c 	.word	0x2000045c
 8003c48:	20000568 	.word	0x20000568
 8003c4c:	20000578 	.word	0x20000578
 8003c50:	20000564 	.word	0x20000564
 8003c54:	20000460 	.word	0x20000460

08003c58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c60:	2300      	movs	r3, #0
 8003c62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d010      	beq.n	8003c8c <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c6a:	4b0d      	ldr	r3, [pc, #52]	; (8003ca0 <vTaskDelay+0x48>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <vTaskDelay+0x1e>
 8003c72:	b672      	cpsid	i
 8003c74:	e7fe      	b.n	8003c74 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8003c76:	f000 f86d 	bl	8003d54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	0018      	movs	r0, r3
 8003c80:	f000 fae2 	bl	8004248 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003c84:	f000 f872 	bl	8003d6c <xTaskResumeAll>
 8003c88:	0003      	movs	r3, r0
 8003c8a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8003c92:	f000 fbb5 	bl	8004400 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003c96:	46c0      	nop			; (mov r8, r8)
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	b004      	add	sp, #16
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	20000584 	.word	0x20000584

08003ca4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ca4:	b590      	push	{r4, r7, lr}
 8003ca6:	b089      	sub	sp, #36	; 0x24
 8003ca8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003caa:	2300      	movs	r3, #0
 8003cac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003cb2:	003a      	movs	r2, r7
 8003cb4:	1d39      	adds	r1, r7, #4
 8003cb6:	2308      	movs	r3, #8
 8003cb8:	18fb      	adds	r3, r7, r3
 8003cba:	0018      	movs	r0, r3
 8003cbc:	f7fc faba 	bl	8000234 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003cc0:	683c      	ldr	r4, [r7, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68ba      	ldr	r2, [r7, #8]
 8003cc6:	491b      	ldr	r1, [pc, #108]	; (8003d34 <vTaskStartScheduler+0x90>)
 8003cc8:	481b      	ldr	r0, [pc, #108]	; (8003d38 <vTaskStartScheduler+0x94>)
 8003cca:	9202      	str	r2, [sp, #8]
 8003ccc:	9301      	str	r3, [sp, #4]
 8003cce:	2300      	movs	r3, #0
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	0022      	movs	r2, r4
 8003cd6:	f7ff fe3c 	bl	8003952 <xTaskCreateStatic>
 8003cda:	0002      	movs	r2, r0
 8003cdc:	4b17      	ldr	r3, [pc, #92]	; (8003d3c <vTaskStartScheduler+0x98>)
 8003cde:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ce0:	4b16      	ldr	r3, [pc, #88]	; (8003d3c <vTaskStartScheduler+0x98>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d002      	beq.n	8003cee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	e001      	b.n	8003cf2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d113      	bne.n	8003d20 <vTaskStartScheduler+0x7c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8003cf8:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003cfa:	4b11      	ldr	r3, [pc, #68]	; (8003d40 <vTaskStartScheduler+0x9c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	334c      	adds	r3, #76	; 0x4c
 8003d00:	001a      	movs	r2, r3
 8003d02:	4b10      	ldr	r3, [pc, #64]	; (8003d44 <vTaskStartScheduler+0xa0>)
 8003d04:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d06:	4b10      	ldr	r3, [pc, #64]	; (8003d48 <vTaskStartScheduler+0xa4>)
 8003d08:	2201      	movs	r2, #1
 8003d0a:	4252      	negs	r2, r2
 8003d0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d0e:	4b0f      	ldr	r3, [pc, #60]	; (8003d4c <vTaskStartScheduler+0xa8>)
 8003d10:	2201      	movs	r2, #1
 8003d12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003d14:	4b0e      	ldr	r3, [pc, #56]	; (8003d50 <vTaskStartScheduler+0xac>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d1a:	f000 fb4d 	bl	80043b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d1e:	e004      	b.n	8003d2a <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	3301      	adds	r3, #1
 8003d24:	d101      	bne.n	8003d2a <vTaskStartScheduler+0x86>
 8003d26:	b672      	cpsid	i
 8003d28:	e7fe      	b.n	8003d28 <vTaskStartScheduler+0x84>
}
 8003d2a:	46c0      	nop			; (mov r8, r8)
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	b005      	add	sp, #20
 8003d30:	bd90      	pop	{r4, r7, pc}
 8003d32:	46c0      	nop			; (mov r8, r8)
 8003d34:	080053f0 	.word	0x080053f0
 8003d38:	080040a1 	.word	0x080040a1
 8003d3c:	20000580 	.word	0x20000580
 8003d40:	2000045c 	.word	0x2000045c
 8003d44:	20000010 	.word	0x20000010
 8003d48:	2000057c 	.word	0x2000057c
 8003d4c:	20000568 	.word	0x20000568
 8003d50:	20000560 	.word	0x20000560

08003d54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003d58:	4b03      	ldr	r3, [pc, #12]	; (8003d68 <vTaskSuspendAll+0x14>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	4b02      	ldr	r3, [pc, #8]	; (8003d68 <vTaskSuspendAll+0x14>)
 8003d60:	601a      	str	r2, [r3, #0]
}
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	20000584 	.word	0x20000584

08003d6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d72:	2300      	movs	r3, #0
 8003d74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d76:	2300      	movs	r3, #0
 8003d78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d7a:	4b3a      	ldr	r3, [pc, #232]	; (8003e64 <xTaskResumeAll+0xf8>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <xTaskResumeAll+0x1a>
 8003d82:	b672      	cpsid	i
 8003d84:	e7fe      	b.n	8003d84 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003d86:	f000 fb4b 	bl	8004420 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003d8a:	4b36      	ldr	r3, [pc, #216]	; (8003e64 <xTaskResumeAll+0xf8>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	1e5a      	subs	r2, r3, #1
 8003d90:	4b34      	ldr	r3, [pc, #208]	; (8003e64 <xTaskResumeAll+0xf8>)
 8003d92:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d94:	4b33      	ldr	r3, [pc, #204]	; (8003e64 <xTaskResumeAll+0xf8>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d15b      	bne.n	8003e54 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d9c:	4b32      	ldr	r3, [pc, #200]	; (8003e68 <xTaskResumeAll+0xfc>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d057      	beq.n	8003e54 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003da4:	e02f      	b.n	8003e06 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003da6:	4b31      	ldr	r3, [pc, #196]	; (8003e6c <xTaskResumeAll+0x100>)
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	3318      	adds	r3, #24
 8003db2:	0018      	movs	r0, r3
 8003db4:	f7ff fda5 	bl	8003902 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	3304      	adds	r3, #4
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	f7ff fda0 	bl	8003902 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc6:	4b2a      	ldr	r3, [pc, #168]	; (8003e70 <xTaskResumeAll+0x104>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d903      	bls.n	8003dd6 <xTaskResumeAll+0x6a>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd2:	4b27      	ldr	r3, [pc, #156]	; (8003e70 <xTaskResumeAll+0x104>)
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dda:	0013      	movs	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	189b      	adds	r3, r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	4a24      	ldr	r2, [pc, #144]	; (8003e74 <xTaskResumeAll+0x108>)
 8003de4:	189a      	adds	r2, r3, r2
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	3304      	adds	r3, #4
 8003dea:	0019      	movs	r1, r3
 8003dec:	0010      	movs	r0, r2
 8003dee:	f7ff fd30 	bl	8003852 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df6:	4b20      	ldr	r3, [pc, #128]	; (8003e78 <xTaskResumeAll+0x10c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d302      	bcc.n	8003e06 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8003e00:	4b1e      	ldr	r3, [pc, #120]	; (8003e7c <xTaskResumeAll+0x110>)
 8003e02:	2201      	movs	r2, #1
 8003e04:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e06:	4b19      	ldr	r3, [pc, #100]	; (8003e6c <xTaskResumeAll+0x100>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1cb      	bne.n	8003da6 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e14:	f000 f9f4 	bl	8004200 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003e18:	4b19      	ldr	r3, [pc, #100]	; (8003e80 <xTaskResumeAll+0x114>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00f      	beq.n	8003e44 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e24:	f000 f82e 	bl	8003e84 <xTaskIncrementTick>
 8003e28:	1e03      	subs	r3, r0, #0
 8003e2a:	d002      	beq.n	8003e32 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8003e2c:	4b13      	ldr	r3, [pc, #76]	; (8003e7c <xTaskResumeAll+0x110>)
 8003e2e:	2201      	movs	r2, #1
 8003e30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	3b01      	subs	r3, #1
 8003e36:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1f2      	bne.n	8003e24 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8003e3e:	4b10      	ldr	r3, [pc, #64]	; (8003e80 <xTaskResumeAll+0x114>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e44:	4b0d      	ldr	r3, [pc, #52]	; (8003e7c <xTaskResumeAll+0x110>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d003      	beq.n	8003e54 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e50:	f000 fad6 	bl	8004400 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e54:	f000 faf6 	bl	8004444 <vPortExitCritical>

	return xAlreadyYielded;
 8003e58:	68bb      	ldr	r3, [r7, #8]
}
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b004      	add	sp, #16
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	46c0      	nop			; (mov r8, r8)
 8003e64:	20000584 	.word	0x20000584
 8003e68:	2000055c 	.word	0x2000055c
 8003e6c:	2000051c 	.word	0x2000051c
 8003e70:	20000564 	.word	0x20000564
 8003e74:	20000460 	.word	0x20000460
 8003e78:	2000045c 	.word	0x2000045c
 8003e7c:	20000570 	.word	0x20000570
 8003e80:	2000056c 	.word	0x2000056c

08003e84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e8e:	4b4c      	ldr	r3, [pc, #304]	; (8003fc0 <xTaskIncrementTick+0x13c>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d000      	beq.n	8003e98 <xTaskIncrementTick+0x14>
 8003e96:	e083      	b.n	8003fa0 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e98:	4b4a      	ldr	r3, [pc, #296]	; (8003fc4 <xTaskIncrementTick+0x140>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003ea0:	4b48      	ldr	r3, [pc, #288]	; (8003fc4 <xTaskIncrementTick+0x140>)
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d117      	bne.n	8003edc <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8003eac:	4b46      	ldr	r3, [pc, #280]	; (8003fc8 <xTaskIncrementTick+0x144>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <xTaskIncrementTick+0x36>
 8003eb6:	b672      	cpsid	i
 8003eb8:	e7fe      	b.n	8003eb8 <xTaskIncrementTick+0x34>
 8003eba:	4b43      	ldr	r3, [pc, #268]	; (8003fc8 <xTaskIncrementTick+0x144>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	60fb      	str	r3, [r7, #12]
 8003ec0:	4b42      	ldr	r3, [pc, #264]	; (8003fcc <xTaskIncrementTick+0x148>)
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	4b40      	ldr	r3, [pc, #256]	; (8003fc8 <xTaskIncrementTick+0x144>)
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	4b40      	ldr	r3, [pc, #256]	; (8003fcc <xTaskIncrementTick+0x148>)
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	4b40      	ldr	r3, [pc, #256]	; (8003fd0 <xTaskIncrementTick+0x14c>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	1c5a      	adds	r2, r3, #1
 8003ed4:	4b3e      	ldr	r3, [pc, #248]	; (8003fd0 <xTaskIncrementTick+0x14c>)
 8003ed6:	601a      	str	r2, [r3, #0]
 8003ed8:	f000 f992 	bl	8004200 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003edc:	4b3d      	ldr	r3, [pc, #244]	; (8003fd4 <xTaskIncrementTick+0x150>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d34e      	bcc.n	8003f84 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ee6:	4b38      	ldr	r3, [pc, #224]	; (8003fc8 <xTaskIncrementTick+0x144>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d101      	bne.n	8003ef4 <xTaskIncrementTick+0x70>
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e000      	b.n	8003ef6 <xTaskIncrementTick+0x72>
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d004      	beq.n	8003f04 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003efa:	4b36      	ldr	r3, [pc, #216]	; (8003fd4 <xTaskIncrementTick+0x150>)
 8003efc:	2201      	movs	r2, #1
 8003efe:	4252      	negs	r2, r2
 8003f00:	601a      	str	r2, [r3, #0]
					break;
 8003f02:	e03f      	b.n	8003f84 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f04:	4b30      	ldr	r3, [pc, #192]	; (8003fc8 <xTaskIncrementTick+0x144>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d203      	bcs.n	8003f24 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f1c:	4b2d      	ldr	r3, [pc, #180]	; (8003fd4 <xTaskIncrementTick+0x150>)
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	601a      	str	r2, [r3, #0]
						break;
 8003f22:	e02f      	b.n	8003f84 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	3304      	adds	r3, #4
 8003f28:	0018      	movs	r0, r3
 8003f2a:	f7ff fcea 	bl	8003902 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d004      	beq.n	8003f40 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	3318      	adds	r3, #24
 8003f3a:	0018      	movs	r0, r3
 8003f3c:	f7ff fce1 	bl	8003902 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f44:	4b24      	ldr	r3, [pc, #144]	; (8003fd8 <xTaskIncrementTick+0x154>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d903      	bls.n	8003f54 <xTaskIncrementTick+0xd0>
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f50:	4b21      	ldr	r3, [pc, #132]	; (8003fd8 <xTaskIncrementTick+0x154>)
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f58:	0013      	movs	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	189b      	adds	r3, r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4a1e      	ldr	r2, [pc, #120]	; (8003fdc <xTaskIncrementTick+0x158>)
 8003f62:	189a      	adds	r2, r3, r2
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	3304      	adds	r3, #4
 8003f68:	0019      	movs	r1, r3
 8003f6a:	0010      	movs	r0, r2
 8003f6c:	f7ff fc71 	bl	8003852 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f74:	4b1a      	ldr	r3, [pc, #104]	; (8003fe0 <xTaskIncrementTick+0x15c>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d3b3      	bcc.n	8003ee6 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f82:	e7b0      	b.n	8003ee6 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f84:	4b16      	ldr	r3, [pc, #88]	; (8003fe0 <xTaskIncrementTick+0x15c>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f8a:	4914      	ldr	r1, [pc, #80]	; (8003fdc <xTaskIncrementTick+0x158>)
 8003f8c:	0013      	movs	r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	189b      	adds	r3, r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	585b      	ldr	r3, [r3, r1]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d907      	bls.n	8003faa <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	617b      	str	r3, [r7, #20]
 8003f9e:	e004      	b.n	8003faa <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003fa0:	4b10      	ldr	r3, [pc, #64]	; (8003fe4 <xTaskIncrementTick+0x160>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	1c5a      	adds	r2, r3, #1
 8003fa6:	4b0f      	ldr	r3, [pc, #60]	; (8003fe4 <xTaskIncrementTick+0x160>)
 8003fa8:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003faa:	4b0f      	ldr	r3, [pc, #60]	; (8003fe8 <xTaskIncrementTick+0x164>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003fb6:	697b      	ldr	r3, [r7, #20]
}
 8003fb8:	0018      	movs	r0, r3
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	b006      	add	sp, #24
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	20000584 	.word	0x20000584
 8003fc4:	20000560 	.word	0x20000560
 8003fc8:	20000514 	.word	0x20000514
 8003fcc:	20000518 	.word	0x20000518
 8003fd0:	20000574 	.word	0x20000574
 8003fd4:	2000057c 	.word	0x2000057c
 8003fd8:	20000564 	.word	0x20000564
 8003fdc:	20000460 	.word	0x20000460
 8003fe0:	2000045c 	.word	0x2000045c
 8003fe4:	2000056c 	.word	0x2000056c
 8003fe8:	20000570 	.word	0x20000570

08003fec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ff2:	4b25      	ldr	r3, [pc, #148]	; (8004088 <vTaskSwitchContext+0x9c>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ffa:	4b24      	ldr	r3, [pc, #144]	; (800408c <vTaskSwitchContext+0xa0>)
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004000:	e03d      	b.n	800407e <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 8004002:	4b22      	ldr	r3, [pc, #136]	; (800408c <vTaskSwitchContext+0xa0>)
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004008:	4b21      	ldr	r3, [pc, #132]	; (8004090 <vTaskSwitchContext+0xa4>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	607b      	str	r3, [r7, #4]
 800400e:	e007      	b.n	8004020 <vTaskSwitchContext+0x34>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <vTaskSwitchContext+0x2e>
 8004016:	b672      	cpsid	i
 8004018:	e7fe      	b.n	8004018 <vTaskSwitchContext+0x2c>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	3b01      	subs	r3, #1
 800401e:	607b      	str	r3, [r7, #4]
 8004020:	491c      	ldr	r1, [pc, #112]	; (8004094 <vTaskSwitchContext+0xa8>)
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	0013      	movs	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	189b      	adds	r3, r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	585b      	ldr	r3, [r3, r1]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0ee      	beq.n	8004010 <vTaskSwitchContext+0x24>
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	0013      	movs	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	189b      	adds	r3, r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4a15      	ldr	r2, [pc, #84]	; (8004094 <vTaskSwitchContext+0xa8>)
 800403e:	189b      	adds	r3, r3, r2
 8004040:	603b      	str	r3, [r7, #0]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	605a      	str	r2, [r3, #4]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	3308      	adds	r3, #8
 8004054:	429a      	cmp	r2, r3
 8004056:	d104      	bne.n	8004062 <vTaskSwitchContext+0x76>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	605a      	str	r2, [r3, #4]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	68da      	ldr	r2, [r3, #12]
 8004068:	4b0b      	ldr	r3, [pc, #44]	; (8004098 <vTaskSwitchContext+0xac>)
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	4b08      	ldr	r3, [pc, #32]	; (8004090 <vTaskSwitchContext+0xa4>)
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004072:	4b09      	ldr	r3, [pc, #36]	; (8004098 <vTaskSwitchContext+0xac>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	334c      	adds	r3, #76	; 0x4c
 8004078:	001a      	movs	r2, r3
 800407a:	4b08      	ldr	r3, [pc, #32]	; (800409c <vTaskSwitchContext+0xb0>)
 800407c:	601a      	str	r2, [r3, #0]
}
 800407e:	46c0      	nop			; (mov r8, r8)
 8004080:	46bd      	mov	sp, r7
 8004082:	b002      	add	sp, #8
 8004084:	bd80      	pop	{r7, pc}
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	20000584 	.word	0x20000584
 800408c:	20000570 	.word	0x20000570
 8004090:	20000564 	.word	0x20000564
 8004094:	20000460 	.word	0x20000460
 8004098:	2000045c 	.word	0x2000045c
 800409c:	20000010 	.word	0x20000010

080040a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80040a8:	f000 f84e 	bl	8004148 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80040ac:	4b03      	ldr	r3, [pc, #12]	; (80040bc <prvIdleTask+0x1c>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d9f9      	bls.n	80040a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80040b4:	f000 f9a4 	bl	8004400 <vPortYield>
		prvCheckTasksWaitingTermination();
 80040b8:	e7f6      	b.n	80040a8 <prvIdleTask+0x8>
 80040ba:	46c0      	nop			; (mov r8, r8)
 80040bc:	20000460 	.word	0x20000460

080040c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040c6:	2300      	movs	r3, #0
 80040c8:	607b      	str	r3, [r7, #4]
 80040ca:	e00c      	b.n	80040e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	0013      	movs	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	189b      	adds	r3, r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4a14      	ldr	r2, [pc, #80]	; (8004128 <prvInitialiseTaskLists+0x68>)
 80040d8:	189b      	adds	r3, r3, r2
 80040da:	0018      	movs	r0, r3
 80040dc:	f7ff fb90 	bl	8003800 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3301      	adds	r3, #1
 80040e4:	607b      	str	r3, [r7, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b06      	cmp	r3, #6
 80040ea:	d9ef      	bls.n	80040cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80040ec:	4b0f      	ldr	r3, [pc, #60]	; (800412c <prvInitialiseTaskLists+0x6c>)
 80040ee:	0018      	movs	r0, r3
 80040f0:	f7ff fb86 	bl	8003800 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80040f4:	4b0e      	ldr	r3, [pc, #56]	; (8004130 <prvInitialiseTaskLists+0x70>)
 80040f6:	0018      	movs	r0, r3
 80040f8:	f7ff fb82 	bl	8003800 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80040fc:	4b0d      	ldr	r3, [pc, #52]	; (8004134 <prvInitialiseTaskLists+0x74>)
 80040fe:	0018      	movs	r0, r3
 8004100:	f7ff fb7e 	bl	8003800 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004104:	4b0c      	ldr	r3, [pc, #48]	; (8004138 <prvInitialiseTaskLists+0x78>)
 8004106:	0018      	movs	r0, r3
 8004108:	f7ff fb7a 	bl	8003800 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800410c:	4b0b      	ldr	r3, [pc, #44]	; (800413c <prvInitialiseTaskLists+0x7c>)
 800410e:	0018      	movs	r0, r3
 8004110:	f7ff fb76 	bl	8003800 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004114:	4b0a      	ldr	r3, [pc, #40]	; (8004140 <prvInitialiseTaskLists+0x80>)
 8004116:	4a05      	ldr	r2, [pc, #20]	; (800412c <prvInitialiseTaskLists+0x6c>)
 8004118:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800411a:	4b0a      	ldr	r3, [pc, #40]	; (8004144 <prvInitialiseTaskLists+0x84>)
 800411c:	4a04      	ldr	r2, [pc, #16]	; (8004130 <prvInitialiseTaskLists+0x70>)
 800411e:	601a      	str	r2, [r3, #0]
}
 8004120:	46c0      	nop			; (mov r8, r8)
 8004122:	46bd      	mov	sp, r7
 8004124:	b002      	add	sp, #8
 8004126:	bd80      	pop	{r7, pc}
 8004128:	20000460 	.word	0x20000460
 800412c:	200004ec 	.word	0x200004ec
 8004130:	20000500 	.word	0x20000500
 8004134:	2000051c 	.word	0x2000051c
 8004138:	20000530 	.word	0x20000530
 800413c:	20000548 	.word	0x20000548
 8004140:	20000514 	.word	0x20000514
 8004144:	20000518 	.word	0x20000518

08004148 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800414e:	e01a      	b.n	8004186 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8004150:	f000 f966 	bl	8004420 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004154:	4b10      	ldr	r3, [pc, #64]	; (8004198 <prvCheckTasksWaitingTermination+0x50>)
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3304      	adds	r3, #4
 8004160:	0018      	movs	r0, r3
 8004162:	f7ff fbce 	bl	8003902 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004166:	4b0d      	ldr	r3, [pc, #52]	; (800419c <prvCheckTasksWaitingTermination+0x54>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	1e5a      	subs	r2, r3, #1
 800416c:	4b0b      	ldr	r3, [pc, #44]	; (800419c <prvCheckTasksWaitingTermination+0x54>)
 800416e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004170:	4b0b      	ldr	r3, [pc, #44]	; (80041a0 <prvCheckTasksWaitingTermination+0x58>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	1e5a      	subs	r2, r3, #1
 8004176:	4b0a      	ldr	r3, [pc, #40]	; (80041a0 <prvCheckTasksWaitingTermination+0x58>)
 8004178:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800417a:	f000 f963 	bl	8004444 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	0018      	movs	r0, r3
 8004182:	f000 f80f 	bl	80041a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004186:	4b06      	ldr	r3, [pc, #24]	; (80041a0 <prvCheckTasksWaitingTermination+0x58>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1e0      	bne.n	8004150 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800418e:	46c0      	nop			; (mov r8, r8)
 8004190:	46c0      	nop			; (mov r8, r8)
 8004192:	46bd      	mov	sp, r7
 8004194:	b002      	add	sp, #8
 8004196:	bd80      	pop	{r7, pc}
 8004198:	20000530 	.word	0x20000530
 800419c:	2000055c 	.word	0x2000055c
 80041a0:	20000544 	.word	0x20000544

080041a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	334c      	adds	r3, #76	; 0x4c
 80041b0:	0018      	movs	r0, r3
 80041b2:	f000 fc57 	bl	8004a64 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	22b1      	movs	r2, #177	; 0xb1
 80041ba:	5c9b      	ldrb	r3, [r3, r2]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d109      	bne.n	80041d4 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c4:	0018      	movs	r0, r3
 80041c6:	f000 fa69 	bl	800469c <vPortFree>
				vPortFree( pxTCB );
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	0018      	movs	r0, r3
 80041ce:	f000 fa65 	bl	800469c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80041d2:	e010      	b.n	80041f6 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	22b1      	movs	r2, #177	; 0xb1
 80041d8:	5c9b      	ldrb	r3, [r3, r2]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d104      	bne.n	80041e8 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	0018      	movs	r0, r3
 80041e2:	f000 fa5b 	bl	800469c <vPortFree>
	}
 80041e6:	e006      	b.n	80041f6 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	22b1      	movs	r2, #177	; 0xb1
 80041ec:	5c9b      	ldrb	r3, [r3, r2]
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d001      	beq.n	80041f6 <prvDeleteTCB+0x52>
 80041f2:	b672      	cpsid	i
 80041f4:	e7fe      	b.n	80041f4 <prvDeleteTCB+0x50>
	}
 80041f6:	46c0      	nop			; (mov r8, r8)
 80041f8:	46bd      	mov	sp, r7
 80041fa:	b002      	add	sp, #8
 80041fc:	bd80      	pop	{r7, pc}
	...

08004200 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004206:	4b0e      	ldr	r3, [pc, #56]	; (8004240 <prvResetNextTaskUnblockTime+0x40>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <prvResetNextTaskUnblockTime+0x14>
 8004210:	2301      	movs	r3, #1
 8004212:	e000      	b.n	8004216 <prvResetNextTaskUnblockTime+0x16>
 8004214:	2300      	movs	r3, #0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d004      	beq.n	8004224 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800421a:	4b0a      	ldr	r3, [pc, #40]	; (8004244 <prvResetNextTaskUnblockTime+0x44>)
 800421c:	2201      	movs	r2, #1
 800421e:	4252      	negs	r2, r2
 8004220:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004222:	e008      	b.n	8004236 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004224:	4b06      	ldr	r3, [pc, #24]	; (8004240 <prvResetNextTaskUnblockTime+0x40>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	4b04      	ldr	r3, [pc, #16]	; (8004244 <prvResetNextTaskUnblockTime+0x44>)
 8004234:	601a      	str	r2, [r3, #0]
}
 8004236:	46c0      	nop			; (mov r8, r8)
 8004238:	46bd      	mov	sp, r7
 800423a:	b002      	add	sp, #8
 800423c:	bd80      	pop	{r7, pc}
 800423e:	46c0      	nop			; (mov r8, r8)
 8004240:	20000514 	.word	0x20000514
 8004244:	2000057c 	.word	0x2000057c

08004248 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004252:	4b21      	ldr	r3, [pc, #132]	; (80042d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004258:	4b20      	ldr	r3, [pc, #128]	; (80042dc <prvAddCurrentTaskToDelayedList+0x94>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	3304      	adds	r3, #4
 800425e:	0018      	movs	r0, r3
 8004260:	f7ff fb4f 	bl	8003902 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	3301      	adds	r3, #1
 8004268:	d10b      	bne.n	8004282 <prvAddCurrentTaskToDelayedList+0x3a>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d008      	beq.n	8004282 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004270:	4b1a      	ldr	r3, [pc, #104]	; (80042dc <prvAddCurrentTaskToDelayedList+0x94>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	1d1a      	adds	r2, r3, #4
 8004276:	4b1a      	ldr	r3, [pc, #104]	; (80042e0 <prvAddCurrentTaskToDelayedList+0x98>)
 8004278:	0011      	movs	r1, r2
 800427a:	0018      	movs	r0, r3
 800427c:	f7ff fae9 	bl	8003852 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004280:	e026      	b.n	80042d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	18d3      	adds	r3, r2, r3
 8004288:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800428a:	4b14      	ldr	r3, [pc, #80]	; (80042dc <prvAddCurrentTaskToDelayedList+0x94>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	429a      	cmp	r2, r3
 8004298:	d209      	bcs.n	80042ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800429a:	4b12      	ldr	r3, [pc, #72]	; (80042e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	4b0f      	ldr	r3, [pc, #60]	; (80042dc <prvAddCurrentTaskToDelayedList+0x94>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	3304      	adds	r3, #4
 80042a4:	0019      	movs	r1, r3
 80042a6:	0010      	movs	r0, r2
 80042a8:	f7ff faf5 	bl	8003896 <vListInsert>
}
 80042ac:	e010      	b.n	80042d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042ae:	4b0e      	ldr	r3, [pc, #56]	; (80042e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	4b0a      	ldr	r3, [pc, #40]	; (80042dc <prvAddCurrentTaskToDelayedList+0x94>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	3304      	adds	r3, #4
 80042b8:	0019      	movs	r1, r3
 80042ba:	0010      	movs	r0, r2
 80042bc:	f7ff faeb 	bl	8003896 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80042c0:	4b0a      	ldr	r3, [pc, #40]	; (80042ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d202      	bcs.n	80042d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80042ca:	4b08      	ldr	r3, [pc, #32]	; (80042ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	601a      	str	r2, [r3, #0]
}
 80042d0:	46c0      	nop			; (mov r8, r8)
 80042d2:	46bd      	mov	sp, r7
 80042d4:	b004      	add	sp, #16
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	20000560 	.word	0x20000560
 80042dc:	2000045c 	.word	0x2000045c
 80042e0:	20000548 	.word	0x20000548
 80042e4:	20000518 	.word	0x20000518
 80042e8:	20000514 	.word	0x20000514
 80042ec:	2000057c 	.word	0x2000057c

080042f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	3b04      	subs	r3, #4
 8004300:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2280      	movs	r2, #128	; 0x80
 8004306:	0452      	lsls	r2, r2, #17
 8004308:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	3b04      	subs	r3, #4
 800430e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8004310:	68ba      	ldr	r2, [r7, #8]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	3b04      	subs	r3, #4
 800431a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800431c:	4a08      	ldr	r2, [pc, #32]	; (8004340 <pxPortInitialiseStack+0x50>)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	3b14      	subs	r3, #20
 8004326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	3b20      	subs	r3, #32
 8004332:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004334:	68fb      	ldr	r3, [r7, #12]
}
 8004336:	0018      	movs	r0, r3
 8004338:	46bd      	mov	sp, r7
 800433a:	b004      	add	sp, #16
 800433c:	bd80      	pop	{r7, pc}
 800433e:	46c0      	nop			; (mov r8, r8)
 8004340:	08004345 	.word	0x08004345

08004344 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800434a:	2300      	movs	r3, #0
 800434c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800434e:	4b08      	ldr	r3, [pc, #32]	; (8004370 <prvTaskExitError+0x2c>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	3301      	adds	r3, #1
 8004354:	d001      	beq.n	800435a <prvTaskExitError+0x16>
 8004356:	b672      	cpsid	i
 8004358:	e7fe      	b.n	8004358 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800435a:	b672      	cpsid	i
	while( ulDummy == 0 )
 800435c:	46c0      	nop			; (mov r8, r8)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d0fc      	beq.n	800435e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004364:	46c0      	nop			; (mov r8, r8)
 8004366:	46c0      	nop			; (mov r8, r8)
 8004368:	46bd      	mov	sp, r7
 800436a:	b002      	add	sp, #8
 800436c:	bd80      	pop	{r7, pc}
 800436e:	46c0      	nop			; (mov r8, r8)
 8004370:	2000000c 	.word	0x2000000c

08004374 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8004378:	46c0      	nop			; (mov r8, r8)
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
	...

08004380 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8004380:	4a0b      	ldr	r2, [pc, #44]	; (80043b0 <pxCurrentTCBConst2>)
 8004382:	6813      	ldr	r3, [r2, #0]
 8004384:	6818      	ldr	r0, [r3, #0]
 8004386:	3020      	adds	r0, #32
 8004388:	f380 8809 	msr	PSP, r0
 800438c:	2002      	movs	r0, #2
 800438e:	f380 8814 	msr	CONTROL, r0
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8004398:	46ae      	mov	lr, r5
 800439a:	bc08      	pop	{r3}
 800439c:	bc04      	pop	{r2}
 800439e:	b662      	cpsie	i
 80043a0:	4718      	bx	r3
 80043a2:	46c0      	nop			; (mov r8, r8)
 80043a4:	46c0      	nop			; (mov r8, r8)
 80043a6:	46c0      	nop			; (mov r8, r8)
 80043a8:	46c0      	nop			; (mov r8, r8)
 80043aa:	46c0      	nop			; (mov r8, r8)
 80043ac:	46c0      	nop			; (mov r8, r8)
 80043ae:	46c0      	nop			; (mov r8, r8)

080043b0 <pxCurrentTCBConst2>:
 80043b0:	2000045c 	.word	0x2000045c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80043b4:	46c0      	nop			; (mov r8, r8)
 80043b6:	46c0      	nop			; (mov r8, r8)

080043b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80043bc:	4b0e      	ldr	r3, [pc, #56]	; (80043f8 <xPortStartScheduler+0x40>)
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	4b0d      	ldr	r3, [pc, #52]	; (80043f8 <xPortStartScheduler+0x40>)
 80043c2:	21ff      	movs	r1, #255	; 0xff
 80043c4:	0409      	lsls	r1, r1, #16
 80043c6:	430a      	orrs	r2, r1
 80043c8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80043ca:	4b0b      	ldr	r3, [pc, #44]	; (80043f8 <xPortStartScheduler+0x40>)
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	4b0a      	ldr	r3, [pc, #40]	; (80043f8 <xPortStartScheduler+0x40>)
 80043d0:	21ff      	movs	r1, #255	; 0xff
 80043d2:	0609      	lsls	r1, r1, #24
 80043d4:	430a      	orrs	r2, r1
 80043d6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80043d8:	f000 f898 	bl	800450c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80043dc:	4b07      	ldr	r3, [pc, #28]	; (80043fc <xPortStartScheduler+0x44>)
 80043de:	2200      	movs	r2, #0
 80043e0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80043e2:	f7ff ffcd 	bl	8004380 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80043e6:	f7ff fe01 	bl	8003fec <vTaskSwitchContext>
	prvTaskExitError();
 80043ea:	f7ff ffab 	bl	8004344 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	0018      	movs	r0, r3
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	46c0      	nop			; (mov r8, r8)
 80043f8:	e000ed20 	.word	0xe000ed20
 80043fc:	2000000c 	.word	0x2000000c

08004400 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8004404:	4b05      	ldr	r3, [pc, #20]	; (800441c <vPortYield+0x1c>)
 8004406:	2280      	movs	r2, #128	; 0x80
 8004408:	0552      	lsls	r2, r2, #21
 800440a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800440c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004410:	f3bf 8f6f 	isb	sy
}
 8004414:	46c0      	nop			; (mov r8, r8)
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	46c0      	nop			; (mov r8, r8)
 800441c:	e000ed04 	.word	0xe000ed04

08004420 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8004424:	b672      	cpsid	i
    uxCriticalNesting++;
 8004426:	4b06      	ldr	r3, [pc, #24]	; (8004440 <vPortEnterCritical+0x20>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	1c5a      	adds	r2, r3, #1
 800442c:	4b04      	ldr	r3, [pc, #16]	; (8004440 <vPortEnterCritical+0x20>)
 800442e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8004430:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004434:	f3bf 8f6f 	isb	sy
}
 8004438:	46c0      	nop			; (mov r8, r8)
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	2000000c 	.word	0x2000000c

08004444 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004448:	4b09      	ldr	r3, [pc, #36]	; (8004470 <vPortExitCritical+0x2c>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <vPortExitCritical+0x10>
 8004450:	b672      	cpsid	i
 8004452:	e7fe      	b.n	8004452 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8004454:	4b06      	ldr	r3, [pc, #24]	; (8004470 <vPortExitCritical+0x2c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	1e5a      	subs	r2, r3, #1
 800445a:	4b05      	ldr	r3, [pc, #20]	; (8004470 <vPortExitCritical+0x2c>)
 800445c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800445e:	4b04      	ldr	r3, [pc, #16]	; (8004470 <vPortExitCritical+0x2c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d100      	bne.n	8004468 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8004466:	b662      	cpsie	i
    }
}
 8004468:	46c0      	nop			; (mov r8, r8)
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	46c0      	nop			; (mov r8, r8)
 8004470:	2000000c 	.word	0x2000000c

08004474 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8004474:	f3ef 8010 	mrs	r0, PRIMASK
 8004478:	b672      	cpsid	i
 800447a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800447c:	46c0      	nop			; (mov r8, r8)
 800447e:	0018      	movs	r0, r3

08004480 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8004480:	f380 8810 	msr	PRIMASK, r0
 8004484:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8004486:	46c0      	nop			; (mov r8, r8)
	...

08004490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004490:	f3ef 8009 	mrs	r0, PSP
 8004494:	4b0e      	ldr	r3, [pc, #56]	; (80044d0 <pxCurrentTCBConst>)
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	3820      	subs	r0, #32
 800449a:	6010      	str	r0, [r2, #0]
 800449c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800449e:	4644      	mov	r4, r8
 80044a0:	464d      	mov	r5, r9
 80044a2:	4656      	mov	r6, sl
 80044a4:	465f      	mov	r7, fp
 80044a6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80044a8:	b508      	push	{r3, lr}
 80044aa:	b672      	cpsid	i
 80044ac:	f7ff fd9e 	bl	8003fec <vTaskSwitchContext>
 80044b0:	b662      	cpsie	i
 80044b2:	bc0c      	pop	{r2, r3}
 80044b4:	6811      	ldr	r1, [r2, #0]
 80044b6:	6808      	ldr	r0, [r1, #0]
 80044b8:	3010      	adds	r0, #16
 80044ba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80044bc:	46a0      	mov	r8, r4
 80044be:	46a9      	mov	r9, r5
 80044c0:	46b2      	mov	sl, r6
 80044c2:	46bb      	mov	fp, r7
 80044c4:	f380 8809 	msr	PSP, r0
 80044c8:	3820      	subs	r0, #32
 80044ca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80044cc:	4718      	bx	r3
 80044ce:	46c0      	nop			; (mov r8, r8)

080044d0 <pxCurrentTCBConst>:
 80044d0:	2000045c 	.word	0x2000045c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80044d4:	46c0      	nop			; (mov r8, r8)
 80044d6:	46c0      	nop			; (mov r8, r8)

080044d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80044de:	f7ff ffc9 	bl	8004474 <ulSetInterruptMaskFromISR>
 80044e2:	0003      	movs	r3, r0
 80044e4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80044e6:	f7ff fccd 	bl	8003e84 <xTaskIncrementTick>
 80044ea:	1e03      	subs	r3, r0, #0
 80044ec:	d003      	beq.n	80044f6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80044ee:	4b06      	ldr	r3, [pc, #24]	; (8004508 <SysTick_Handler+0x30>)
 80044f0:	2280      	movs	r2, #128	; 0x80
 80044f2:	0552      	lsls	r2, r2, #21
 80044f4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	0018      	movs	r0, r3
 80044fa:	f7ff ffc1 	bl	8004480 <vClearInterruptMaskFromISR>
}
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	46bd      	mov	sp, r7
 8004502:	b002      	add	sp, #8
 8004504:	bd80      	pop	{r7, pc}
 8004506:	46c0      	nop			; (mov r8, r8)
 8004508:	e000ed04 	.word	0xe000ed04

0800450c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8004510:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <prvSetupTimerInterrupt+0x34>)
 8004512:	2200      	movs	r2, #0
 8004514:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8004516:	4b0b      	ldr	r3, [pc, #44]	; (8004544 <prvSetupTimerInterrupt+0x38>)
 8004518:	2200      	movs	r2, #0
 800451a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800451c:	4b0a      	ldr	r3, [pc, #40]	; (8004548 <prvSetupTimerInterrupt+0x3c>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	22fa      	movs	r2, #250	; 0xfa
 8004522:	0091      	lsls	r1, r2, #2
 8004524:	0018      	movs	r0, r3
 8004526:	f7fb fdf9 	bl	800011c <__udivsi3>
 800452a:	0003      	movs	r3, r0
 800452c:	001a      	movs	r2, r3
 800452e:	4b07      	ldr	r3, [pc, #28]	; (800454c <prvSetupTimerInterrupt+0x40>)
 8004530:	3a01      	subs	r2, #1
 8004532:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8004534:	4b02      	ldr	r3, [pc, #8]	; (8004540 <prvSetupTimerInterrupt+0x34>)
 8004536:	2207      	movs	r2, #7
 8004538:	601a      	str	r2, [r3, #0]
}
 800453a:	46c0      	nop			; (mov r8, r8)
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	e000e010 	.word	0xe000e010
 8004544:	e000e018 	.word	0xe000e018
 8004548:	20000000 	.word	0x20000000
 800454c:	e000e014 	.word	0xe000e014

08004550 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004558:	2300      	movs	r3, #0
 800455a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800455c:	f7ff fbfa 	bl	8003d54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004560:	4b49      	ldr	r3, [pc, #292]	; (8004688 <pvPortMalloc+0x138>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004568:	f000 f8e0 	bl	800472c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800456c:	4b47      	ldr	r3, [pc, #284]	; (800468c <pvPortMalloc+0x13c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	4013      	ands	r3, r2
 8004574:	d000      	beq.n	8004578 <pvPortMalloc+0x28>
 8004576:	e079      	b.n	800466c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d012      	beq.n	80045a4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800457e:	2208      	movs	r2, #8
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	189b      	adds	r3, r3, r2
 8004584:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2207      	movs	r2, #7
 800458a:	4013      	ands	r3, r2
 800458c:	d00a      	beq.n	80045a4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2207      	movs	r2, #7
 8004592:	4393      	bics	r3, r2
 8004594:	3308      	adds	r3, #8
 8004596:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2207      	movs	r2, #7
 800459c:	4013      	ands	r3, r2
 800459e:	d001      	beq.n	80045a4 <pvPortMalloc+0x54>
 80045a0:	b672      	cpsid	i
 80045a2:	e7fe      	b.n	80045a2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d060      	beq.n	800466c <pvPortMalloc+0x11c>
 80045aa:	4b39      	ldr	r3, [pc, #228]	; (8004690 <pvPortMalloc+0x140>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d85b      	bhi.n	800466c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80045b4:	4b37      	ldr	r3, [pc, #220]	; (8004694 <pvPortMalloc+0x144>)
 80045b6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80045b8:	4b36      	ldr	r3, [pc, #216]	; (8004694 <pvPortMalloc+0x144>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045be:	e004      	b.n	80045ca <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d903      	bls.n	80045dc <pvPortMalloc+0x8c>
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1f1      	bne.n	80045c0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80045dc:	4b2a      	ldr	r3, [pc, #168]	; (8004688 <pvPortMalloc+0x138>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d042      	beq.n	800466c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2208      	movs	r2, #8
 80045ec:	189b      	adds	r3, r3, r2
 80045ee:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	685a      	ldr	r2, [r3, #4]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	1ad2      	subs	r2, r2, r3
 8004600:	2308      	movs	r3, #8
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	429a      	cmp	r2, r3
 8004606:	d916      	bls.n	8004636 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	18d3      	adds	r3, r2, r3
 800460e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	2207      	movs	r2, #7
 8004614:	4013      	ands	r3, r2
 8004616:	d001      	beq.n	800461c <pvPortMalloc+0xcc>
 8004618:	b672      	cpsid	i
 800461a:	e7fe      	b.n	800461a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	1ad2      	subs	r2, r2, r3
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	0018      	movs	r0, r3
 8004632:	f000 f8db 	bl	80047ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004636:	4b16      	ldr	r3, [pc, #88]	; (8004690 <pvPortMalloc+0x140>)
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	1ad2      	subs	r2, r2, r3
 8004640:	4b13      	ldr	r3, [pc, #76]	; (8004690 <pvPortMalloc+0x140>)
 8004642:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004644:	4b12      	ldr	r3, [pc, #72]	; (8004690 <pvPortMalloc+0x140>)
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	4b13      	ldr	r3, [pc, #76]	; (8004698 <pvPortMalloc+0x148>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	429a      	cmp	r2, r3
 800464e:	d203      	bcs.n	8004658 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004650:	4b0f      	ldr	r3, [pc, #60]	; (8004690 <pvPortMalloc+0x140>)
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	4b10      	ldr	r3, [pc, #64]	; (8004698 <pvPortMalloc+0x148>)
 8004656:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	4b0b      	ldr	r3, [pc, #44]	; (800468c <pvPortMalloc+0x13c>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	431a      	orrs	r2, r3
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800466c:	f7ff fb7e 	bl	8003d6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2207      	movs	r2, #7
 8004674:	4013      	ands	r3, r2
 8004676:	d001      	beq.n	800467c <pvPortMalloc+0x12c>
 8004678:	b672      	cpsid	i
 800467a:	e7fe      	b.n	800467a <pvPortMalloc+0x12a>
	return pvReturn;
 800467c:	68fb      	ldr	r3, [r7, #12]
}
 800467e:	0018      	movs	r0, r3
 8004680:	46bd      	mov	sp, r7
 8004682:	b006      	add	sp, #24
 8004684:	bd80      	pop	{r7, pc}
 8004686:	46c0      	nop			; (mov r8, r8)
 8004688:	20001190 	.word	0x20001190
 800468c:	2000119c 	.word	0x2000119c
 8004690:	20001194 	.word	0x20001194
 8004694:	20001188 	.word	0x20001188
 8004698:	20001198 	.word	0x20001198

0800469c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d035      	beq.n	800471a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80046ae:	2308      	movs	r3, #8
 80046b0:	425b      	negs	r3, r3
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	18d3      	adds	r3, r2, r3
 80046b6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	4b18      	ldr	r3, [pc, #96]	; (8004724 <vPortFree+0x88>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4013      	ands	r3, r2
 80046c6:	d101      	bne.n	80046cc <vPortFree+0x30>
 80046c8:	b672      	cpsid	i
 80046ca:	e7fe      	b.n	80046ca <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <vPortFree+0x3c>
 80046d4:	b672      	cpsid	i
 80046d6:	e7fe      	b.n	80046d6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	4b11      	ldr	r3, [pc, #68]	; (8004724 <vPortFree+0x88>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4013      	ands	r3, r2
 80046e2:	d01a      	beq.n	800471a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d116      	bne.n	800471a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	4b0c      	ldr	r3, [pc, #48]	; (8004724 <vPortFree+0x88>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	43db      	mvns	r3, r3
 80046f6:	401a      	ands	r2, r3
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80046fc:	f7ff fb2a 	bl	8003d54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	4b08      	ldr	r3, [pc, #32]	; (8004728 <vPortFree+0x8c>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	18d2      	adds	r2, r2, r3
 800470a:	4b07      	ldr	r3, [pc, #28]	; (8004728 <vPortFree+0x8c>)
 800470c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	0018      	movs	r0, r3
 8004712:	f000 f86b 	bl	80047ec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004716:	f7ff fb29 	bl	8003d6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800471a:	46c0      	nop			; (mov r8, r8)
 800471c:	46bd      	mov	sp, r7
 800471e:	b004      	add	sp, #16
 8004720:	bd80      	pop	{r7, pc}
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	2000119c 	.word	0x2000119c
 8004728:	20001194 	.word	0x20001194

0800472c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004732:	23c0      	movs	r3, #192	; 0xc0
 8004734:	011b      	lsls	r3, r3, #4
 8004736:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004738:	4b26      	ldr	r3, [pc, #152]	; (80047d4 <prvHeapInit+0xa8>)
 800473a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2207      	movs	r2, #7
 8004740:	4013      	ands	r3, r2
 8004742:	d00c      	beq.n	800475e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	3307      	adds	r3, #7
 8004748:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2207      	movs	r2, #7
 800474e:	4393      	bics	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	1ad2      	subs	r2, r2, r3
 8004758:	4b1e      	ldr	r3, [pc, #120]	; (80047d4 <prvHeapInit+0xa8>)
 800475a:	18d3      	adds	r3, r2, r3
 800475c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004762:	4b1d      	ldr	r3, [pc, #116]	; (80047d8 <prvHeapInit+0xac>)
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004768:	4b1b      	ldr	r3, [pc, #108]	; (80047d8 <prvHeapInit+0xac>)
 800476a:	2200      	movs	r2, #0
 800476c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	18d3      	adds	r3, r2, r3
 8004774:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004776:	2208      	movs	r2, #8
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	1a9b      	subs	r3, r3, r2
 800477c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2207      	movs	r2, #7
 8004782:	4393      	bics	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	4b14      	ldr	r3, [pc, #80]	; (80047dc <prvHeapInit+0xb0>)
 800478a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800478c:	4b13      	ldr	r3, [pc, #76]	; (80047dc <prvHeapInit+0xb0>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2200      	movs	r2, #0
 8004792:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004794:	4b11      	ldr	r3, [pc, #68]	; (80047dc <prvHeapInit+0xb0>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2200      	movs	r2, #0
 800479a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	1ad2      	subs	r2, r2, r3
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80047aa:	4b0c      	ldr	r3, [pc, #48]	; (80047dc <prvHeapInit+0xb0>)
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	685a      	ldr	r2, [r3, #4]
 80047b6:	4b0a      	ldr	r3, [pc, #40]	; (80047e0 <prvHeapInit+0xb4>)
 80047b8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	4b09      	ldr	r3, [pc, #36]	; (80047e4 <prvHeapInit+0xb8>)
 80047c0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80047c2:	4b09      	ldr	r3, [pc, #36]	; (80047e8 <prvHeapInit+0xbc>)
 80047c4:	2280      	movs	r2, #128	; 0x80
 80047c6:	0612      	lsls	r2, r2, #24
 80047c8:	601a      	str	r2, [r3, #0]
}
 80047ca:	46c0      	nop			; (mov r8, r8)
 80047cc:	46bd      	mov	sp, r7
 80047ce:	b004      	add	sp, #16
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	46c0      	nop			; (mov r8, r8)
 80047d4:	20000588 	.word	0x20000588
 80047d8:	20001188 	.word	0x20001188
 80047dc:	20001190 	.word	0x20001190
 80047e0:	20001198 	.word	0x20001198
 80047e4:	20001194 	.word	0x20001194
 80047e8:	2000119c 	.word	0x2000119c

080047ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80047f4:	4b27      	ldr	r3, [pc, #156]	; (8004894 <prvInsertBlockIntoFreeList+0xa8>)
 80047f6:	60fb      	str	r3, [r7, #12]
 80047f8:	e002      	b.n	8004800 <prvInsertBlockIntoFreeList+0x14>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	429a      	cmp	r2, r3
 8004808:	d8f7      	bhi.n	80047fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	18d3      	adds	r3, r2, r3
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	429a      	cmp	r2, r3
 800481a:	d108      	bne.n	800482e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	18d2      	adds	r2, r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	18d2      	adds	r2, r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	429a      	cmp	r2, r3
 8004840:	d118      	bne.n	8004874 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	4b14      	ldr	r3, [pc, #80]	; (8004898 <prvInsertBlockIntoFreeList+0xac>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	429a      	cmp	r2, r3
 800484c:	d00d      	beq.n	800486a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	18d2      	adds	r2, r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	e008      	b.n	800487c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800486a:	4b0b      	ldr	r3, [pc, #44]	; (8004898 <prvInsertBlockIntoFreeList+0xac>)
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	601a      	str	r2, [r3, #0]
 8004872:	e003      	b.n	800487c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	429a      	cmp	r2, r3
 8004882:	d002      	beq.n	800488a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800488a:	46c0      	nop			; (mov r8, r8)
 800488c:	46bd      	mov	sp, r7
 800488e:	b004      	add	sp, #16
 8004890:	bd80      	pop	{r7, pc}
 8004892:	46c0      	nop			; (mov r8, r8)
 8004894:	20001188 	.word	0x20001188
 8004898:	20001190 	.word	0x20001190

0800489c <__errno>:
 800489c:	4b01      	ldr	r3, [pc, #4]	; (80048a4 <__errno+0x8>)
 800489e:	6818      	ldr	r0, [r3, #0]
 80048a0:	4770      	bx	lr
 80048a2:	46c0      	nop			; (mov r8, r8)
 80048a4:	20000010 	.word	0x20000010

080048a8 <__libc_init_array>:
 80048a8:	b570      	push	{r4, r5, r6, lr}
 80048aa:	2600      	movs	r6, #0
 80048ac:	4d0c      	ldr	r5, [pc, #48]	; (80048e0 <__libc_init_array+0x38>)
 80048ae:	4c0d      	ldr	r4, [pc, #52]	; (80048e4 <__libc_init_array+0x3c>)
 80048b0:	1b64      	subs	r4, r4, r5
 80048b2:	10a4      	asrs	r4, r4, #2
 80048b4:	42a6      	cmp	r6, r4
 80048b6:	d109      	bne.n	80048cc <__libc_init_array+0x24>
 80048b8:	2600      	movs	r6, #0
 80048ba:	f000 fcff 	bl	80052bc <_init>
 80048be:	4d0a      	ldr	r5, [pc, #40]	; (80048e8 <__libc_init_array+0x40>)
 80048c0:	4c0a      	ldr	r4, [pc, #40]	; (80048ec <__libc_init_array+0x44>)
 80048c2:	1b64      	subs	r4, r4, r5
 80048c4:	10a4      	asrs	r4, r4, #2
 80048c6:	42a6      	cmp	r6, r4
 80048c8:	d105      	bne.n	80048d6 <__libc_init_array+0x2e>
 80048ca:	bd70      	pop	{r4, r5, r6, pc}
 80048cc:	00b3      	lsls	r3, r6, #2
 80048ce:	58eb      	ldr	r3, [r5, r3]
 80048d0:	4798      	blx	r3
 80048d2:	3601      	adds	r6, #1
 80048d4:	e7ee      	b.n	80048b4 <__libc_init_array+0xc>
 80048d6:	00b3      	lsls	r3, r6, #2
 80048d8:	58eb      	ldr	r3, [r5, r3]
 80048da:	4798      	blx	r3
 80048dc:	3601      	adds	r6, #1
 80048de:	e7f2      	b.n	80048c6 <__libc_init_array+0x1e>
 80048e0:	080054c4 	.word	0x080054c4
 80048e4:	080054c4 	.word	0x080054c4
 80048e8:	080054c4 	.word	0x080054c4
 80048ec:	080054c8 	.word	0x080054c8

080048f0 <__retarget_lock_acquire_recursive>:
 80048f0:	4770      	bx	lr

080048f2 <__retarget_lock_release_recursive>:
 80048f2:	4770      	bx	lr

080048f4 <memcpy>:
 80048f4:	2300      	movs	r3, #0
 80048f6:	b510      	push	{r4, lr}
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d100      	bne.n	80048fe <memcpy+0xa>
 80048fc:	bd10      	pop	{r4, pc}
 80048fe:	5ccc      	ldrb	r4, [r1, r3]
 8004900:	54c4      	strb	r4, [r0, r3]
 8004902:	3301      	adds	r3, #1
 8004904:	e7f8      	b.n	80048f8 <memcpy+0x4>

08004906 <memset>:
 8004906:	0003      	movs	r3, r0
 8004908:	1882      	adds	r2, r0, r2
 800490a:	4293      	cmp	r3, r2
 800490c:	d100      	bne.n	8004910 <memset+0xa>
 800490e:	4770      	bx	lr
 8004910:	7019      	strb	r1, [r3, #0]
 8004912:	3301      	adds	r3, #1
 8004914:	e7f9      	b.n	800490a <memset+0x4>
	...

08004918 <sbrk_aligned>:
 8004918:	b570      	push	{r4, r5, r6, lr}
 800491a:	4e0f      	ldr	r6, [pc, #60]	; (8004958 <sbrk_aligned+0x40>)
 800491c:	000d      	movs	r5, r1
 800491e:	6831      	ldr	r1, [r6, #0]
 8004920:	0004      	movs	r4, r0
 8004922:	2900      	cmp	r1, #0
 8004924:	d102      	bne.n	800492c <sbrk_aligned+0x14>
 8004926:	f000 f903 	bl	8004b30 <_sbrk_r>
 800492a:	6030      	str	r0, [r6, #0]
 800492c:	0029      	movs	r1, r5
 800492e:	0020      	movs	r0, r4
 8004930:	f000 f8fe 	bl	8004b30 <_sbrk_r>
 8004934:	1c43      	adds	r3, r0, #1
 8004936:	d00a      	beq.n	800494e <sbrk_aligned+0x36>
 8004938:	2303      	movs	r3, #3
 800493a:	1cc5      	adds	r5, r0, #3
 800493c:	439d      	bics	r5, r3
 800493e:	42a8      	cmp	r0, r5
 8004940:	d007      	beq.n	8004952 <sbrk_aligned+0x3a>
 8004942:	1a29      	subs	r1, r5, r0
 8004944:	0020      	movs	r0, r4
 8004946:	f000 f8f3 	bl	8004b30 <_sbrk_r>
 800494a:	1c43      	adds	r3, r0, #1
 800494c:	d101      	bne.n	8004952 <sbrk_aligned+0x3a>
 800494e:	2501      	movs	r5, #1
 8004950:	426d      	negs	r5, r5
 8004952:	0028      	movs	r0, r5
 8004954:	bd70      	pop	{r4, r5, r6, pc}
 8004956:	46c0      	nop			; (mov r8, r8)
 8004958:	200011a8 	.word	0x200011a8

0800495c <_malloc_r>:
 800495c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800495e:	2203      	movs	r2, #3
 8004960:	1ccb      	adds	r3, r1, #3
 8004962:	4393      	bics	r3, r2
 8004964:	3308      	adds	r3, #8
 8004966:	0006      	movs	r6, r0
 8004968:	001f      	movs	r7, r3
 800496a:	2b0c      	cmp	r3, #12
 800496c:	d232      	bcs.n	80049d4 <_malloc_r+0x78>
 800496e:	270c      	movs	r7, #12
 8004970:	42b9      	cmp	r1, r7
 8004972:	d831      	bhi.n	80049d8 <_malloc_r+0x7c>
 8004974:	0030      	movs	r0, r6
 8004976:	f000 f90d 	bl	8004b94 <__malloc_lock>
 800497a:	4d32      	ldr	r5, [pc, #200]	; (8004a44 <_malloc_r+0xe8>)
 800497c:	682b      	ldr	r3, [r5, #0]
 800497e:	001c      	movs	r4, r3
 8004980:	2c00      	cmp	r4, #0
 8004982:	d12e      	bne.n	80049e2 <_malloc_r+0x86>
 8004984:	0039      	movs	r1, r7
 8004986:	0030      	movs	r0, r6
 8004988:	f7ff ffc6 	bl	8004918 <sbrk_aligned>
 800498c:	0004      	movs	r4, r0
 800498e:	1c43      	adds	r3, r0, #1
 8004990:	d11e      	bne.n	80049d0 <_malloc_r+0x74>
 8004992:	682c      	ldr	r4, [r5, #0]
 8004994:	0025      	movs	r5, r4
 8004996:	2d00      	cmp	r5, #0
 8004998:	d14a      	bne.n	8004a30 <_malloc_r+0xd4>
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	0029      	movs	r1, r5
 800499e:	18e3      	adds	r3, r4, r3
 80049a0:	0030      	movs	r0, r6
 80049a2:	9301      	str	r3, [sp, #4]
 80049a4:	f000 f8c4 	bl	8004b30 <_sbrk_r>
 80049a8:	9b01      	ldr	r3, [sp, #4]
 80049aa:	4283      	cmp	r3, r0
 80049ac:	d143      	bne.n	8004a36 <_malloc_r+0xda>
 80049ae:	6823      	ldr	r3, [r4, #0]
 80049b0:	3703      	adds	r7, #3
 80049b2:	1aff      	subs	r7, r7, r3
 80049b4:	2303      	movs	r3, #3
 80049b6:	439f      	bics	r7, r3
 80049b8:	3708      	adds	r7, #8
 80049ba:	2f0c      	cmp	r7, #12
 80049bc:	d200      	bcs.n	80049c0 <_malloc_r+0x64>
 80049be:	270c      	movs	r7, #12
 80049c0:	0039      	movs	r1, r7
 80049c2:	0030      	movs	r0, r6
 80049c4:	f7ff ffa8 	bl	8004918 <sbrk_aligned>
 80049c8:	1c43      	adds	r3, r0, #1
 80049ca:	d034      	beq.n	8004a36 <_malloc_r+0xda>
 80049cc:	6823      	ldr	r3, [r4, #0]
 80049ce:	19df      	adds	r7, r3, r7
 80049d0:	6027      	str	r7, [r4, #0]
 80049d2:	e013      	b.n	80049fc <_malloc_r+0xa0>
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	dacb      	bge.n	8004970 <_malloc_r+0x14>
 80049d8:	230c      	movs	r3, #12
 80049da:	2500      	movs	r5, #0
 80049dc:	6033      	str	r3, [r6, #0]
 80049de:	0028      	movs	r0, r5
 80049e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80049e2:	6822      	ldr	r2, [r4, #0]
 80049e4:	1bd1      	subs	r1, r2, r7
 80049e6:	d420      	bmi.n	8004a2a <_malloc_r+0xce>
 80049e8:	290b      	cmp	r1, #11
 80049ea:	d917      	bls.n	8004a1c <_malloc_r+0xc0>
 80049ec:	19e2      	adds	r2, r4, r7
 80049ee:	6027      	str	r7, [r4, #0]
 80049f0:	42a3      	cmp	r3, r4
 80049f2:	d111      	bne.n	8004a18 <_malloc_r+0xbc>
 80049f4:	602a      	str	r2, [r5, #0]
 80049f6:	6863      	ldr	r3, [r4, #4]
 80049f8:	6011      	str	r1, [r2, #0]
 80049fa:	6053      	str	r3, [r2, #4]
 80049fc:	0030      	movs	r0, r6
 80049fe:	0025      	movs	r5, r4
 8004a00:	f000 f8d0 	bl	8004ba4 <__malloc_unlock>
 8004a04:	2207      	movs	r2, #7
 8004a06:	350b      	adds	r5, #11
 8004a08:	1d23      	adds	r3, r4, #4
 8004a0a:	4395      	bics	r5, r2
 8004a0c:	1aea      	subs	r2, r5, r3
 8004a0e:	429d      	cmp	r5, r3
 8004a10:	d0e5      	beq.n	80049de <_malloc_r+0x82>
 8004a12:	1b5b      	subs	r3, r3, r5
 8004a14:	50a3      	str	r3, [r4, r2]
 8004a16:	e7e2      	b.n	80049de <_malloc_r+0x82>
 8004a18:	605a      	str	r2, [r3, #4]
 8004a1a:	e7ec      	b.n	80049f6 <_malloc_r+0x9a>
 8004a1c:	6862      	ldr	r2, [r4, #4]
 8004a1e:	42a3      	cmp	r3, r4
 8004a20:	d101      	bne.n	8004a26 <_malloc_r+0xca>
 8004a22:	602a      	str	r2, [r5, #0]
 8004a24:	e7ea      	b.n	80049fc <_malloc_r+0xa0>
 8004a26:	605a      	str	r2, [r3, #4]
 8004a28:	e7e8      	b.n	80049fc <_malloc_r+0xa0>
 8004a2a:	0023      	movs	r3, r4
 8004a2c:	6864      	ldr	r4, [r4, #4]
 8004a2e:	e7a7      	b.n	8004980 <_malloc_r+0x24>
 8004a30:	002c      	movs	r4, r5
 8004a32:	686d      	ldr	r5, [r5, #4]
 8004a34:	e7af      	b.n	8004996 <_malloc_r+0x3a>
 8004a36:	230c      	movs	r3, #12
 8004a38:	0030      	movs	r0, r6
 8004a3a:	6033      	str	r3, [r6, #0]
 8004a3c:	f000 f8b2 	bl	8004ba4 <__malloc_unlock>
 8004a40:	e7cd      	b.n	80049de <_malloc_r+0x82>
 8004a42:	46c0      	nop			; (mov r8, r8)
 8004a44:	200011a4 	.word	0x200011a4

08004a48 <cleanup_glue>:
 8004a48:	b570      	push	{r4, r5, r6, lr}
 8004a4a:	000d      	movs	r5, r1
 8004a4c:	6809      	ldr	r1, [r1, #0]
 8004a4e:	0004      	movs	r4, r0
 8004a50:	2900      	cmp	r1, #0
 8004a52:	d001      	beq.n	8004a58 <cleanup_glue+0x10>
 8004a54:	f7ff fff8 	bl	8004a48 <cleanup_glue>
 8004a58:	0029      	movs	r1, r5
 8004a5a:	0020      	movs	r0, r4
 8004a5c:	f000 f8aa 	bl	8004bb4 <_free_r>
 8004a60:	bd70      	pop	{r4, r5, r6, pc}
	...

08004a64 <_reclaim_reent>:
 8004a64:	4b31      	ldr	r3, [pc, #196]	; (8004b2c <_reclaim_reent+0xc8>)
 8004a66:	b570      	push	{r4, r5, r6, lr}
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	0004      	movs	r4, r0
 8004a6c:	4283      	cmp	r3, r0
 8004a6e:	d049      	beq.n	8004b04 <_reclaim_reent+0xa0>
 8004a70:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00a      	beq.n	8004a8c <_reclaim_reent+0x28>
 8004a76:	2500      	movs	r5, #0
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	42ab      	cmp	r3, r5
 8004a7c:	d147      	bne.n	8004b0e <_reclaim_reent+0xaa>
 8004a7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a80:	6819      	ldr	r1, [r3, #0]
 8004a82:	2900      	cmp	r1, #0
 8004a84:	d002      	beq.n	8004a8c <_reclaim_reent+0x28>
 8004a86:	0020      	movs	r0, r4
 8004a88:	f000 f894 	bl	8004bb4 <_free_r>
 8004a8c:	6961      	ldr	r1, [r4, #20]
 8004a8e:	2900      	cmp	r1, #0
 8004a90:	d002      	beq.n	8004a98 <_reclaim_reent+0x34>
 8004a92:	0020      	movs	r0, r4
 8004a94:	f000 f88e 	bl	8004bb4 <_free_r>
 8004a98:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004a9a:	2900      	cmp	r1, #0
 8004a9c:	d002      	beq.n	8004aa4 <_reclaim_reent+0x40>
 8004a9e:	0020      	movs	r0, r4
 8004aa0:	f000 f888 	bl	8004bb4 <_free_r>
 8004aa4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004aa6:	2900      	cmp	r1, #0
 8004aa8:	d002      	beq.n	8004ab0 <_reclaim_reent+0x4c>
 8004aaa:	0020      	movs	r0, r4
 8004aac:	f000 f882 	bl	8004bb4 <_free_r>
 8004ab0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004ab2:	2900      	cmp	r1, #0
 8004ab4:	d002      	beq.n	8004abc <_reclaim_reent+0x58>
 8004ab6:	0020      	movs	r0, r4
 8004ab8:	f000 f87c 	bl	8004bb4 <_free_r>
 8004abc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004abe:	2900      	cmp	r1, #0
 8004ac0:	d002      	beq.n	8004ac8 <_reclaim_reent+0x64>
 8004ac2:	0020      	movs	r0, r4
 8004ac4:	f000 f876 	bl	8004bb4 <_free_r>
 8004ac8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004aca:	2900      	cmp	r1, #0
 8004acc:	d002      	beq.n	8004ad4 <_reclaim_reent+0x70>
 8004ace:	0020      	movs	r0, r4
 8004ad0:	f000 f870 	bl	8004bb4 <_free_r>
 8004ad4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004ad6:	2900      	cmp	r1, #0
 8004ad8:	d002      	beq.n	8004ae0 <_reclaim_reent+0x7c>
 8004ada:	0020      	movs	r0, r4
 8004adc:	f000 f86a 	bl	8004bb4 <_free_r>
 8004ae0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ae2:	2900      	cmp	r1, #0
 8004ae4:	d002      	beq.n	8004aec <_reclaim_reent+0x88>
 8004ae6:	0020      	movs	r0, r4
 8004ae8:	f000 f864 	bl	8004bb4 <_free_r>
 8004aec:	69a3      	ldr	r3, [r4, #24]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d008      	beq.n	8004b04 <_reclaim_reent+0xa0>
 8004af2:	0020      	movs	r0, r4
 8004af4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004af6:	4798      	blx	r3
 8004af8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004afa:	2900      	cmp	r1, #0
 8004afc:	d002      	beq.n	8004b04 <_reclaim_reent+0xa0>
 8004afe:	0020      	movs	r0, r4
 8004b00:	f7ff ffa2 	bl	8004a48 <cleanup_glue>
 8004b04:	bd70      	pop	{r4, r5, r6, pc}
 8004b06:	5949      	ldr	r1, [r1, r5]
 8004b08:	2900      	cmp	r1, #0
 8004b0a:	d108      	bne.n	8004b1e <_reclaim_reent+0xba>
 8004b0c:	3504      	adds	r5, #4
 8004b0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b10:	68d9      	ldr	r1, [r3, #12]
 8004b12:	2d80      	cmp	r5, #128	; 0x80
 8004b14:	d1f7      	bne.n	8004b06 <_reclaim_reent+0xa2>
 8004b16:	0020      	movs	r0, r4
 8004b18:	f000 f84c 	bl	8004bb4 <_free_r>
 8004b1c:	e7af      	b.n	8004a7e <_reclaim_reent+0x1a>
 8004b1e:	680e      	ldr	r6, [r1, #0]
 8004b20:	0020      	movs	r0, r4
 8004b22:	f000 f847 	bl	8004bb4 <_free_r>
 8004b26:	0031      	movs	r1, r6
 8004b28:	e7ee      	b.n	8004b08 <_reclaim_reent+0xa4>
 8004b2a:	46c0      	nop			; (mov r8, r8)
 8004b2c:	20000010 	.word	0x20000010

08004b30 <_sbrk_r>:
 8004b30:	2300      	movs	r3, #0
 8004b32:	b570      	push	{r4, r5, r6, lr}
 8004b34:	4d06      	ldr	r5, [pc, #24]	; (8004b50 <_sbrk_r+0x20>)
 8004b36:	0004      	movs	r4, r0
 8004b38:	0008      	movs	r0, r1
 8004b3a:	602b      	str	r3, [r5, #0]
 8004b3c:	f7fb ff90 	bl	8000a60 <_sbrk>
 8004b40:	1c43      	adds	r3, r0, #1
 8004b42:	d103      	bne.n	8004b4c <_sbrk_r+0x1c>
 8004b44:	682b      	ldr	r3, [r5, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d000      	beq.n	8004b4c <_sbrk_r+0x1c>
 8004b4a:	6023      	str	r3, [r4, #0]
 8004b4c:	bd70      	pop	{r4, r5, r6, pc}
 8004b4e:	46c0      	nop			; (mov r8, r8)
 8004b50:	200011ac 	.word	0x200011ac

08004b54 <siprintf>:
 8004b54:	b40e      	push	{r1, r2, r3}
 8004b56:	b500      	push	{lr}
 8004b58:	490b      	ldr	r1, [pc, #44]	; (8004b88 <siprintf+0x34>)
 8004b5a:	b09c      	sub	sp, #112	; 0x70
 8004b5c:	ab1d      	add	r3, sp, #116	; 0x74
 8004b5e:	9002      	str	r0, [sp, #8]
 8004b60:	9006      	str	r0, [sp, #24]
 8004b62:	9107      	str	r1, [sp, #28]
 8004b64:	9104      	str	r1, [sp, #16]
 8004b66:	4809      	ldr	r0, [pc, #36]	; (8004b8c <siprintf+0x38>)
 8004b68:	4909      	ldr	r1, [pc, #36]	; (8004b90 <siprintf+0x3c>)
 8004b6a:	cb04      	ldmia	r3!, {r2}
 8004b6c:	9105      	str	r1, [sp, #20]
 8004b6e:	6800      	ldr	r0, [r0, #0]
 8004b70:	a902      	add	r1, sp, #8
 8004b72:	9301      	str	r3, [sp, #4]
 8004b74:	f000 f8ca 	bl	8004d0c <_svfiprintf_r>
 8004b78:	2300      	movs	r3, #0
 8004b7a:	9a02      	ldr	r2, [sp, #8]
 8004b7c:	7013      	strb	r3, [r2, #0]
 8004b7e:	b01c      	add	sp, #112	; 0x70
 8004b80:	bc08      	pop	{r3}
 8004b82:	b003      	add	sp, #12
 8004b84:	4718      	bx	r3
 8004b86:	46c0      	nop			; (mov r8, r8)
 8004b88:	7fffffff 	.word	0x7fffffff
 8004b8c:	20000010 	.word	0x20000010
 8004b90:	ffff0208 	.word	0xffff0208

08004b94 <__malloc_lock>:
 8004b94:	b510      	push	{r4, lr}
 8004b96:	4802      	ldr	r0, [pc, #8]	; (8004ba0 <__malloc_lock+0xc>)
 8004b98:	f7ff feaa 	bl	80048f0 <__retarget_lock_acquire_recursive>
 8004b9c:	bd10      	pop	{r4, pc}
 8004b9e:	46c0      	nop			; (mov r8, r8)
 8004ba0:	200011a0 	.word	0x200011a0

08004ba4 <__malloc_unlock>:
 8004ba4:	b510      	push	{r4, lr}
 8004ba6:	4802      	ldr	r0, [pc, #8]	; (8004bb0 <__malloc_unlock+0xc>)
 8004ba8:	f7ff fea3 	bl	80048f2 <__retarget_lock_release_recursive>
 8004bac:	bd10      	pop	{r4, pc}
 8004bae:	46c0      	nop			; (mov r8, r8)
 8004bb0:	200011a0 	.word	0x200011a0

08004bb4 <_free_r>:
 8004bb4:	b570      	push	{r4, r5, r6, lr}
 8004bb6:	0005      	movs	r5, r0
 8004bb8:	2900      	cmp	r1, #0
 8004bba:	d010      	beq.n	8004bde <_free_r+0x2a>
 8004bbc:	1f0c      	subs	r4, r1, #4
 8004bbe:	6823      	ldr	r3, [r4, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	da00      	bge.n	8004bc6 <_free_r+0x12>
 8004bc4:	18e4      	adds	r4, r4, r3
 8004bc6:	0028      	movs	r0, r5
 8004bc8:	f7ff ffe4 	bl	8004b94 <__malloc_lock>
 8004bcc:	4a1d      	ldr	r2, [pc, #116]	; (8004c44 <_free_r+0x90>)
 8004bce:	6813      	ldr	r3, [r2, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d105      	bne.n	8004be0 <_free_r+0x2c>
 8004bd4:	6063      	str	r3, [r4, #4]
 8004bd6:	6014      	str	r4, [r2, #0]
 8004bd8:	0028      	movs	r0, r5
 8004bda:	f7ff ffe3 	bl	8004ba4 <__malloc_unlock>
 8004bde:	bd70      	pop	{r4, r5, r6, pc}
 8004be0:	42a3      	cmp	r3, r4
 8004be2:	d908      	bls.n	8004bf6 <_free_r+0x42>
 8004be4:	6821      	ldr	r1, [r4, #0]
 8004be6:	1860      	adds	r0, r4, r1
 8004be8:	4283      	cmp	r3, r0
 8004bea:	d1f3      	bne.n	8004bd4 <_free_r+0x20>
 8004bec:	6818      	ldr	r0, [r3, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	1841      	adds	r1, r0, r1
 8004bf2:	6021      	str	r1, [r4, #0]
 8004bf4:	e7ee      	b.n	8004bd4 <_free_r+0x20>
 8004bf6:	001a      	movs	r2, r3
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <_free_r+0x4e>
 8004bfe:	42a3      	cmp	r3, r4
 8004c00:	d9f9      	bls.n	8004bf6 <_free_r+0x42>
 8004c02:	6811      	ldr	r1, [r2, #0]
 8004c04:	1850      	adds	r0, r2, r1
 8004c06:	42a0      	cmp	r0, r4
 8004c08:	d10b      	bne.n	8004c22 <_free_r+0x6e>
 8004c0a:	6820      	ldr	r0, [r4, #0]
 8004c0c:	1809      	adds	r1, r1, r0
 8004c0e:	1850      	adds	r0, r2, r1
 8004c10:	6011      	str	r1, [r2, #0]
 8004c12:	4283      	cmp	r3, r0
 8004c14:	d1e0      	bne.n	8004bd8 <_free_r+0x24>
 8004c16:	6818      	ldr	r0, [r3, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	1841      	adds	r1, r0, r1
 8004c1c:	6011      	str	r1, [r2, #0]
 8004c1e:	6053      	str	r3, [r2, #4]
 8004c20:	e7da      	b.n	8004bd8 <_free_r+0x24>
 8004c22:	42a0      	cmp	r0, r4
 8004c24:	d902      	bls.n	8004c2c <_free_r+0x78>
 8004c26:	230c      	movs	r3, #12
 8004c28:	602b      	str	r3, [r5, #0]
 8004c2a:	e7d5      	b.n	8004bd8 <_free_r+0x24>
 8004c2c:	6821      	ldr	r1, [r4, #0]
 8004c2e:	1860      	adds	r0, r4, r1
 8004c30:	4283      	cmp	r3, r0
 8004c32:	d103      	bne.n	8004c3c <_free_r+0x88>
 8004c34:	6818      	ldr	r0, [r3, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	1841      	adds	r1, r0, r1
 8004c3a:	6021      	str	r1, [r4, #0]
 8004c3c:	6063      	str	r3, [r4, #4]
 8004c3e:	6054      	str	r4, [r2, #4]
 8004c40:	e7ca      	b.n	8004bd8 <_free_r+0x24>
 8004c42:	46c0      	nop			; (mov r8, r8)
 8004c44:	200011a4 	.word	0x200011a4

08004c48 <__ssputs_r>:
 8004c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c4a:	688e      	ldr	r6, [r1, #8]
 8004c4c:	b085      	sub	sp, #20
 8004c4e:	0007      	movs	r7, r0
 8004c50:	000c      	movs	r4, r1
 8004c52:	9203      	str	r2, [sp, #12]
 8004c54:	9301      	str	r3, [sp, #4]
 8004c56:	429e      	cmp	r6, r3
 8004c58:	d83c      	bhi.n	8004cd4 <__ssputs_r+0x8c>
 8004c5a:	2390      	movs	r3, #144	; 0x90
 8004c5c:	898a      	ldrh	r2, [r1, #12]
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	421a      	tst	r2, r3
 8004c62:	d034      	beq.n	8004cce <__ssputs_r+0x86>
 8004c64:	6909      	ldr	r1, [r1, #16]
 8004c66:	6823      	ldr	r3, [r4, #0]
 8004c68:	6960      	ldr	r0, [r4, #20]
 8004c6a:	1a5b      	subs	r3, r3, r1
 8004c6c:	9302      	str	r3, [sp, #8]
 8004c6e:	2303      	movs	r3, #3
 8004c70:	4343      	muls	r3, r0
 8004c72:	0fdd      	lsrs	r5, r3, #31
 8004c74:	18ed      	adds	r5, r5, r3
 8004c76:	9b01      	ldr	r3, [sp, #4]
 8004c78:	9802      	ldr	r0, [sp, #8]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	181b      	adds	r3, r3, r0
 8004c7e:	106d      	asrs	r5, r5, #1
 8004c80:	42ab      	cmp	r3, r5
 8004c82:	d900      	bls.n	8004c86 <__ssputs_r+0x3e>
 8004c84:	001d      	movs	r5, r3
 8004c86:	0553      	lsls	r3, r2, #21
 8004c88:	d532      	bpl.n	8004cf0 <__ssputs_r+0xa8>
 8004c8a:	0029      	movs	r1, r5
 8004c8c:	0038      	movs	r0, r7
 8004c8e:	f7ff fe65 	bl	800495c <_malloc_r>
 8004c92:	1e06      	subs	r6, r0, #0
 8004c94:	d109      	bne.n	8004caa <__ssputs_r+0x62>
 8004c96:	230c      	movs	r3, #12
 8004c98:	603b      	str	r3, [r7, #0]
 8004c9a:	2340      	movs	r3, #64	; 0x40
 8004c9c:	2001      	movs	r0, #1
 8004c9e:	89a2      	ldrh	r2, [r4, #12]
 8004ca0:	4240      	negs	r0, r0
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	81a3      	strh	r3, [r4, #12]
 8004ca6:	b005      	add	sp, #20
 8004ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004caa:	9a02      	ldr	r2, [sp, #8]
 8004cac:	6921      	ldr	r1, [r4, #16]
 8004cae:	f7ff fe21 	bl	80048f4 <memcpy>
 8004cb2:	89a3      	ldrh	r3, [r4, #12]
 8004cb4:	4a14      	ldr	r2, [pc, #80]	; (8004d08 <__ssputs_r+0xc0>)
 8004cb6:	401a      	ands	r2, r3
 8004cb8:	2380      	movs	r3, #128	; 0x80
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	81a3      	strh	r3, [r4, #12]
 8004cbe:	9b02      	ldr	r3, [sp, #8]
 8004cc0:	6126      	str	r6, [r4, #16]
 8004cc2:	18f6      	adds	r6, r6, r3
 8004cc4:	6026      	str	r6, [r4, #0]
 8004cc6:	6165      	str	r5, [r4, #20]
 8004cc8:	9e01      	ldr	r6, [sp, #4]
 8004cca:	1aed      	subs	r5, r5, r3
 8004ccc:	60a5      	str	r5, [r4, #8]
 8004cce:	9b01      	ldr	r3, [sp, #4]
 8004cd0:	429e      	cmp	r6, r3
 8004cd2:	d900      	bls.n	8004cd6 <__ssputs_r+0x8e>
 8004cd4:	9e01      	ldr	r6, [sp, #4]
 8004cd6:	0032      	movs	r2, r6
 8004cd8:	9903      	ldr	r1, [sp, #12]
 8004cda:	6820      	ldr	r0, [r4, #0]
 8004cdc:	f000 faa3 	bl	8005226 <memmove>
 8004ce0:	68a3      	ldr	r3, [r4, #8]
 8004ce2:	2000      	movs	r0, #0
 8004ce4:	1b9b      	subs	r3, r3, r6
 8004ce6:	60a3      	str	r3, [r4, #8]
 8004ce8:	6823      	ldr	r3, [r4, #0]
 8004cea:	199e      	adds	r6, r3, r6
 8004cec:	6026      	str	r6, [r4, #0]
 8004cee:	e7da      	b.n	8004ca6 <__ssputs_r+0x5e>
 8004cf0:	002a      	movs	r2, r5
 8004cf2:	0038      	movs	r0, r7
 8004cf4:	f000 faaa 	bl	800524c <_realloc_r>
 8004cf8:	1e06      	subs	r6, r0, #0
 8004cfa:	d1e0      	bne.n	8004cbe <__ssputs_r+0x76>
 8004cfc:	0038      	movs	r0, r7
 8004cfe:	6921      	ldr	r1, [r4, #16]
 8004d00:	f7ff ff58 	bl	8004bb4 <_free_r>
 8004d04:	e7c7      	b.n	8004c96 <__ssputs_r+0x4e>
 8004d06:	46c0      	nop			; (mov r8, r8)
 8004d08:	fffffb7f 	.word	0xfffffb7f

08004d0c <_svfiprintf_r>:
 8004d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d0e:	b0a1      	sub	sp, #132	; 0x84
 8004d10:	9003      	str	r0, [sp, #12]
 8004d12:	001d      	movs	r5, r3
 8004d14:	898b      	ldrh	r3, [r1, #12]
 8004d16:	000f      	movs	r7, r1
 8004d18:	0016      	movs	r6, r2
 8004d1a:	061b      	lsls	r3, r3, #24
 8004d1c:	d511      	bpl.n	8004d42 <_svfiprintf_r+0x36>
 8004d1e:	690b      	ldr	r3, [r1, #16]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d10e      	bne.n	8004d42 <_svfiprintf_r+0x36>
 8004d24:	2140      	movs	r1, #64	; 0x40
 8004d26:	f7ff fe19 	bl	800495c <_malloc_r>
 8004d2a:	6038      	str	r0, [r7, #0]
 8004d2c:	6138      	str	r0, [r7, #16]
 8004d2e:	2800      	cmp	r0, #0
 8004d30:	d105      	bne.n	8004d3e <_svfiprintf_r+0x32>
 8004d32:	230c      	movs	r3, #12
 8004d34:	9a03      	ldr	r2, [sp, #12]
 8004d36:	3801      	subs	r0, #1
 8004d38:	6013      	str	r3, [r2, #0]
 8004d3a:	b021      	add	sp, #132	; 0x84
 8004d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d3e:	2340      	movs	r3, #64	; 0x40
 8004d40:	617b      	str	r3, [r7, #20]
 8004d42:	2300      	movs	r3, #0
 8004d44:	ac08      	add	r4, sp, #32
 8004d46:	6163      	str	r3, [r4, #20]
 8004d48:	3320      	adds	r3, #32
 8004d4a:	7663      	strb	r3, [r4, #25]
 8004d4c:	3310      	adds	r3, #16
 8004d4e:	76a3      	strb	r3, [r4, #26]
 8004d50:	9507      	str	r5, [sp, #28]
 8004d52:	0035      	movs	r5, r6
 8004d54:	782b      	ldrb	r3, [r5, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <_svfiprintf_r+0x52>
 8004d5a:	2b25      	cmp	r3, #37	; 0x25
 8004d5c:	d147      	bne.n	8004dee <_svfiprintf_r+0xe2>
 8004d5e:	1bab      	subs	r3, r5, r6
 8004d60:	9305      	str	r3, [sp, #20]
 8004d62:	42b5      	cmp	r5, r6
 8004d64:	d00c      	beq.n	8004d80 <_svfiprintf_r+0x74>
 8004d66:	0032      	movs	r2, r6
 8004d68:	0039      	movs	r1, r7
 8004d6a:	9803      	ldr	r0, [sp, #12]
 8004d6c:	f7ff ff6c 	bl	8004c48 <__ssputs_r>
 8004d70:	1c43      	adds	r3, r0, #1
 8004d72:	d100      	bne.n	8004d76 <_svfiprintf_r+0x6a>
 8004d74:	e0ae      	b.n	8004ed4 <_svfiprintf_r+0x1c8>
 8004d76:	6962      	ldr	r2, [r4, #20]
 8004d78:	9b05      	ldr	r3, [sp, #20]
 8004d7a:	4694      	mov	ip, r2
 8004d7c:	4463      	add	r3, ip
 8004d7e:	6163      	str	r3, [r4, #20]
 8004d80:	782b      	ldrb	r3, [r5, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d100      	bne.n	8004d88 <_svfiprintf_r+0x7c>
 8004d86:	e0a5      	b.n	8004ed4 <_svfiprintf_r+0x1c8>
 8004d88:	2201      	movs	r2, #1
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	4252      	negs	r2, r2
 8004d8e:	6062      	str	r2, [r4, #4]
 8004d90:	a904      	add	r1, sp, #16
 8004d92:	3254      	adds	r2, #84	; 0x54
 8004d94:	1852      	adds	r2, r2, r1
 8004d96:	1c6e      	adds	r6, r5, #1
 8004d98:	6023      	str	r3, [r4, #0]
 8004d9a:	60e3      	str	r3, [r4, #12]
 8004d9c:	60a3      	str	r3, [r4, #8]
 8004d9e:	7013      	strb	r3, [r2, #0]
 8004da0:	65a3      	str	r3, [r4, #88]	; 0x58
 8004da2:	2205      	movs	r2, #5
 8004da4:	7831      	ldrb	r1, [r6, #0]
 8004da6:	4854      	ldr	r0, [pc, #336]	; (8004ef8 <_svfiprintf_r+0x1ec>)
 8004da8:	f000 fa32 	bl	8005210 <memchr>
 8004dac:	1c75      	adds	r5, r6, #1
 8004dae:	2800      	cmp	r0, #0
 8004db0:	d11f      	bne.n	8004df2 <_svfiprintf_r+0xe6>
 8004db2:	6822      	ldr	r2, [r4, #0]
 8004db4:	06d3      	lsls	r3, r2, #27
 8004db6:	d504      	bpl.n	8004dc2 <_svfiprintf_r+0xb6>
 8004db8:	2353      	movs	r3, #83	; 0x53
 8004dba:	a904      	add	r1, sp, #16
 8004dbc:	185b      	adds	r3, r3, r1
 8004dbe:	2120      	movs	r1, #32
 8004dc0:	7019      	strb	r1, [r3, #0]
 8004dc2:	0713      	lsls	r3, r2, #28
 8004dc4:	d504      	bpl.n	8004dd0 <_svfiprintf_r+0xc4>
 8004dc6:	2353      	movs	r3, #83	; 0x53
 8004dc8:	a904      	add	r1, sp, #16
 8004dca:	185b      	adds	r3, r3, r1
 8004dcc:	212b      	movs	r1, #43	; 0x2b
 8004dce:	7019      	strb	r1, [r3, #0]
 8004dd0:	7833      	ldrb	r3, [r6, #0]
 8004dd2:	2b2a      	cmp	r3, #42	; 0x2a
 8004dd4:	d016      	beq.n	8004e04 <_svfiprintf_r+0xf8>
 8004dd6:	0035      	movs	r5, r6
 8004dd8:	2100      	movs	r1, #0
 8004dda:	200a      	movs	r0, #10
 8004ddc:	68e3      	ldr	r3, [r4, #12]
 8004dde:	782a      	ldrb	r2, [r5, #0]
 8004de0:	1c6e      	adds	r6, r5, #1
 8004de2:	3a30      	subs	r2, #48	; 0x30
 8004de4:	2a09      	cmp	r2, #9
 8004de6:	d94e      	bls.n	8004e86 <_svfiprintf_r+0x17a>
 8004de8:	2900      	cmp	r1, #0
 8004dea:	d111      	bne.n	8004e10 <_svfiprintf_r+0x104>
 8004dec:	e017      	b.n	8004e1e <_svfiprintf_r+0x112>
 8004dee:	3501      	adds	r5, #1
 8004df0:	e7b0      	b.n	8004d54 <_svfiprintf_r+0x48>
 8004df2:	4b41      	ldr	r3, [pc, #260]	; (8004ef8 <_svfiprintf_r+0x1ec>)
 8004df4:	6822      	ldr	r2, [r4, #0]
 8004df6:	1ac0      	subs	r0, r0, r3
 8004df8:	2301      	movs	r3, #1
 8004dfa:	4083      	lsls	r3, r0
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	002e      	movs	r6, r5
 8004e00:	6023      	str	r3, [r4, #0]
 8004e02:	e7ce      	b.n	8004da2 <_svfiprintf_r+0x96>
 8004e04:	9b07      	ldr	r3, [sp, #28]
 8004e06:	1d19      	adds	r1, r3, #4
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	9107      	str	r1, [sp, #28]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	db01      	blt.n	8004e14 <_svfiprintf_r+0x108>
 8004e10:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e12:	e004      	b.n	8004e1e <_svfiprintf_r+0x112>
 8004e14:	425b      	negs	r3, r3
 8004e16:	60e3      	str	r3, [r4, #12]
 8004e18:	2302      	movs	r3, #2
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	6023      	str	r3, [r4, #0]
 8004e1e:	782b      	ldrb	r3, [r5, #0]
 8004e20:	2b2e      	cmp	r3, #46	; 0x2e
 8004e22:	d10a      	bne.n	8004e3a <_svfiprintf_r+0x12e>
 8004e24:	786b      	ldrb	r3, [r5, #1]
 8004e26:	2b2a      	cmp	r3, #42	; 0x2a
 8004e28:	d135      	bne.n	8004e96 <_svfiprintf_r+0x18a>
 8004e2a:	9b07      	ldr	r3, [sp, #28]
 8004e2c:	3502      	adds	r5, #2
 8004e2e:	1d1a      	adds	r2, r3, #4
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	9207      	str	r2, [sp, #28]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	db2b      	blt.n	8004e90 <_svfiprintf_r+0x184>
 8004e38:	9309      	str	r3, [sp, #36]	; 0x24
 8004e3a:	4e30      	ldr	r6, [pc, #192]	; (8004efc <_svfiprintf_r+0x1f0>)
 8004e3c:	2203      	movs	r2, #3
 8004e3e:	0030      	movs	r0, r6
 8004e40:	7829      	ldrb	r1, [r5, #0]
 8004e42:	f000 f9e5 	bl	8005210 <memchr>
 8004e46:	2800      	cmp	r0, #0
 8004e48:	d006      	beq.n	8004e58 <_svfiprintf_r+0x14c>
 8004e4a:	2340      	movs	r3, #64	; 0x40
 8004e4c:	1b80      	subs	r0, r0, r6
 8004e4e:	4083      	lsls	r3, r0
 8004e50:	6822      	ldr	r2, [r4, #0]
 8004e52:	3501      	adds	r5, #1
 8004e54:	4313      	orrs	r3, r2
 8004e56:	6023      	str	r3, [r4, #0]
 8004e58:	7829      	ldrb	r1, [r5, #0]
 8004e5a:	2206      	movs	r2, #6
 8004e5c:	4828      	ldr	r0, [pc, #160]	; (8004f00 <_svfiprintf_r+0x1f4>)
 8004e5e:	1c6e      	adds	r6, r5, #1
 8004e60:	7621      	strb	r1, [r4, #24]
 8004e62:	f000 f9d5 	bl	8005210 <memchr>
 8004e66:	2800      	cmp	r0, #0
 8004e68:	d03c      	beq.n	8004ee4 <_svfiprintf_r+0x1d8>
 8004e6a:	4b26      	ldr	r3, [pc, #152]	; (8004f04 <_svfiprintf_r+0x1f8>)
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d125      	bne.n	8004ebc <_svfiprintf_r+0x1b0>
 8004e70:	2207      	movs	r2, #7
 8004e72:	9b07      	ldr	r3, [sp, #28]
 8004e74:	3307      	adds	r3, #7
 8004e76:	4393      	bics	r3, r2
 8004e78:	3308      	adds	r3, #8
 8004e7a:	9307      	str	r3, [sp, #28]
 8004e7c:	6963      	ldr	r3, [r4, #20]
 8004e7e:	9a04      	ldr	r2, [sp, #16]
 8004e80:	189b      	adds	r3, r3, r2
 8004e82:	6163      	str	r3, [r4, #20]
 8004e84:	e765      	b.n	8004d52 <_svfiprintf_r+0x46>
 8004e86:	4343      	muls	r3, r0
 8004e88:	0035      	movs	r5, r6
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	189b      	adds	r3, r3, r2
 8004e8e:	e7a6      	b.n	8004dde <_svfiprintf_r+0xd2>
 8004e90:	2301      	movs	r3, #1
 8004e92:	425b      	negs	r3, r3
 8004e94:	e7d0      	b.n	8004e38 <_svfiprintf_r+0x12c>
 8004e96:	2300      	movs	r3, #0
 8004e98:	200a      	movs	r0, #10
 8004e9a:	001a      	movs	r2, r3
 8004e9c:	3501      	adds	r5, #1
 8004e9e:	6063      	str	r3, [r4, #4]
 8004ea0:	7829      	ldrb	r1, [r5, #0]
 8004ea2:	1c6e      	adds	r6, r5, #1
 8004ea4:	3930      	subs	r1, #48	; 0x30
 8004ea6:	2909      	cmp	r1, #9
 8004ea8:	d903      	bls.n	8004eb2 <_svfiprintf_r+0x1a6>
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d0c5      	beq.n	8004e3a <_svfiprintf_r+0x12e>
 8004eae:	9209      	str	r2, [sp, #36]	; 0x24
 8004eb0:	e7c3      	b.n	8004e3a <_svfiprintf_r+0x12e>
 8004eb2:	4342      	muls	r2, r0
 8004eb4:	0035      	movs	r5, r6
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	1852      	adds	r2, r2, r1
 8004eba:	e7f1      	b.n	8004ea0 <_svfiprintf_r+0x194>
 8004ebc:	ab07      	add	r3, sp, #28
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	003a      	movs	r2, r7
 8004ec2:	0021      	movs	r1, r4
 8004ec4:	4b10      	ldr	r3, [pc, #64]	; (8004f08 <_svfiprintf_r+0x1fc>)
 8004ec6:	9803      	ldr	r0, [sp, #12]
 8004ec8:	e000      	b.n	8004ecc <_svfiprintf_r+0x1c0>
 8004eca:	bf00      	nop
 8004ecc:	9004      	str	r0, [sp, #16]
 8004ece:	9b04      	ldr	r3, [sp, #16]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	d1d3      	bne.n	8004e7c <_svfiprintf_r+0x170>
 8004ed4:	89bb      	ldrh	r3, [r7, #12]
 8004ed6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004ed8:	065b      	lsls	r3, r3, #25
 8004eda:	d400      	bmi.n	8004ede <_svfiprintf_r+0x1d2>
 8004edc:	e72d      	b.n	8004d3a <_svfiprintf_r+0x2e>
 8004ede:	2001      	movs	r0, #1
 8004ee0:	4240      	negs	r0, r0
 8004ee2:	e72a      	b.n	8004d3a <_svfiprintf_r+0x2e>
 8004ee4:	ab07      	add	r3, sp, #28
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	003a      	movs	r2, r7
 8004eea:	0021      	movs	r1, r4
 8004eec:	4b06      	ldr	r3, [pc, #24]	; (8004f08 <_svfiprintf_r+0x1fc>)
 8004eee:	9803      	ldr	r0, [sp, #12]
 8004ef0:	f000 f87c 	bl	8004fec <_printf_i>
 8004ef4:	e7ea      	b.n	8004ecc <_svfiprintf_r+0x1c0>
 8004ef6:	46c0      	nop			; (mov r8, r8)
 8004ef8:	08005490 	.word	0x08005490
 8004efc:	08005496 	.word	0x08005496
 8004f00:	0800549a 	.word	0x0800549a
 8004f04:	00000000 	.word	0x00000000
 8004f08:	08004c49 	.word	0x08004c49

08004f0c <_printf_common>:
 8004f0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f0e:	0015      	movs	r5, r2
 8004f10:	9301      	str	r3, [sp, #4]
 8004f12:	688a      	ldr	r2, [r1, #8]
 8004f14:	690b      	ldr	r3, [r1, #16]
 8004f16:	000c      	movs	r4, r1
 8004f18:	9000      	str	r0, [sp, #0]
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	da00      	bge.n	8004f20 <_printf_common+0x14>
 8004f1e:	0013      	movs	r3, r2
 8004f20:	0022      	movs	r2, r4
 8004f22:	602b      	str	r3, [r5, #0]
 8004f24:	3243      	adds	r2, #67	; 0x43
 8004f26:	7812      	ldrb	r2, [r2, #0]
 8004f28:	2a00      	cmp	r2, #0
 8004f2a:	d001      	beq.n	8004f30 <_printf_common+0x24>
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	602b      	str	r3, [r5, #0]
 8004f30:	6823      	ldr	r3, [r4, #0]
 8004f32:	069b      	lsls	r3, r3, #26
 8004f34:	d502      	bpl.n	8004f3c <_printf_common+0x30>
 8004f36:	682b      	ldr	r3, [r5, #0]
 8004f38:	3302      	adds	r3, #2
 8004f3a:	602b      	str	r3, [r5, #0]
 8004f3c:	6822      	ldr	r2, [r4, #0]
 8004f3e:	2306      	movs	r3, #6
 8004f40:	0017      	movs	r7, r2
 8004f42:	401f      	ands	r7, r3
 8004f44:	421a      	tst	r2, r3
 8004f46:	d027      	beq.n	8004f98 <_printf_common+0x8c>
 8004f48:	0023      	movs	r3, r4
 8004f4a:	3343      	adds	r3, #67	; 0x43
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	1e5a      	subs	r2, r3, #1
 8004f50:	4193      	sbcs	r3, r2
 8004f52:	6822      	ldr	r2, [r4, #0]
 8004f54:	0692      	lsls	r2, r2, #26
 8004f56:	d430      	bmi.n	8004fba <_printf_common+0xae>
 8004f58:	0022      	movs	r2, r4
 8004f5a:	9901      	ldr	r1, [sp, #4]
 8004f5c:	9800      	ldr	r0, [sp, #0]
 8004f5e:	9e08      	ldr	r6, [sp, #32]
 8004f60:	3243      	adds	r2, #67	; 0x43
 8004f62:	47b0      	blx	r6
 8004f64:	1c43      	adds	r3, r0, #1
 8004f66:	d025      	beq.n	8004fb4 <_printf_common+0xa8>
 8004f68:	2306      	movs	r3, #6
 8004f6a:	6820      	ldr	r0, [r4, #0]
 8004f6c:	682a      	ldr	r2, [r5, #0]
 8004f6e:	68e1      	ldr	r1, [r4, #12]
 8004f70:	2500      	movs	r5, #0
 8004f72:	4003      	ands	r3, r0
 8004f74:	2b04      	cmp	r3, #4
 8004f76:	d103      	bne.n	8004f80 <_printf_common+0x74>
 8004f78:	1a8d      	subs	r5, r1, r2
 8004f7a:	43eb      	mvns	r3, r5
 8004f7c:	17db      	asrs	r3, r3, #31
 8004f7e:	401d      	ands	r5, r3
 8004f80:	68a3      	ldr	r3, [r4, #8]
 8004f82:	6922      	ldr	r2, [r4, #16]
 8004f84:	4293      	cmp	r3, r2
 8004f86:	dd01      	ble.n	8004f8c <_printf_common+0x80>
 8004f88:	1a9b      	subs	r3, r3, r2
 8004f8a:	18ed      	adds	r5, r5, r3
 8004f8c:	2700      	movs	r7, #0
 8004f8e:	42bd      	cmp	r5, r7
 8004f90:	d120      	bne.n	8004fd4 <_printf_common+0xc8>
 8004f92:	2000      	movs	r0, #0
 8004f94:	e010      	b.n	8004fb8 <_printf_common+0xac>
 8004f96:	3701      	adds	r7, #1
 8004f98:	68e3      	ldr	r3, [r4, #12]
 8004f9a:	682a      	ldr	r2, [r5, #0]
 8004f9c:	1a9b      	subs	r3, r3, r2
 8004f9e:	42bb      	cmp	r3, r7
 8004fa0:	ddd2      	ble.n	8004f48 <_printf_common+0x3c>
 8004fa2:	0022      	movs	r2, r4
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	9901      	ldr	r1, [sp, #4]
 8004fa8:	9800      	ldr	r0, [sp, #0]
 8004faa:	9e08      	ldr	r6, [sp, #32]
 8004fac:	3219      	adds	r2, #25
 8004fae:	47b0      	blx	r6
 8004fb0:	1c43      	adds	r3, r0, #1
 8004fb2:	d1f0      	bne.n	8004f96 <_printf_common+0x8a>
 8004fb4:	2001      	movs	r0, #1
 8004fb6:	4240      	negs	r0, r0
 8004fb8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004fba:	2030      	movs	r0, #48	; 0x30
 8004fbc:	18e1      	adds	r1, r4, r3
 8004fbe:	3143      	adds	r1, #67	; 0x43
 8004fc0:	7008      	strb	r0, [r1, #0]
 8004fc2:	0021      	movs	r1, r4
 8004fc4:	1c5a      	adds	r2, r3, #1
 8004fc6:	3145      	adds	r1, #69	; 0x45
 8004fc8:	7809      	ldrb	r1, [r1, #0]
 8004fca:	18a2      	adds	r2, r4, r2
 8004fcc:	3243      	adds	r2, #67	; 0x43
 8004fce:	3302      	adds	r3, #2
 8004fd0:	7011      	strb	r1, [r2, #0]
 8004fd2:	e7c1      	b.n	8004f58 <_printf_common+0x4c>
 8004fd4:	0022      	movs	r2, r4
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	9901      	ldr	r1, [sp, #4]
 8004fda:	9800      	ldr	r0, [sp, #0]
 8004fdc:	9e08      	ldr	r6, [sp, #32]
 8004fde:	321a      	adds	r2, #26
 8004fe0:	47b0      	blx	r6
 8004fe2:	1c43      	adds	r3, r0, #1
 8004fe4:	d0e6      	beq.n	8004fb4 <_printf_common+0xa8>
 8004fe6:	3701      	adds	r7, #1
 8004fe8:	e7d1      	b.n	8004f8e <_printf_common+0x82>
	...

08004fec <_printf_i>:
 8004fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fee:	b08b      	sub	sp, #44	; 0x2c
 8004ff0:	9206      	str	r2, [sp, #24]
 8004ff2:	000a      	movs	r2, r1
 8004ff4:	3243      	adds	r2, #67	; 0x43
 8004ff6:	9307      	str	r3, [sp, #28]
 8004ff8:	9005      	str	r0, [sp, #20]
 8004ffa:	9204      	str	r2, [sp, #16]
 8004ffc:	7e0a      	ldrb	r2, [r1, #24]
 8004ffe:	000c      	movs	r4, r1
 8005000:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005002:	2a78      	cmp	r2, #120	; 0x78
 8005004:	d807      	bhi.n	8005016 <_printf_i+0x2a>
 8005006:	2a62      	cmp	r2, #98	; 0x62
 8005008:	d809      	bhi.n	800501e <_printf_i+0x32>
 800500a:	2a00      	cmp	r2, #0
 800500c:	d100      	bne.n	8005010 <_printf_i+0x24>
 800500e:	e0c1      	b.n	8005194 <_printf_i+0x1a8>
 8005010:	2a58      	cmp	r2, #88	; 0x58
 8005012:	d100      	bne.n	8005016 <_printf_i+0x2a>
 8005014:	e08c      	b.n	8005130 <_printf_i+0x144>
 8005016:	0026      	movs	r6, r4
 8005018:	3642      	adds	r6, #66	; 0x42
 800501a:	7032      	strb	r2, [r6, #0]
 800501c:	e022      	b.n	8005064 <_printf_i+0x78>
 800501e:	0010      	movs	r0, r2
 8005020:	3863      	subs	r0, #99	; 0x63
 8005022:	2815      	cmp	r0, #21
 8005024:	d8f7      	bhi.n	8005016 <_printf_i+0x2a>
 8005026:	f7fb f86f 	bl	8000108 <__gnu_thumb1_case_shi>
 800502a:	0016      	.short	0x0016
 800502c:	fff6001f 	.word	0xfff6001f
 8005030:	fff6fff6 	.word	0xfff6fff6
 8005034:	001ffff6 	.word	0x001ffff6
 8005038:	fff6fff6 	.word	0xfff6fff6
 800503c:	fff6fff6 	.word	0xfff6fff6
 8005040:	003600a8 	.word	0x003600a8
 8005044:	fff6009a 	.word	0xfff6009a
 8005048:	00b9fff6 	.word	0x00b9fff6
 800504c:	0036fff6 	.word	0x0036fff6
 8005050:	fff6fff6 	.word	0xfff6fff6
 8005054:	009e      	.short	0x009e
 8005056:	0026      	movs	r6, r4
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	3642      	adds	r6, #66	; 0x42
 800505c:	1d11      	adds	r1, r2, #4
 800505e:	6019      	str	r1, [r3, #0]
 8005060:	6813      	ldr	r3, [r2, #0]
 8005062:	7033      	strb	r3, [r6, #0]
 8005064:	2301      	movs	r3, #1
 8005066:	e0a7      	b.n	80051b8 <_printf_i+0x1cc>
 8005068:	6808      	ldr	r0, [r1, #0]
 800506a:	6819      	ldr	r1, [r3, #0]
 800506c:	1d0a      	adds	r2, r1, #4
 800506e:	0605      	lsls	r5, r0, #24
 8005070:	d50b      	bpl.n	800508a <_printf_i+0x9e>
 8005072:	680d      	ldr	r5, [r1, #0]
 8005074:	601a      	str	r2, [r3, #0]
 8005076:	2d00      	cmp	r5, #0
 8005078:	da03      	bge.n	8005082 <_printf_i+0x96>
 800507a:	232d      	movs	r3, #45	; 0x2d
 800507c:	9a04      	ldr	r2, [sp, #16]
 800507e:	426d      	negs	r5, r5
 8005080:	7013      	strb	r3, [r2, #0]
 8005082:	4b61      	ldr	r3, [pc, #388]	; (8005208 <_printf_i+0x21c>)
 8005084:	270a      	movs	r7, #10
 8005086:	9303      	str	r3, [sp, #12]
 8005088:	e01b      	b.n	80050c2 <_printf_i+0xd6>
 800508a:	680d      	ldr	r5, [r1, #0]
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	0641      	lsls	r1, r0, #25
 8005090:	d5f1      	bpl.n	8005076 <_printf_i+0x8a>
 8005092:	b22d      	sxth	r5, r5
 8005094:	e7ef      	b.n	8005076 <_printf_i+0x8a>
 8005096:	680d      	ldr	r5, [r1, #0]
 8005098:	6819      	ldr	r1, [r3, #0]
 800509a:	1d08      	adds	r0, r1, #4
 800509c:	6018      	str	r0, [r3, #0]
 800509e:	062e      	lsls	r6, r5, #24
 80050a0:	d501      	bpl.n	80050a6 <_printf_i+0xba>
 80050a2:	680d      	ldr	r5, [r1, #0]
 80050a4:	e003      	b.n	80050ae <_printf_i+0xc2>
 80050a6:	066d      	lsls	r5, r5, #25
 80050a8:	d5fb      	bpl.n	80050a2 <_printf_i+0xb6>
 80050aa:	680d      	ldr	r5, [r1, #0]
 80050ac:	b2ad      	uxth	r5, r5
 80050ae:	4b56      	ldr	r3, [pc, #344]	; (8005208 <_printf_i+0x21c>)
 80050b0:	2708      	movs	r7, #8
 80050b2:	9303      	str	r3, [sp, #12]
 80050b4:	2a6f      	cmp	r2, #111	; 0x6f
 80050b6:	d000      	beq.n	80050ba <_printf_i+0xce>
 80050b8:	3702      	adds	r7, #2
 80050ba:	0023      	movs	r3, r4
 80050bc:	2200      	movs	r2, #0
 80050be:	3343      	adds	r3, #67	; 0x43
 80050c0:	701a      	strb	r2, [r3, #0]
 80050c2:	6863      	ldr	r3, [r4, #4]
 80050c4:	60a3      	str	r3, [r4, #8]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	db03      	blt.n	80050d2 <_printf_i+0xe6>
 80050ca:	2204      	movs	r2, #4
 80050cc:	6821      	ldr	r1, [r4, #0]
 80050ce:	4391      	bics	r1, r2
 80050d0:	6021      	str	r1, [r4, #0]
 80050d2:	2d00      	cmp	r5, #0
 80050d4:	d102      	bne.n	80050dc <_printf_i+0xf0>
 80050d6:	9e04      	ldr	r6, [sp, #16]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00c      	beq.n	80050f6 <_printf_i+0x10a>
 80050dc:	9e04      	ldr	r6, [sp, #16]
 80050de:	0028      	movs	r0, r5
 80050e0:	0039      	movs	r1, r7
 80050e2:	f7fb f8a1 	bl	8000228 <__aeabi_uidivmod>
 80050e6:	9b03      	ldr	r3, [sp, #12]
 80050e8:	3e01      	subs	r6, #1
 80050ea:	5c5b      	ldrb	r3, [r3, r1]
 80050ec:	7033      	strb	r3, [r6, #0]
 80050ee:	002b      	movs	r3, r5
 80050f0:	0005      	movs	r5, r0
 80050f2:	429f      	cmp	r7, r3
 80050f4:	d9f3      	bls.n	80050de <_printf_i+0xf2>
 80050f6:	2f08      	cmp	r7, #8
 80050f8:	d109      	bne.n	800510e <_printf_i+0x122>
 80050fa:	6823      	ldr	r3, [r4, #0]
 80050fc:	07db      	lsls	r3, r3, #31
 80050fe:	d506      	bpl.n	800510e <_printf_i+0x122>
 8005100:	6863      	ldr	r3, [r4, #4]
 8005102:	6922      	ldr	r2, [r4, #16]
 8005104:	4293      	cmp	r3, r2
 8005106:	dc02      	bgt.n	800510e <_printf_i+0x122>
 8005108:	2330      	movs	r3, #48	; 0x30
 800510a:	3e01      	subs	r6, #1
 800510c:	7033      	strb	r3, [r6, #0]
 800510e:	9b04      	ldr	r3, [sp, #16]
 8005110:	1b9b      	subs	r3, r3, r6
 8005112:	6123      	str	r3, [r4, #16]
 8005114:	9b07      	ldr	r3, [sp, #28]
 8005116:	0021      	movs	r1, r4
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	9805      	ldr	r0, [sp, #20]
 800511c:	9b06      	ldr	r3, [sp, #24]
 800511e:	aa09      	add	r2, sp, #36	; 0x24
 8005120:	f7ff fef4 	bl	8004f0c <_printf_common>
 8005124:	1c43      	adds	r3, r0, #1
 8005126:	d14c      	bne.n	80051c2 <_printf_i+0x1d6>
 8005128:	2001      	movs	r0, #1
 800512a:	4240      	negs	r0, r0
 800512c:	b00b      	add	sp, #44	; 0x2c
 800512e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005130:	3145      	adds	r1, #69	; 0x45
 8005132:	700a      	strb	r2, [r1, #0]
 8005134:	4a34      	ldr	r2, [pc, #208]	; (8005208 <_printf_i+0x21c>)
 8005136:	9203      	str	r2, [sp, #12]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	6821      	ldr	r1, [r4, #0]
 800513c:	ca20      	ldmia	r2!, {r5}
 800513e:	601a      	str	r2, [r3, #0]
 8005140:	0608      	lsls	r0, r1, #24
 8005142:	d516      	bpl.n	8005172 <_printf_i+0x186>
 8005144:	07cb      	lsls	r3, r1, #31
 8005146:	d502      	bpl.n	800514e <_printf_i+0x162>
 8005148:	2320      	movs	r3, #32
 800514a:	4319      	orrs	r1, r3
 800514c:	6021      	str	r1, [r4, #0]
 800514e:	2710      	movs	r7, #16
 8005150:	2d00      	cmp	r5, #0
 8005152:	d1b2      	bne.n	80050ba <_printf_i+0xce>
 8005154:	2320      	movs	r3, #32
 8005156:	6822      	ldr	r2, [r4, #0]
 8005158:	439a      	bics	r2, r3
 800515a:	6022      	str	r2, [r4, #0]
 800515c:	e7ad      	b.n	80050ba <_printf_i+0xce>
 800515e:	2220      	movs	r2, #32
 8005160:	6809      	ldr	r1, [r1, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	6022      	str	r2, [r4, #0]
 8005166:	0022      	movs	r2, r4
 8005168:	2178      	movs	r1, #120	; 0x78
 800516a:	3245      	adds	r2, #69	; 0x45
 800516c:	7011      	strb	r1, [r2, #0]
 800516e:	4a27      	ldr	r2, [pc, #156]	; (800520c <_printf_i+0x220>)
 8005170:	e7e1      	b.n	8005136 <_printf_i+0x14a>
 8005172:	0648      	lsls	r0, r1, #25
 8005174:	d5e6      	bpl.n	8005144 <_printf_i+0x158>
 8005176:	b2ad      	uxth	r5, r5
 8005178:	e7e4      	b.n	8005144 <_printf_i+0x158>
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	680d      	ldr	r5, [r1, #0]
 800517e:	1d10      	adds	r0, r2, #4
 8005180:	6949      	ldr	r1, [r1, #20]
 8005182:	6018      	str	r0, [r3, #0]
 8005184:	6813      	ldr	r3, [r2, #0]
 8005186:	062e      	lsls	r6, r5, #24
 8005188:	d501      	bpl.n	800518e <_printf_i+0x1a2>
 800518a:	6019      	str	r1, [r3, #0]
 800518c:	e002      	b.n	8005194 <_printf_i+0x1a8>
 800518e:	066d      	lsls	r5, r5, #25
 8005190:	d5fb      	bpl.n	800518a <_printf_i+0x19e>
 8005192:	8019      	strh	r1, [r3, #0]
 8005194:	2300      	movs	r3, #0
 8005196:	9e04      	ldr	r6, [sp, #16]
 8005198:	6123      	str	r3, [r4, #16]
 800519a:	e7bb      	b.n	8005114 <_printf_i+0x128>
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	1d11      	adds	r1, r2, #4
 80051a0:	6019      	str	r1, [r3, #0]
 80051a2:	6816      	ldr	r6, [r2, #0]
 80051a4:	2100      	movs	r1, #0
 80051a6:	0030      	movs	r0, r6
 80051a8:	6862      	ldr	r2, [r4, #4]
 80051aa:	f000 f831 	bl	8005210 <memchr>
 80051ae:	2800      	cmp	r0, #0
 80051b0:	d001      	beq.n	80051b6 <_printf_i+0x1ca>
 80051b2:	1b80      	subs	r0, r0, r6
 80051b4:	6060      	str	r0, [r4, #4]
 80051b6:	6863      	ldr	r3, [r4, #4]
 80051b8:	6123      	str	r3, [r4, #16]
 80051ba:	2300      	movs	r3, #0
 80051bc:	9a04      	ldr	r2, [sp, #16]
 80051be:	7013      	strb	r3, [r2, #0]
 80051c0:	e7a8      	b.n	8005114 <_printf_i+0x128>
 80051c2:	6923      	ldr	r3, [r4, #16]
 80051c4:	0032      	movs	r2, r6
 80051c6:	9906      	ldr	r1, [sp, #24]
 80051c8:	9805      	ldr	r0, [sp, #20]
 80051ca:	9d07      	ldr	r5, [sp, #28]
 80051cc:	47a8      	blx	r5
 80051ce:	1c43      	adds	r3, r0, #1
 80051d0:	d0aa      	beq.n	8005128 <_printf_i+0x13c>
 80051d2:	6823      	ldr	r3, [r4, #0]
 80051d4:	079b      	lsls	r3, r3, #30
 80051d6:	d415      	bmi.n	8005204 <_printf_i+0x218>
 80051d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051da:	68e0      	ldr	r0, [r4, #12]
 80051dc:	4298      	cmp	r0, r3
 80051de:	daa5      	bge.n	800512c <_printf_i+0x140>
 80051e0:	0018      	movs	r0, r3
 80051e2:	e7a3      	b.n	800512c <_printf_i+0x140>
 80051e4:	0022      	movs	r2, r4
 80051e6:	2301      	movs	r3, #1
 80051e8:	9906      	ldr	r1, [sp, #24]
 80051ea:	9805      	ldr	r0, [sp, #20]
 80051ec:	9e07      	ldr	r6, [sp, #28]
 80051ee:	3219      	adds	r2, #25
 80051f0:	47b0      	blx	r6
 80051f2:	1c43      	adds	r3, r0, #1
 80051f4:	d098      	beq.n	8005128 <_printf_i+0x13c>
 80051f6:	3501      	adds	r5, #1
 80051f8:	68e3      	ldr	r3, [r4, #12]
 80051fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051fc:	1a9b      	subs	r3, r3, r2
 80051fe:	42ab      	cmp	r3, r5
 8005200:	dcf0      	bgt.n	80051e4 <_printf_i+0x1f8>
 8005202:	e7e9      	b.n	80051d8 <_printf_i+0x1ec>
 8005204:	2500      	movs	r5, #0
 8005206:	e7f7      	b.n	80051f8 <_printf_i+0x20c>
 8005208:	080054a1 	.word	0x080054a1
 800520c:	080054b2 	.word	0x080054b2

08005210 <memchr>:
 8005210:	b2c9      	uxtb	r1, r1
 8005212:	1882      	adds	r2, r0, r2
 8005214:	4290      	cmp	r0, r2
 8005216:	d101      	bne.n	800521c <memchr+0xc>
 8005218:	2000      	movs	r0, #0
 800521a:	4770      	bx	lr
 800521c:	7803      	ldrb	r3, [r0, #0]
 800521e:	428b      	cmp	r3, r1
 8005220:	d0fb      	beq.n	800521a <memchr+0xa>
 8005222:	3001      	adds	r0, #1
 8005224:	e7f6      	b.n	8005214 <memchr+0x4>

08005226 <memmove>:
 8005226:	b510      	push	{r4, lr}
 8005228:	4288      	cmp	r0, r1
 800522a:	d902      	bls.n	8005232 <memmove+0xc>
 800522c:	188b      	adds	r3, r1, r2
 800522e:	4298      	cmp	r0, r3
 8005230:	d303      	bcc.n	800523a <memmove+0x14>
 8005232:	2300      	movs	r3, #0
 8005234:	e007      	b.n	8005246 <memmove+0x20>
 8005236:	5c8b      	ldrb	r3, [r1, r2]
 8005238:	5483      	strb	r3, [r0, r2]
 800523a:	3a01      	subs	r2, #1
 800523c:	d2fb      	bcs.n	8005236 <memmove+0x10>
 800523e:	bd10      	pop	{r4, pc}
 8005240:	5ccc      	ldrb	r4, [r1, r3]
 8005242:	54c4      	strb	r4, [r0, r3]
 8005244:	3301      	adds	r3, #1
 8005246:	429a      	cmp	r2, r3
 8005248:	d1fa      	bne.n	8005240 <memmove+0x1a>
 800524a:	e7f8      	b.n	800523e <memmove+0x18>

0800524c <_realloc_r>:
 800524c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800524e:	0007      	movs	r7, r0
 8005250:	000e      	movs	r6, r1
 8005252:	0014      	movs	r4, r2
 8005254:	2900      	cmp	r1, #0
 8005256:	d105      	bne.n	8005264 <_realloc_r+0x18>
 8005258:	0011      	movs	r1, r2
 800525a:	f7ff fb7f 	bl	800495c <_malloc_r>
 800525e:	0005      	movs	r5, r0
 8005260:	0028      	movs	r0, r5
 8005262:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005264:	2a00      	cmp	r2, #0
 8005266:	d103      	bne.n	8005270 <_realloc_r+0x24>
 8005268:	f7ff fca4 	bl	8004bb4 <_free_r>
 800526c:	0025      	movs	r5, r4
 800526e:	e7f7      	b.n	8005260 <_realloc_r+0x14>
 8005270:	f000 f81b 	bl	80052aa <_malloc_usable_size_r>
 8005274:	9001      	str	r0, [sp, #4]
 8005276:	4284      	cmp	r4, r0
 8005278:	d803      	bhi.n	8005282 <_realloc_r+0x36>
 800527a:	0035      	movs	r5, r6
 800527c:	0843      	lsrs	r3, r0, #1
 800527e:	42a3      	cmp	r3, r4
 8005280:	d3ee      	bcc.n	8005260 <_realloc_r+0x14>
 8005282:	0021      	movs	r1, r4
 8005284:	0038      	movs	r0, r7
 8005286:	f7ff fb69 	bl	800495c <_malloc_r>
 800528a:	1e05      	subs	r5, r0, #0
 800528c:	d0e8      	beq.n	8005260 <_realloc_r+0x14>
 800528e:	9b01      	ldr	r3, [sp, #4]
 8005290:	0022      	movs	r2, r4
 8005292:	429c      	cmp	r4, r3
 8005294:	d900      	bls.n	8005298 <_realloc_r+0x4c>
 8005296:	001a      	movs	r2, r3
 8005298:	0031      	movs	r1, r6
 800529a:	0028      	movs	r0, r5
 800529c:	f7ff fb2a 	bl	80048f4 <memcpy>
 80052a0:	0031      	movs	r1, r6
 80052a2:	0038      	movs	r0, r7
 80052a4:	f7ff fc86 	bl	8004bb4 <_free_r>
 80052a8:	e7da      	b.n	8005260 <_realloc_r+0x14>

080052aa <_malloc_usable_size_r>:
 80052aa:	1f0b      	subs	r3, r1, #4
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	1f18      	subs	r0, r3, #4
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	da01      	bge.n	80052b8 <_malloc_usable_size_r+0xe>
 80052b4:	580b      	ldr	r3, [r1, r0]
 80052b6:	18c0      	adds	r0, r0, r3
 80052b8:	4770      	bx	lr
	...

080052bc <_init>:
 80052bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052be:	46c0      	nop			; (mov r8, r8)
 80052c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052c2:	bc08      	pop	{r3}
 80052c4:	469e      	mov	lr, r3
 80052c6:	4770      	bx	lr

080052c8 <_fini>:
 80052c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ca:	46c0      	nop			; (mov r8, r8)
 80052cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ce:	bc08      	pop	{r3}
 80052d0:	469e      	mov	lr, r3
 80052d2:	4770      	bx	lr
